<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[在Android Studio中自定义代码模板]]></title>
      <url>https://xch168.github.io/2018/11/10/Android-Studio-custom-code-template/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>我们在使用Android Studio创建Activity、Fragment等等的时候，都会使用Android Studio提供的模板来简化我们创建的，使用模板时，我们只要做简单的配置，Android就能为我们生成相应的代码，所以使用模板可以提高开发的效率，接下来我们将学习如何去自定义一个符合自己项目框架的模板。</p>
</blockquote>
<a id="more"></a>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p>Android Studio模板的安装路径：<code>&lt;Android Studio安装目录&gt;/plugins/android/lib/templates</code></p>
</blockquote>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/as_template_dir.png" alt="as_template_dir"></p>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/as_template.png" alt="as_template"></p>
<h3 id="模板文件结构"><a href="#模板文件结构" class="headerlink" title="模板文件结构"></a>模板文件结构</h3><p>Android Studio中已有的<code>Empty Activity</code>模板：</p>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/empty_activity_template.png" alt="empty_activity_template"></p>
<p>模板组成结构：</p>
<ul>
<li>template.xml：定义模板参数</li>
<li>globals.xml.ftl：定义全局变量</li>
<li>recipe.xml.ftl：配置要引用的模板路径和生成的文件的路径</li>
<li>root文件：存放模板文件和资源文件</li>
<li>效果缩略图</li>
</ul>
<p>模板变量处理流程：</p>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/template_variable_dataflow.png" alt="template_variable_dataflow"></p>
<h4 id="template-xml"><a href="#template-xml" class="headerlink" title="template.xml"></a>template.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span></span></span><br><span class="line"><span class="tag">    <span class="attr">format</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">revision</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"Empty Activity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">minApi</span>=<span class="string">"9"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">minBuildApi</span>=<span class="string">"14"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">description</span>=<span class="string">"Creates a new empty activity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">value</span>=<span class="string">"Activity"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formfactor</span> <span class="attr">value</span>=<span class="string">"Mobile"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"activityClass"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Activity Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;layoutToActivity(layoutName)&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"MainActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the activity class to create"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"generateLayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Generate Layout File"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"boolean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"If true, a layout file will be generated"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"layoutName"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Layout Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"layout|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;activityToLayout(activityClass)&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"activity_main"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">visibility</span>=<span class="string">"generateLayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the layout to create for the activity"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"isLauncher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Launcher Activity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"boolean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"If true, this activity will have a CATEGORY_LAUNCHER intent filter, making it visible in the launcher"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"backwardsCompatibility"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Backwards Compatibility (AppCompat)"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"boolean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"If false, this activity base class will be Activity instead of AppCompatActivity"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"packageName"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Package name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"package"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"com.mycompany.myapp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 128x128 thumbnails relative to template.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thumbs</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- default thumbnail is required --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thumb</span>&gt;</span>template_blank_activity.png<span class="tag">&lt;/<span class="name">thumb</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thumbs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">globals</span> <span class="attr">file</span>=<span class="string">"globals.xml.ftl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execute</span> <span class="attr">file</span>=<span class="string">"recipe.xml.ftl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/template.png" alt="template"></p>
<p><strong>说明</strong>：</p>
<ul>
<li><code>&lt;template&gt;</code>中的<code>name</code>对应新建<code>Activity</code>时显示的名字</li>
<li><code>&lt;category&gt;</code>对应New的类别为<code>Activity</code></li>
<li><code>&lt;parameter&gt;</code>对应界面上蓝色框的一个项，<ul>
<li>id：唯一表示，最终通过该属性值，获取用户界面上的输入值</li>
<li>name：界面上Label提示语</li>
<li>type：输入值类型</li>
<li>constraints：值约束</li>
<li>suggest：建议值，比如填写ActivityName的时候，会给出LayoutName的建议值</li>
<li>help：底部显示的提示语</li>
</ul>
</li>
</ul>
<h4 id="globals-xml-ftl"><a href="#globals-xml-ftl" class="headerlink" title="globals.xml.ftl"></a>globals.xml.ftl</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">globals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"hasNoActionBar"</span> <span class="attr">type</span>=<span class="string">"boolean"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"parentActivityClass"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"simpleLayoutName"</span> <span class="attr">value</span>=<span class="string">"$&#123;layoutName&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"excludeMenu"</span> <span class="attr">type</span>=<span class="string">"boolean"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"generateActivityTitle"</span> <span class="attr">type</span>=<span class="string">"boolean"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#include</span> "<span class="attr">..</span>/<span class="attr">common</span>/<span class="attr">common_globals.xml.ftl</span>" /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">globals</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个文件用于定义一些全局变量。</p>
<p><strong>说明</strong>：</p>
<p><code>&lt;global&gt;</code>：表示一个全局变量</p>
<ul>
<li>id：变量名</li>
<li>type：变量类型</li>
<li>value：默认值</li>
</ul>
<p>访问变量：<code>${变量id}</code></p>
<h4 id="recipe-xml-ftl"><a href="#recipe-xml-ftl" class="headerlink" title="recipe.xml.ftl"></a>recipe.xml.ftl</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#import</span> "<span class="attr">root:</span>//<span class="attr">activities</span>/<span class="attr">common</span>/<span class="attr">kotlin_macros.ftl</span>" <span class="attr">as</span> <span class="attr">kt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">recipe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#include</span> "<span class="attr">..</span>/<span class="attr">common</span>/<span class="attr">recipe_manifest.xml.ftl</span>" /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">@kt.addAllKotlinDependencies</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">generateLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#include</span> "<span class="attr">..</span>/<span class="attr">common</span>/<span class="attr">recipe_simple.xml.ftl</span>" /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(resOut)&#125;/layout/$&#123;layoutName&#125;.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/SimpleActivity.$&#123;ktOrJavaExt&#125;.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;activityClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line">                                  </span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;activityClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">recipe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>该文件用于定义如何生成代码和文件。</p>
</blockquote>
<p><strong>说明</strong>：</p>
<ul>
<li><code>&lt;#include&gt;</code>：导入另一个ftl文件</li>
<li><code>&lt;open&gt;</code>：在代码生成后打开指定文件，例如，当我们创建一个Activity后，AS会自动打开Activity及布局文件。</li>
<li><code>&lt;instantiate&gt;</code>：将<code>.ftl</code>文件转成<code>.java</code>或<code>.kt</code>文件。</li>
<li><code>&lt;copy&gt;</code>：用于从<code>root</code>文件夹中复制文件到目标目录。</li>
<li><code>&lt;merge&gt;</code>：用于合并文件，如将模板的strings.xml合并到我们项目中的strings.xml</li>
</ul>
<h3 id="Freemarker语法"><a href="#Freemarker语法" class="headerlink" title="Freemarker语法"></a>Freemarker语法</h3><blockquote>
<p>AS 中模板的定义使用的是Freemarker的语法。</p>
</blockquote>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul>
<li><p><code>${变量名}</code>：访问变量值</p>
</li>
<li><p><code>&lt;#if  变量名&gt;</code>：条件判断</p>
</li>
<li><code>&lt;#include &quot;xx.ftl&quot;&gt;</code>：引入其他模板文件</li>
</ul>
<p>实例：EmptyActivity\root\src\app_package\SimpleActivity.java.ftl</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $&#123;superClassFqcn&#125;;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line">&lt;#if (includeCppSupport!false) &amp;&amp; generateLayout&gt;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;activityClass&#125; extends $&#123;superClass&#125; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">&lt;#if generateLayout&gt;</span><br><span class="line">        setContentView(R.layout.$&#123;layoutName&#125;);</span><br><span class="line">       &lt;#include "../../../../common/jni_code_usage.java.ftl"&gt;</span><br><span class="line">&lt;#elseif includeCppSupport!false&gt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Example of a call to a native method</span></span><br><span class="line">        android.util.Log.d(<span class="string">"$&#123;activityClass&#125;"</span>, stringFromJNI());</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;#include "../../../../common/jni_code_snippet.java.ftl"&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从模板到代码的流程：</p>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/code_generation_process.png" alt="code_generation_process"></p>
<h3 id="自定义MVP模板"><a href="#自定义MVP模板" class="headerlink" title="自定义MVP模板"></a>自定义MVP模板</h3><blockquote>
<p>在Google给出的MVP Sample中，每创建一个页面，需要创建：</p>
<p><code>XxActivity</code>、<code>XxFragment</code>、<code>XxContract</code>、<code>XxPresenter</code>四个文件，步骤繁琐，且AS目前没有提供相应的模板，所以接下来将自定义一个MVP的模板，来简化这些繁琐的操作。</p>
</blockquote>
<h4 id="template-xml-1"><a href="#template-xml-1" class="headerlink" title="template.xml"></a>template.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span></span></span><br><span class="line"><span class="tag">    <span class="attr">format</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">revision</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"Page"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">minApi</span>=<span class="string">"9"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">minBuildApi</span>=<span class="string">"14"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">description</span>=<span class="string">"Creates a new MVP page"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">value</span>=<span class="string">"MVP"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formfactor</span> <span class="attr">value</span>=<span class="string">"Mobile"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"activityClass"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Activity Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;layoutToActivity(activityLayout)&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"MainActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the activity class to create"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"activityLayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Activity Layout Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"layout|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;activityToLayout(activityClass)&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"activity_main"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the layout to create for the activity"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"fragmentClass"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Fragment Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;underscoreToCamelCase(classToResource(activityClass))&#125;Fragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"MainFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the fragment class to create"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"fragmentLayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Fragment Layout Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"layout|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"fragment_$&#123;classToResource(fragmentClass)&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"fragment_main"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the layout to create for the fragment"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"contractClass"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Contract Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;underscoreToCamelCase(classToResource(fragmentClass))&#125;Contract"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"MainViewModel"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the contract class to create"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"presenterClass"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Presenter Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;underscoreToCamelCase(classToResource(fragmentClass))&#125;Presenter"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"MainViewModel"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the presenter class to create"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"isLauncher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Launcher Activity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"boolean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"If true, this activity will have a CATEGORY_LAUNCHER intent filter, making it visible in the launcher"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"packageName"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Package name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"package"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"com.mycompany.myapp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"pagePackage"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Page package path"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"package"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"ui.$&#123;classToResource(fragmentClass)?replace('_', '')&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"ui.main"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The package path for the page."</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 128x128 thumbnails relative to template.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thumbs</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- default thumbnail is required --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thumb</span>&gt;</span>template_blank_activity.png<span class="tag">&lt;/<span class="name">thumb</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thumbs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">globals</span> <span class="attr">file</span>=<span class="string">"globals.xml.ftl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execute</span> <span class="attr">file</span>=<span class="string">"recipe.xml.ftl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="globals-xml-ftl-1"><a href="#globals-xml-ftl-1" class="headerlink" title="globals.xml.ftl"></a>globals.xml.ftl</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">globals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"hasNoActionBar"</span> <span class="attr">type</span>=<span class="string">"boolean"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"parentActivityClass"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"simpleLayoutName"</span> <span class="attr">value</span>=<span class="string">"$&#123;activityLayout&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"excludeMenu"</span> <span class="attr">type</span>=<span class="string">"boolean"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"generateActivityTitle"</span> <span class="attr">type</span>=<span class="string">"boolean"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#include</span> "<span class="attr">..</span>/<span class="attr">..</span>/<span class="attr">activities</span>/<span class="attr">common</span>/<span class="attr">common_globals.xml.ftl</span>" /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">globals</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="recipe-xml-ftl-1"><a href="#recipe-xml-ftl-1" class="headerlink" title="recipe.xml.ftl"></a>recipe.xml.ftl</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">recipe</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">#--</span>  生成<span class="attr">mainfest</span>配置  <span class="attr">--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">merge</span> <span class="attr">from</span>=<span class="string">"root/AndroidManifest.xml.ftl"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(manifestOut)&#125;/AndroidManifest.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">#--</span>  生成布局文件  <span class="attr">--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/res/layout/activity.xml.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(resOut)&#125;/layout/$&#123;escapeXmlAttribute(activityLayout)&#125;.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/res/layout/fragment.xml.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(resOut)&#125;/layout/$&#123;escapeXmlAttribute(fragmentLayout)&#125;.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">#--</span>  生成<span class="attr">.java</span>文件  <span class="attr">--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/Activity.$&#123;ktOrJavaExt&#125;.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;activityClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/Fragment.$&#123;ktOrJavaExt&#125;.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;fragmentClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/Contract.$&#123;ktOrJavaExt&#125;.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;contractClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/Presenter.$&#123;ktOrJavaExt&#125;.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;presenterClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span>   </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">#--</span>  打开文件<span class="attr">.java</span>文件  <span class="attr">--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;activityClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;fragmentClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;contractClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;presenterClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">#--</span>  打开布局文件  <span class="attr">--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(resOut)&#125;/layout/$&#123;escapeXmlAttribute(activityLayout)&#125;.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(resOut)&#125;/layout/$&#123;escapeXmlAttribute(fragmentLayout)&#125;.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">recipe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Activity-java-ftl"><a href="#Activity-java-ftl" class="headerlink" title="Activity.java.ftl"></a>Activity.java.ftl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;.$&#123;pagePackage&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $&#123;superClassFqcn&#125;;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> com.github.xch168.mvp.util.ActivityUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $&#123;packageName&#125;.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;activityClass&#125; extends $&#123;superClass&#125; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.$&#123;activityLayout&#125;);</span><br><span class="line"></span><br><span class="line">        $&#123;fragmentClass&#125; fragment = ($&#123;fragmentClass&#125;) getSupportFragmentManager().findFragmentById(R.id.contentFrame);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">            fragment = $&#123;fragmentClass&#125;.newInstance();</span><br><span class="line"></span><br><span class="line">            ActivityUtil.addFragmentToActivity(getSupportFragmentManager(), fragment, R.id.contentFrame);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> $&#123;presenterClass&#125;(fragment);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Fragment-java-ftl"><a href="#Fragment-java-ftl" class="headerlink" title="Fragment.java.ftl"></a>Fragment.java.ftl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;.$&#123;pagePackage&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $&#123;packageName&#125;.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;fragmentClass&#125; extends Fragment implements $&#123;contractClass&#125;.View &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $&#123;contractClass&#125;.Presenter mPresenter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $&#123;fragmentClass&#125; newInstance() &#123;</span><br><span class="line">        Bundle arguments = <span class="keyword">new</span> Bundle();</span><br><span class="line">        arguments.putString(<span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">        $&#123;fragmentClass&#125; fragment = <span class="keyword">new</span> $&#123;fragmentClass&#125;();</span><br><span class="line">        fragment.setArguments(arguments);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View root = inflater.inflate(R.layout.$&#123;fragmentLayout&#125;, container, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        mPresenter.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(@NonNull $&#123;contractClass&#125;.Presenter presenter)</span> </span>&#123;</span><br><span class="line">        mPresenter = presenter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Contract-java-ftl"><a href="#Contract-java-ftl" class="headerlink" title="Contract.java.ftl"></a>Contract.java.ftl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;.$&#123;pagePackage&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.xch168.mvp.ui.BasePresenter;</span><br><span class="line"><span class="keyword">import</span> com.github.xch168.mvp.ui.BaseView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> $</span>&#123;contractClass&#125; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Presenter-java-ftl"><a href="#Presenter-java-ftl" class="headerlink" title="Presenter.java.ftl"></a>Presenter.java.ftl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;.$&#123;pagePackage&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;presenterClass&#125; implements $&#123;contractClass&#125;.Presenter &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> $&#123;contractClass&#125;.View mView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $&#123;presenterClass&#125;($&#123;contractClass&#125;.View view) &#123;</span><br><span class="line"></span><br><span class="line">        mView = view;</span><br><span class="line"></span><br><span class="line">        mView.setPresenter(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="AndroidManifest-xml-ftl"><a href="#AndroidManifest-xml-ftl" class="headerlink" title="AndroidManifest.xml.ftl"></a>AndroidManifest.xml.ftl</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"$&#123;packageName&#125;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"$&#123;packageName&#125;.$&#123;pagePackage&#125;.$&#123;activityClass&#125;"</span></span></span><br><span class="line">            &lt;#if generateActivityTitle!true&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">#if</span> <span class="attr">isNewProject</span>&gt;</span></span><br><span class="line">                    android:label="@string/app_name"</span><br><span class="line">                <span class="tag">&lt;<span class="name">#else</span>&gt;</span></span><br><span class="line">                    android:label="@string/title_$&#123;activityToLayout(activityClass)&#125;"</span><br><span class="line">                <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">#if</span> <span class="attr">hasNoActionBar</span>&gt;</span></span><br><span class="line">                android:theme="@style/$&#123;themeNameNoActionBar&#125;"</span><br><span class="line">            <span class="tag">&lt;<span class="name">#elseif</span> (<span class="attr">requireTheme</span>!<span class="attr">false</span>) &amp;&amp; !<span class="attr">hasApplicationTheme</span> &amp;&amp; <span class="attr">appCompat</span>&gt;</span></span><br><span class="line">                android:theme="@style/$&#123;themeName&#125;"</span><br><span class="line">            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">#if</span> <span class="attr">buildApi</span> <span class="attr">gte</span> <span class="attr">16</span> &amp;&amp; <span class="attr">parentActivityClass</span> != <span class="string">""</span>&gt;</span></span><br><span class="line">                android:parentActivityName="$&#123;parentActivityClass&#125;"</span><br><span class="line">            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span>&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">#if</span> <span class="attr">parentActivityClass</span> != <span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"android.support.PARENT_ACTIVITY"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:value</span>=<span class="string">"$&#123;parentActivityClass&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用MVP模板"><a href="#使用MVP模板" class="headerlink" title="使用MVP模板"></a>使用MVP模板</h3><blockquote>
<p>将模板文件复制到<code>&lt;Android Studio安装目录&gt;/plugins/android/lib/templates/{userName}/MVP</code>目录下，然后重启Android Studio。</p>
</blockquote>
<p><strong>Step1</strong>：新建一个MVP页面</p>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/use_mvp_templage.jpg" alt="Android-Studio-custom-code-template\use_mvp_templage.jpg"></p>
<p><strong>Step2</strong>：配置参数</p>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/fill_mvp_template.png" alt="fill_mvp_template"></p>
<p><strong>Step3</strong>：点击Finish，将自动生成相关代码及资源文件</p>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/gen_mvp_code.png" alt="gen_mvp_code"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/lmj623565791/article/details/51635533" target="_blank" rel="noopener">Android Studio自定义模板 写页面竟然可以如此轻松</a></li>
<li><a href="http://www.slideshare.net/murphonic/custom-android-code-templates-15537501" target="_blank" rel="noopener">Custom Android Code Templates</a></li>
<li><a href="https://puke3615.github.io/2017/03/06/TemplateBuilder[Chinese]/" target="_blank" rel="noopener">TemplateBuilder(中文版)</a></li>
<li><a href="https://www.jianshu.com/p/fa974a5dc2ff" target="_blank" rel="noopener">Android Studio 轻松构建自定义模板</a></li>
<li><a href="https://www.jianshu.com/p/e3548f441440" target="_blank" rel="noopener">Android Studio Template(模板)开发</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RecyclerView性能优化]]></title>
      <url>https://xch168.github.io/2018/11/08/RecyclerView-best-practices/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>RecyclerView有着极高的灵活性，能实现ListView、GridView的所有功能。在日常开发中，使用非常广泛，如果使用不当将会影响到应用的整体性能，所以有必要了解一下如何更高效的使用。</p>
</blockquote>
<a id="more"></a>
<h3 id="数据处理与视图绑定分离"><a href="#数据处理与视图绑定分离" class="headerlink" title="数据处理与视图绑定分离"></a>数据处理与视图绑定分离</h3><blockquote>
<p>RecyclerView的<code>bindViewHolder</code>方法是在UI线程进行的，如果在该方法进行耗时操作，将会影响滑动的流畅性。</p>
</blockquote>
<p>优化前：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">    Date dateDue;</span><br><span class="line">    String title;</span><br><span class="line">    String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRecyclerView</span>.<span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> TODAYS_DATE = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> DATE_FORMAT = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"MM dd, yyyy"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">onBindViewHolder</span><span class="params">(Task.ViewHolder tvh, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Task task = getItem(position);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (TODAYS_DATE.compareTo(task.dateDue) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            tvh.backgroundView.setColor(Color.GREEN);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tvh.backgroundView.setColor(Color.RED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String dueDateFormatted = DATE_FORMAT.format(task.getDateDue());</span><br><span class="line">        tvh.dateTextView.setDate(dueDateFormatted);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的<code>onBindViewHolder</code>方法中进行了日期的比较和日期的格式化，这个是很耗时的，在<code>onBindViewHolder</code>方法中，应该只是将数据<code>set</code>到视图中，而不应进行业务的处理。</p>
<p>优化后：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskViewModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> overdueColor;</span><br><span class="line">    String dateDue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">onBindViewHolder</span><span class="params">(Task.ViewHolder tvh, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    TaskViewModel taskViewModel = getItem(position);</span><br><span class="line">    tvh.backgroundView.setColor(taskViewModel.getOverdueColor());</span><br><span class="line">    tvh.dateTextView.setDate(taskViewModel.getDateDue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据优化"><a href="#数据优化" class="headerlink" title="数据优化"></a>数据优化</h3><blockquote>
<ol>
<li>分页加载远端数据，对拉取的远端数据进行缓存，提高二次加载速度；</li>
<li>对于新增或删除数据通过<code>DiffUtil</code>，来进行局部数据刷新，而不是一味的全局刷新数据。</li>
</ol>
</blockquote>
<p><code>DiffUtil</code>是support包下新增的一个工具类，用来判断新数据和旧数据的差别，从而进行局部刷新。</p>
<p>DiffUtil的使用，在原来调用<code>mAdapter.notifyDataSetChanged()</code>的地方：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mAdapter.notifyDataSetChanged()</span></span><br><span class="line">DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(<span class="keyword">new</span> DiffCallBack(oldDatas, newDatas), <span class="keyword">true</span>);</span><br><span class="line">diffResult.dispatchUpdatesTo(mAdapter);</span><br></pre></td></tr></table></figure>
<p>DiffUtil最终是调用Adapter的下面几个方法来进行局部刷新：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mAdapter.notifyItemRangeInserted(position, count);</span><br><span class="line">mAdapter.notifyItemRangeRemoved(position, count);</span><br><span class="line">mAdapter.notifyItemMoved(fromPosition, toPosition);</span><br><span class="line">mAdapter.notifyItemRangeChanged(position, count, payload);</span><br></pre></td></tr></table></figure>
<h3 id="布局优化"><a href="#布局优化" class="headerlink" title="布局优化"></a>布局优化</h3><h4 id="减少过度绘制"><a href="#减少过度绘制" class="headerlink" title="减少过度绘制"></a>减少过度绘制</h4><blockquote>
<p>减少布局层级，可以考虑使用自定义View来减少层级，或者更合理的设置布局来减少层级。</p>
</blockquote>
<p><strong>Note</strong>: 目前不推荐在RecyclerView中使用<code>ConstraintLayout</code>，在ConstraintLayout1.1.2版中，性能还是表现不佳，后续的版本可能这个问题就解决了，需要持续关注。</p>
<h4 id="减少xml文件inflate时间"><a href="#减少xml文件inflate时间" class="headerlink" title="减少xml文件inflate时间"></a>减少xml文件inflate时间</h4><blockquote>
<p>xml文件包括：layout、drawable的xml，xml文件inflate出ItemView是通过耗时的IO操作。可以使用代码去生成布局，即<code>new View()</code>的方式。这种方式是比较麻烦，但是在布局太过复杂，或对性能要求比较高的时候可以使用。</p>
</blockquote>
<h4 id="减少View对象的创建"><a href="#减少View对象的创建" class="headerlink" title="减少View对象的创建"></a>减少View对象的创建</h4><blockquote>
<p>一个稍微复杂的 Item 会包含大量的 View，而大量的 View 的创建也会消耗大量时间，所以要尽可能简化 ItemView；设计 ItemType 时，对多 ViewType 能够共用的部分尽量设计成自定义 View，减少 View 的构造和嵌套。</p>
</blockquote>
<h4 id="设置高度固定"><a href="#设置高度固定" class="headerlink" title="设置高度固定"></a>设置高度固定</h4><blockquote>
<p>如果item高度是固定的话，可以使用<code>RecyclerView.setHasFixedSize(true);</code>来避免requestLayout浪费资源。</p>
</blockquote>
<h3 id="共用RecycledViewPool"><a href="#共用RecycledViewPool" class="headerlink" title="共用RecycledViewPool"></a>共用RecycledViewPool</h3><blockquote>
<p>在嵌套RecyclerView中，如果子RecyclerView具有相同的adapter，那么可以设置<code>RecyclerView.setRecycledViewPool(pool)</code>来共用一个RecycledViewPool。</p>
</blockquote>
<p><strong>Note</strong>: 如果LayoutManager是LinearLayoutManager或其子类，需要手动开启这个特性：<code>layout.setRecycleChildrenOnDetach(true)</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">OuterAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line">    RecyclerView.RecycledViewPool mSharedPool = <span class="keyword">new</span> RecyclerView.RecycledViewPool();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OuterAdapter.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RecyclerView innerLLM = <span class="keyword">new</span> RecyclerView(inflater.getContext());</span><br><span class="line"></span><br><span class="line">        LinearLayoutManager innerLLM = <span class="keyword">new</span> LinearLayoutManager(parent.getContext(), LinearLayoutManager.HORIZONTAL);</span><br><span class="line">        innerLLM.setRecycleChildrenOnDetach(<span class="keyword">true</span>);</span><br><span class="line">        innerRv.setLayoutManager(innerLLM);</span><br><span class="line">        innerRv.setRecycledViewPool(mSharedPool);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OuterAdapter.ViewHolder(innerRv);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2018/11/08/RecyclerView-best-practices/RecycledViewPool.jpeg" alt="RecycledViewPool"></p>
<h3 id="RecyclerView数据预取"><a href="#RecyclerView数据预取" class="headerlink" title="RecyclerView数据预取"></a>RecyclerView数据预取</h3><blockquote>
<p>RecyclerView25.1.0及以上版本增加了<code>Prefetch</code>功能。</p>
<p>用于嵌套RecyclerView获取最佳性能。</p>
<p>详细分析：<a href="https://juejin.im/entry/58a3f4f62f301e0069908d8f" target="_blank" rel="noopener">RecyclerView 数据预取</a></p>
</blockquote>
<p><strong>Note</strong>: 只适合横向嵌套</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在嵌套内部的LayoutManager中调用LinearLayoutManger的设置方法</span></span><br><span class="line"><span class="comment">// num的取值：如果列表刚刚展示4个半item，则设置为5</span></span><br><span class="line">innerLLM.setInitialItemsPrefetchCount(num);</span><br></pre></td></tr></table></figure>
<h3 id="加大RecyclerView的缓存"><a href="#加大RecyclerView的缓存" class="headerlink" title="加大RecyclerView的缓存"></a>加大RecyclerView的缓存</h3><blockquote>
<p>用空间换时间，来提高滚动的流畅性。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">recyclerView.setItemViewCacheSize(<span class="number">20</span>);</span><br><span class="line">recyclerView.setDrawingCacheEnabled(<span class="keyword">true</span>);</span><br><span class="line">recyclerView.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_HIGH);</span><br></pre></td></tr></table></figure>
<h3 id="增加RecyclerView预留的额外空间"><a href="#增加RecyclerView预留的额外空间" class="headerlink" title="增加RecyclerView预留的额外空间"></a>增加RecyclerView预留的额外空间</h3><blockquote>
<p>额外空间：显示范围之外，应该额外缓存的空间</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getExtraLayoutSpace</span><span class="params">(RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="减少ItemView监听器的创建"><a href="#减少ItemView监听器的创建" class="headerlink" title="减少ItemView监听器的创建"></a>减少ItemView监听器的创建</h3><blockquote>
<p>对ItemView设置监听器，不要对每个item都创建一个监听器，而应该共用一个XxListener，然后根据<code>ID</code>来进行不同的操作，优化了对象的频繁创建带来的资源消耗。</p>
</blockquote>
<h3 id="优化滑动操作"><a href="#优化滑动操作" class="headerlink" title="优化滑动操作"></a>优化滑动操作</h3><blockquote>
<p>设置<code>RecyclerView.addOnScrollListener();</code>来在滑动过程中停止加载的操作。</p>
</blockquote>
<h3 id="处理刷新闪烁"><a href="#处理刷新闪烁" class="headerlink" title="处理刷新闪烁"></a>处理刷新闪烁</h3><blockquote>
<p>调用notifyDataSetChange时，适配器不知道整个数据集中的那些内容以及存在，再重新匹配ViewHolder时会花生闪烁。</p>
<p>设置adapter.setHasStableIds(true)，并重写getItemId()来给每个Item一个唯一的ID</p>
</blockquote>
<h3 id="回收资源"><a href="#回收资源" class="headerlink" title="回收资源"></a>回收资源</h3><blockquote>
<p>通过重写<code>RecyclerView.onViewRecycled(holder)</code>来回收资源。</p>
</blockquote>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blankj.com/2018/09/29/optimize-recycler-view/" target="_blank" rel="noopener">RecyclerView 性能优化</a></li>
<li><a href="https://blog.csdn.net/a8688555/article/details/79634295" target="_blank" rel="noopener">Android recycleView 的一些优化与相关问题</a></li>
<li><a href="https://stackoverflow.com/questions/27188536/recyclerview-scrolling-performance" target="_blank" rel="noopener">RecyclerView Scrolling Performance</a></li>
<li><a href="https://stackoverflow.com/questions/27993627/optimizing-recyclerview-listview" target="_blank" rel="noopener">Optimizing RecyclerView/ListView</a></li>
<li><a href="http://www.cnblogs.com/ldq2016/p/9039979.html" target="_blank" rel="noopener">RecyclerView 列表类控件卡顿优化</a></li>
<li><a href="https://juejin.im/entry/58a3f4f62f301e0069908d8f" target="_blank" rel="noopener">RecyclerView 数据预取</a></li>
<li><a href="https://blog.csdn.net/qq_25867141/article/details/52769332" target="_blank" rel="noopener">DiffUtil新工具类，让你的RecyclerView飞一会</a></li>
<li><a href="https://www.cnblogs.com/dasusu/p/9159904.html" target="_blank" rel="noopener">关于RecyclerView你知道的不知道的都在这了（上）</a></li>
<li><a href="https://www.cnblogs.com/dasusu/p/9255335.html" target="_blank" rel="noopener">关于RecyclerView你知道的不知道的都在这了（下）</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Android logcat中打印FFmpeg调试信息]]></title>
      <url>https://xch168.github.io/2018/11/02/android-ffmpeg-logcat/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>在日常Android开发中，我们都是通过Logcat来查看日志，但是将FFmpeg移植到Android上，无法在Logcat中查看调试信息而无法分析错误。本文将介绍如何配置来将FFmpeg的信息输出到Logcat。</p>
</blockquote>
<a id="more"></a>
<h3 id="av-log-set-callback"><a href="#av-log-set-callback" class="headerlink" title="av_log_set_callback"></a>av_log_set_callback</h3><blockquote>
<p>FFmpeg中的av_log_set_callback函数用来注册FFmpeg日志输出的回调接口。</p>
</blockquote>
<p>在FFmpeg源码中的ffmpeg.c文件的main函数中有av_log_set_callback的调用，而log_callback_null是个空的回调函数，一个思路是可以直接在该回调函数写打印代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 省略其他代码...</span></span><br><span class="line">    av_log_set_callback(log_callback_null);</span><br><span class="line">    <span class="comment">// 省略其他代码...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log_callback_null</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">int</span> level, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list vl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写android-log-h头文件"><a href="#编写android-log-h头文件" class="headerlink" title="编写android_log.h头文件"></a>编写android_log.h头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> use_log_report = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_TAG     <span class="meta-string">"FFmpeg_VideoEditor"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_UNKNOWN        ANDROID_LOG_UNKNOWN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_DEFAULT        ANDROID_LOG_DEFAULT</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_VERBOSE        ANDROID_LOG_VERBOSE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_DEBUG          ANDROID_LOG_DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_INFO           ANDROID_LOG_INFO</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_WARN           ANDROID_LOG_WARN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_ERROR          ANDROID_LOG_ERROR</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_FATAL          ANDROID_LOG_FATAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_SILENT         ANDROID_LOG_SILENT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印可变参数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VLOG(level, TAG, ...)    ((void)__android_log_vprint(level, TAG, __VA_ARGS__))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VLOGV(...)  VLOG(FF_LOG_VERBOSE,   FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VLOGD(...)  VLOG(FF_LOG_DEBUG,     FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VLOGI(...)  VLOG(FF_LOG_INFO,      FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VLOGW(...)  VLOG(FF_LOG_WARN,      FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VLOGE(...)  VLOG(FF_LOG_ERROR,     FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALOG(level, TAG, ...)    ((void)__android_log_print(level, TAG, __VA_ARGS__))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALOGV(...)  ALOG(FF_LOG_VERBOSE,   FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALOGD(...)  ALOG(FF_LOG_DEBUG,     FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALOGI(...)  ALOG(FF_LOG_INFO,      FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALOGW(...)  ALOG(FF_LOG_WARN,      FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALOGE(...)  ALOG(FF_LOG_ERROR,     FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(format, ...)  __android_log_print(ANDROID_LOG_ERROR, FF_LOG_TAG, format, ##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(format, ...)  __android_log_print(ANDROID_LOG_INFO,  FF_LOG_TAG, format, ##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原样输出FFmpeg日志</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ffp_log_callback_brief</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">int</span> level, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list vl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ffplv = FF_LOG_VERBOSE;</span><br><span class="line">    <span class="keyword">if</span> (level &lt;= AV_LOG_ERROR)</span><br><span class="line">        ffplv = FF_LOG_ERROR;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (level &lt;= AV_LOG_WARNING)</span><br><span class="line">        ffplv = FF_LOG_WARN;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (level &lt;= AV_LOG_INFO)</span><br><span class="line">        ffplv = FF_LOG_INFO;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (level &lt;= AV_LOG_VERBOSE)</span><br><span class="line">        ffplv = FF_LOG_VERBOSE;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ffplv = FF_LOG_DEBUG;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (level &lt;= AV_LOG_INFO)</span><br><span class="line">        VLOG(ffplv, FF_LOG_TAG, fmt, vl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对FFmpeg日志进行格式化</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ffp_log_callback_report</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">int</span> level, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list vl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ffplv = FF_LOG_VERBOSE;</span><br><span class="line">    <span class="keyword">if</span> (level &lt;= AV_LOG_ERROR)</span><br><span class="line">        ffplv = FF_LOG_ERROR;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (level &lt;= AV_LOG_WARNING)</span><br><span class="line">        ffplv = FF_LOG_WARN;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (level &lt;= AV_LOG_INFO)</span><br><span class="line">        ffplv = FF_LOG_INFO;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (level &lt;= AV_LOG_VERBOSE)</span><br><span class="line">        ffplv = FF_LOG_VERBOSE;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ffplv = FF_LOG_DEBUG;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    va_list vl2;</span><br><span class="line">    <span class="keyword">char</span> line[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> print_prefix = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    va_copy(vl2, vl);</span><br><span class="line">    <span class="comment">// av_log_default_callback(ptr, level, fmt, vl);</span></span><br><span class="line">    av_log_format_line(ptr, level, fmt, vl2, line, <span class="keyword">sizeof</span>(line), &amp;print_prefix);</span><br><span class="line">    va_end(vl2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    ALOG(ffplv, FF_LOG_TAG, <span class="string">"%s"</span>, line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在实践中发现输出的日志都一样，只是<code>ffp_log_callback_report</code>函数可以在输出的日志添加额外信息，如ALOG(ffplv, FF_LOG_TAG, “额外信息：%s”, line);</p>
<h3 id="在ffmpeg-c的main方法中注册"><a href="#在ffmpeg-c的main方法中注册" class="headerlink" title="在ffmpeg.c的main方法中注册"></a>在ffmpeg.c的main方法中注册</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"android_log.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 省略其他代码...</span></span><br><span class="line">    <span class="keyword">if</span>(use_log_report)</span><br><span class="line">    &#123;</span><br><span class="line">    	av_log_set_callback(ffp_log_callback_report);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    	av_log_set_callback(ffp_log_callback_brief);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p><img src="/2018/11/02/android-ffmpeg-logcat/ffmpeg_log.png" alt="ffmpeg_log"></p>
<p><img src="/2018/11/02/android-ffmpeg-logcat/ffmpeg_log2.png" alt="ffmpeg_log2"></p>
<p>通过日志，我们可以看到FFmpeg的版本信息，还有配置信息。</p>
<p>在<code>configuration</code>日志行中可以看到我在编译时的配置项，当我们在拿到一个别人编译好的库，如果我们不知道他的编译脚本，通过这日志信息也可以知道。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/matrix_laboratory/article/details/57080891" target="_blank" rel="noopener">FFmpeg日志输出到adb logcat</a></li>
<li><a href="https://blog.csdn.net/u012027644/article/details/56666608" target="_blank" rel="noopener">Android ffmpeg调试信息打印在logcat里</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> FFmpeg </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Android项目中调用FFmpeg命令]]></title>
      <url>https://xch168.github.io/2018/10/26/android-invoke-ffmpeg-cmd/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>FFmpeg，命令行非常强大。在PC机上，调用一行FFmpeg命令，就可以对视频文件进行剪切、合并、转码等功能。本文将介绍如何在Android中调用FFmpeg命令行。</p>
</blockquote>
<a id="more"></a>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><blockquote>
<p>前面已经有两篇文章介绍FFmpeg的编译：</p>
<ol>
<li><a href="https://xch168.github.io/2018/07/22/android-ndk-ffmpeg-compile/">Android NDK交叉编译FFmpeg</a></li>
<li><a href="https://xch168.github.io/2018/08/04/android-ndk-compile-ffmpeg-to-a-so/">将FFmpeg编译成一个libffmpeg.so库</a></li>
</ol>
</blockquote>
<h3 id="创建ffmpeg-cmd模块"><a href="#创建ffmpeg-cmd模块" class="headerlink" title="创建ffmpeg-cmd模块"></a>创建ffmpeg-cmd模块</h3><h4 id="Step1：目录结构"><a href="#Step1：目录结构" class="headerlink" title="Step1：目录结构"></a>Step1：目录结构</h4><p><img src="/2018/10/26/android-invoke-ffmpeg-cmd/ffmpeg-cmd-dir.png" alt="ffmpeg-cmd-dir"></p>
<h4 id="Step2：导入libffmpeg-so库"><a href="#Step2：导入libffmpeg-so库" class="headerlink" title="Step2：导入libffmpeg.so库"></a>Step2：导入libffmpeg.so库</h4><p><img src="/2018/10/26/android-invoke-ffmpeg-cmd/libffmpeg.so.png" alt="libffmpeg.so"></p>
<p>在<code>ffmpeg-cmd</code>模块的<code>build.gradle</code>中添加配置：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略其他配置...</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        <span class="comment">// 省略其他配置...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 配置cmake构建参数</span></span><br><span class="line">        externalNativeBuild &#123;</span><br><span class="line">            cmake &#123;</span><br><span class="line">                cppFlags <span class="string">""</span></span><br><span class="line">                abiFilters <span class="string">'armeabi-v7a'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置cmake构建脚本的路径</span></span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">            path <span class="string">"CMakeLists.txt"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义jniLib的目录到libs</span></span><br><span class="line">    sourceSets.main &#123;</span><br><span class="line">        jniLibs.srcDirs = [<span class="string">'libs'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Step3：导入FFmpeg的相关头文件"><a href="#Step3：导入FFmpeg的相关头文件" class="headerlink" title="Step3：导入FFmpeg的相关头文件"></a>Step3：导入FFmpeg的相关头文件</h4><p><img src="/2018/10/26/android-invoke-ffmpeg-cmd/header.png" alt="header"></p>
<h4 id="Step4-导入FFmpeg的相关源码文件"><a href="#Step4-导入FFmpeg的相关源码文件" class="headerlink" title="Step4: 导入FFmpeg的相关源码文件"></a>Step4: 导入FFmpeg的相关源码文件</h4><blockquote>
<p>在源码目录的<code>fftools</code>文件夹内</p>
</blockquote>
<p><img src="/2018/10/26/android-invoke-ffmpeg-cmd/ffmpeg-source.png" alt="ffmpeg-source"></p>
<h4 id="Step5-编写CMakeLists-txt文件"><a href="#Step5-编写CMakeLists-txt文件" class="headerlink" title="Step5:  编写CMakeLists.txt文件"></a>Step5:  编写CMakeLists.txt文件</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">"$&#123;CMAKE_CXX_FLAGS&#125; -std=gnu++11"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加头文件路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">        ./src/main/cpp</span><br><span class="line">        ./src/main/cpp/ffmpeg</span><br><span class="line">        ./src/main/cpp/<span class="keyword">include</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义源码所在目录</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(./src/main/cpp SRC)</span><br><span class="line"><span class="keyword">aux_source_directory</span>(./src/main/cpp/ffmpeg SRC_FFMPEG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 SRC_FFMPEG 添加到 SRC 中</span></span><br><span class="line">list(APPEND SRC <span class="variable">$&#123;SRC_FFMPEG&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置ffmpeg库所在路径的目录</span></span><br><span class="line"><span class="keyword">set</span>(distribution_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译一个ffmpeg-cmd库</span></span><br><span class="line"><span class="keyword">add_library</span>(  ffmpeg-cmd   <span class="comment"># 库名称</span></span><br><span class="line">        SHARED             <span class="comment"># 库类型</span></span><br><span class="line">        <span class="variable">$&#123;SRC&#125;</span>)            <span class="comment"># 编译进库的源码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加libffmpeg.so库</span></span><br><span class="line"><span class="keyword">add_library</span>( ffmpeg</span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="comment"># 指定libffmpeg.so库的位置</span></span><br><span class="line"><span class="keyword">set_target_properties</span>( ffmpeg</span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libffmpeg.so )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找日志库</span></span><br><span class="line"><span class="keyword">find_library</span>(</span><br><span class="line">        log-lib</span><br><span class="line">        log )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其他库链接到目标库ffmpeg-cmd</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>( ffmpeg-cmd</span><br><span class="line">        ffmpeg</span><br><span class="line">        -landroid     <span class="comment"># native_window</span></span><br><span class="line">        -ljnigraphics <span class="comment"># bitmap</span></span><br><span class="line">        -lOpenSLES    <span class="comment"># openSLES</span></span><br><span class="line">        <span class="variable">$&#123;log-lib&#125;</span> )</span><br></pre></td></tr></table></figure>
<h3 id="修改FFmpeg源码"><a href="#修改FFmpeg源码" class="headerlink" title="修改FFmpeg源码"></a>修改FFmpeg源码</h3><ul>
<li><p>ffmpeg.c</p>
<p>修改main方法：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改前</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 修改后</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ffmpeg_exec</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br></pre></td></tr></table></figure>
<p>在<code>ffmpeg_cleanup</code>函数执行结束前重新初始化：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ffmpeg_cleanup</span><span class="params">(<span class="keyword">int</span> ret)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 省略其他代码...</span></span><br><span class="line">    </span><br><span class="line">    nb_filtergraphs = <span class="number">0</span>;</span><br><span class="line">    nb_output_files = <span class="number">0</span>;</span><br><span class="line">    nb_output_streams = <span class="number">0</span>;</span><br><span class="line">    nb_input_files = <span class="number">0</span>;</span><br><span class="line">    nb_input_streams = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>print_report</code>函数中添加代码实现FFmpeg命令执行进度的回调：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_report</span><span class="params">(<span class="keyword">int</span> is_last_report, <span class="keyword">int64_t</span> timer_start, <span class="keyword">int64_t</span> cur_time)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略其他代码...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义已处理的时长</span></span><br><span class="line">    <span class="keyword">float</span> mss;</span><br><span class="line">    </span><br><span class="line">    secs = FFABS(pts) / AV_TIME_BASE;</span><br><span class="line">    us = FFABS(pts) % AV_TIME_BASE;</span><br><span class="line">    <span class="comment">// 获取已处理的时长</span></span><br><span class="line">    mss = secs + ((<span class="keyword">float</span>) us / AV_TIME_BASE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用ffmpeg_progress将进度传到Java层，代码后面定义</span></span><br><span class="line">    ffmpeg_progress(mss);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略其他代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ffmpeg.h</p>
<p>添加<code>ffmpeg_exec</code>方法的声明：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ffmpeg_exec</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>cmdutils.c</p>
<p>修改<code>exit_program</code>函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit_program</span><span class="params">(<span class="keyword">int</span> ret)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (program_exit)</span><br><span class="line">        program_exit(ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 退出线程(该函数后面定义)</span></span><br><span class="line">    ffmpeg_thread_exit(ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删掉下面这行代码，不然执行结束，应用会crash</span></span><br><span class="line">    <span class="comment">//exit(ret);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="编写JNI调用FFmpeg命令"><a href="#编写JNI调用FFmpeg命令" class="headerlink" title="编写JNI调用FFmpeg命令"></a>编写JNI调用FFmpeg命令</h3><p><strong>Note</strong>：这部分代码来自开源库 <a href="https://xch168.github.io/2018/08/04/android-ndk-compile-ffmpeg-to-a-so/">EpMedia</a></p>
<h4 id="C代码："><a href="#C代码：" class="headerlink" title="C代码："></a>C代码：</h4><p>ffmpeg_cmd.h</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_FFmpeg_Cmd</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_FFmpeg_Cmd</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_github_xch168_ffmpeg_1cmd_FFmpegCmd_exec</span><span class="params">(JNIEnv *, jclass, jint, jobjectArray)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_github_xch168_ffmpeg_1cmd_FFmpegCmd_exit</span><span class="params">(JNIEnv *, jclass)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ffmpeg_progress</span><span class="params">(<span class="keyword">float</span> progress)</span></span>;</span><br></pre></td></tr></table></figure>
<p>ffmpeg_cmd.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ffmpeg_cmd.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ffmpeg_thread.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"android_log.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmdutils.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> JavaVM *jvm = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//java虚拟机</span></span><br><span class="line"><span class="keyword">static</span> jclass m_clazz = <span class="literal">NULL</span>;<span class="comment">//当前类(面向java)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回调执行Java方法</span></span><br><span class="line"><span class="comment"> * 参看 Jni反射+Java反射</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callJavaMethod</span><span class="params">(JNIEnv *env, jclass clazz,<span class="keyword">int</span> ret)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"---------------clazz isNULL---------------"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取方法ID (I)V指的是方法签名 通过javap -s -public FFmpegCmd 命令生成</span></span><br><span class="line">    jmethodID methodID = (*env)-&gt;GetStaticMethodID(env, clazz, <span class="string">"onExecuted"</span>, <span class="string">"(I)V"</span>);</span><br><span class="line">    <span class="keyword">if</span> (methodID == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"---------------methodID isNULL---------------"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用该java方法</span></span><br><span class="line">    (*env)-&gt;CallStaticVoidMethod(env, clazz, methodID,ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callJavaMethodProgress</span><span class="params">(JNIEnv *env, jclass clazz,<span class="keyword">float</span> ret)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"---------------clazz isNULL---------------"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取方法ID (I)V指的是方法签名 通过javap -s -public FFmpegCmd 命令生成</span></span><br><span class="line">    jmethodID methodID = (*env)-&gt;GetStaticMethodID(env, clazz, <span class="string">"onProgress"</span>, <span class="string">"(F)V"</span>);</span><br><span class="line">    <span class="keyword">if</span> (methodID == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"---------------methodID isNULL---------------"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用该java方法</span></span><br><span class="line">    (*env)-&gt;CallStaticVoidMethod(env, clazz, methodID,ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * c语言-线程回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ffmpeg_callback</span><span class="params">(<span class="keyword">int</span> ret)</span> </span>&#123;</span><br><span class="line">    JNIEnv *env;</span><br><span class="line">    <span class="comment">//附加到当前线程从JVM中取出JNIEnv, C/C++从子线程中直接回到Java里的方法时  必须经过这个步骤</span></span><br><span class="line">    (*jvm)-&gt;AttachCurrentThread(jvm, (<span class="keyword">void</span> **) &amp;env, <span class="literal">NULL</span>);</span><br><span class="line">    callJavaMethod(env, m_clazz,ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//完毕-脱离当前线程</span></span><br><span class="line">    (*jvm)-&gt;DetachCurrentThread(jvm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ffmpeg_progress</span><span class="params">(<span class="keyword">float</span> progress)</span> </span>&#123;</span><br><span class="line">    JNIEnv *env;</span><br><span class="line">    (*jvm)-&gt;AttachCurrentThread(jvm, (<span class="keyword">void</span> **) &amp;env, <span class="literal">NULL</span>);</span><br><span class="line">    callJavaMethodProgress(env, m_clazz,progress);</span><br><span class="line">    (*jvm)-&gt;DetachCurrentThread(jvm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_github_xch168_ffmpeg_1cmd_FFmpegCmd_exec(JNIEnv *env, jclass clazz, jint cmdnum, jobjectArray cmdline) &#123;</span><br><span class="line">    (*env)-&gt;GetJavaVM(env, &amp;jvm);</span><br><span class="line">    m_clazz = (*env)-&gt;NewGlobalRef(env, clazz);</span><br><span class="line">    <span class="comment">//---------------------------------C语言 反射Java 相关----------------------------------------</span></span><br><span class="line">    <span class="comment">//---------------------------------java 数组转C语言数组----------------------------------------</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//满足NDK所需的C99标准</span></span><br><span class="line">    <span class="keyword">char</span> **argv = <span class="literal">NULL</span>;<span class="comment">//命令集 二维指针</span></span><br><span class="line">    jstring *strr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cmdline != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        argv = (<span class="keyword">char</span> **) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span> *) * cmdnum);</span><br><span class="line">        strr = (jstring *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(jstring) * cmdnum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cmdnum; ++i) &#123;<span class="comment">//转换</span></span><br><span class="line">            strr[i] = (jstring)(*env)-&gt;GetObjectArrayElement(env, cmdline, i);</span><br><span class="line">            argv[i] = (<span class="keyword">char</span> *) (*env)-&gt;GetStringUTFChars(env, strr[i], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//---------------------------------java 数组转C语言数组----------------------------------------</span></span><br><span class="line">    <span class="comment">//---------------------------------执行FFmpeg命令相关----------------------------------------</span></span><br><span class="line">    <span class="comment">//新建线程 执行ffmpeg 命令</span></span><br><span class="line">    ffmpeg_thread_run_cmd(cmdnum, argv);</span><br><span class="line">    <span class="comment">//注册ffmpeg命令执行完毕时的回调</span></span><br><span class="line">    ffmpeg_thread_callback(ffmpeg_callback);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(strr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_github_xch168_ffmpeg_1cmd_FFmpegCmd_exit(JNIEnv *env, jclass type) &#123;</span><br><span class="line">    (*env)-&gt;GetJavaVM(env, &amp;jvm);</span><br><span class="line">    m_clazz = (*env)-&gt;NewGlobalRef(env, type);</span><br><span class="line">    ffmpeg_thread_cancel();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ffmpeg_thread.h</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavcodec/avcodec.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavformat/avformat.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libswscale/swscale.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ffmpeg.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ffmpeg_thread_run_cmd</span><span class="params">(<span class="keyword">int</span> cmdnum,<span class="keyword">char</span> **argv)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ffmpeg_thread_exit</span><span class="params">(<span class="keyword">int</span> ret)</span></span>;</span><br><span class="line"></span><br><span class="line">void ffmpeg_thread_callback(void (*cb)(int ret));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ffmpeg_thread_cancel</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>ffmpeg_thread.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavcodec/avcodec.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ffmpeg_thread.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"android_log.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_t</span> ntid;</span><br><span class="line"><span class="keyword">char</span> **argvs = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;   <span class="comment">//执行</span></span><br><span class="line">    <span class="keyword">int</span> result = ffmpeg_exec(num, argvs);</span><br><span class="line">    ffmpeg_thread_exit(result);</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">void</span> *)<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新建子线程执行ffmpeg命令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ffmpeg_thread_run_cmd</span><span class="params">(<span class="keyword">int</span> cmdnum,<span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    num=cmdnum;</span><br><span class="line">    argvs=argv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> temp =pthread_create(&amp;ntid,<span class="literal">NULL</span>,thread,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(temp!=<span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"can't create thread: %s "</span>,strerror(temp));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LOGI(<span class="string">"create thread succes: %s "</span>,strerror(temp));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*ffmpeg_callback)</span><span class="params">(<span class="keyword">int</span> ret)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册线程回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">void ffmpeg_thread_callback(void (*cb)(int ret)) &#123;</span><br><span class="line">    ffmpeg_callback = cb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 退出线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ffmpeg_thread_exit</span><span class="params">(<span class="keyword">int</span> ret)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ffmpeg_callback) &#123;</span><br><span class="line">        ffmpeg_callback(ret);</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_exit(<span class="string">"ffmpeg_thread_exit"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ffmpeg_thread_cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ret=<span class="literal">NULL</span>;</span><br><span class="line">    pthread_join(ntid, &amp;ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a>Java代码：</h4><p>FFmpegCmd.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FFmpegCmd</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"ffmpeg-cmd"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OnCmdExecListener sOnCmdExecListener;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> sDuration;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> argc, String[] argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(String[] cmds, <span class="keyword">long</span> duration, OnCmdExecListener listener)</span> </span>&#123;</span><br><span class="line">        sOnCmdExecListener = listener;</span><br><span class="line">        sDuration = duration;</span><br><span class="line"></span><br><span class="line">        exec(cmds.length, cmds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FFmpeg执行结束回调，由C代码中调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onExecuted</span><span class="params">(<span class="keyword">int</span> ret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sOnCmdExecListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">                sOnCmdExecListener.onProgress(sDuration);</span><br><span class="line">                sOnCmdExecListener.onSuccess();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sOnCmdExecListener.onFailure();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FFmpeg执行进度回调，由C代码调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">float</span> progress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sOnCmdExecListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sDuration != <span class="number">0</span>) &#123;</span><br><span class="line">                sOnCmdExecListener.onProgress(progress / (sDuration / <span class="number">1000</span>) * <span class="number">0.95f</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnCmdExecListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">float</span> progress)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FFmpegUtil.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装FFmpeg命令的调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FFmpegUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"FFmpegUtil"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execCmd</span><span class="params">(CmdList cmd, <span class="keyword">long</span> duration, <span class="keyword">final</span> OnVideoProcessListener listener)</span> </span>&#123;</span><br><span class="line">        String[] cmds = cmd.toArray(<span class="keyword">new</span> String[cmd.size()]);</span><br><span class="line">        Log.i(TAG, <span class="string">"cmd:"</span> + cmd);</span><br><span class="line">        listener.onProcessStart();</span><br><span class="line">        FFmpegCmd.exec(cmds, duration, <span class="keyword">new</span> FFmpegCmd.OnCmdExecListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                listener.onProcessSuccess();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                listener.onProcessFailure();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">float</span> progress)</span> </span>&#123;</span><br><span class="line">                listener.onProcessProgress(progress);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CmdList.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmdList</span> <span class="keyword">extends</span> <span class="title">ArrayList</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CmdList <span class="title">append</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.add(s);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CmdList <span class="title">append</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.add(i + <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CmdList <span class="title">append</span><span class="params">(<span class="keyword">float</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.add(f + <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CmdList <span class="title">append</span><span class="params">(StringBuilder sb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.add(sb.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CmdList <span class="title">append</span><span class="params">(String[] ss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String s:ss) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!s.replace(<span class="string">" "</span>,<span class="string">""</span>).equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (String s : <span class="keyword">this</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">" "</span>).append(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="调用FFmpeg命令"><a href="#调用FFmpeg命令" class="headerlink" title="调用FFmpeg命令"></a>调用FFmpeg命令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line"><span class="comment">// 构建一条视频裁剪命令</span></span><br><span class="line">CmdList cmd = <span class="keyword">new</span> CmdList();</span><br><span class="line">cmd.append(<span class="string">"ffmpeg"</span>);</span><br><span class="line">cmd.append(<span class="string">"-y"</span>);</span><br><span class="line">cmd.append(<span class="string">"-ss"</span>).append(startTime/ <span class="number">1000</span>).append(<span class="string">"-t"</span>).append(duration / <span class="number">1000</span>).append(<span class="string">"-accurate_seek"</span>);</span><br><span class="line">cmd.append(<span class="string">"-i"</span>).append(srcFile);</span><br><span class="line">cmd.append(<span class="string">"-codec"</span>).append(<span class="string">"copy"</span>).append(destFile);</span><br><span class="line"></span><br><span class="line">FFmpegUtil.execCmd(cmd, duration, <span class="keyword">new</span> OnVideoProcessListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProcessStart</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProcessProgress</span><span class="params">(<span class="keyword">float</span> progress)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProcessSuccess</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProcessFailure</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>源码地址：<a href="https://github.com/xch168/VideoEditor" target="_blank" rel="noopener">https://github.com/xch168/VideoEditor</a></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://www.jianshu.com/p/3479bba0cf28" target="_blank" rel="noopener"> 将FFmpeg移植到Android平台</a></li>
<li><a href="https://github.com/yangjie10930/EpMedia" target="_blank" rel="noopener">EpMedia</a></li>
<li><a href="https://github.com/xufuji456/FFmpegAndroid" target="_blank" rel="noopener">FFmpegAndroid</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> FFmpeg </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高效地加载Bitmap]]></title>
      <url>https://xch168.github.io/2018/10/13/Efficient-loading-bitmap/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>现在的图片是动辄几M到几十M，而系统分配给应用的内存有限，如果直接将原图载入内存，这会导致Bitmap加载的时候很容易出现内存溢出（OOM）。</p>
<p>Bitmap高效加载的策略：根据图片展示控件的尺寸，将图片以一定的采样率进行缩放后再加载。这样就能降低内存占用，从而在一定程度上避免OOM，并提高Bitmap加载时的性能。</p>
</blockquote>
<a id="more"></a>
<h3 id="Bitmap的加载方式"><a href="#Bitmap的加载方式" class="headerlink" title="Bitmap的加载方式"></a>Bitmap的加载方式</h3><blockquote>
<p><code>BitmapFactory</code>提供了四类方法来加载Bitmap：</p>
<p>decodeFile：从文件加载Bitmap</p>
<p>decodeResource：从资源中加载Bitmap</p>
<p>decodeStream：从输入流中加载Bitmap</p>
<p>decodeByteArray：从字节数组中加载Bitmap</p>
<p>这四类方法都分别有一个带<code>BitmapFactory.Options</code>参数的重载方法，通过对这个参数的配置从而达到高效加载Bitmap。</p>
</blockquote>
<h3 id="BitmapFactory-Options的属性"><a href="#BitmapFactory-Options的属性" class="headerlink" title="BitmapFactory.Options的属性"></a>BitmapFactory.Options的属性</h3><h4 id="inSampleSize"><a href="#inSampleSize" class="headerlink" title="inSampleSize"></a>inSampleSize</h4><blockquote>
<p><code>inSampleSize</code>：即采样率，通过对其设置，实现图片的宽和高缩放。</p>
<p>当inSampleSize=1：采样后的图片大小为图片的原始大小。</p>
<p>当inSameleSize&lt;1：按=1计算</p>
<p>当inSampleSize&gt;1：采样后的图片将会缩小，缩放比例为1 / (inSampleSize的2次方)。</p>
<p><strong>inSampleSize取值</strong>：inSampleSize的取值应该总是2的指数，如1，2，4，8等，如果传入的inSampleSize的值不为2的指数，那么系统会向下取整并选择一个最接近2的指数来代替。比如3，系统会选择2来代替。</p>
</blockquote>
<p>示例：</p>
<p>一张2048x1536像素的图片，采用ARGB_8888进行存储，那么内存大小2048 x 1536 x 4 = 12M，如果inSampleSize = 4，那么采样后的图片内存大小：512 x 384 x 4 = 0.75M</p>
<h4 id="inJustDecodeBounds"><a href="#inJustDecodeBounds" class="headerlink" title="inJustDecodeBounds"></a>inJustDecodeBounds</h4><blockquote>
<p>在计算图片缩放比的时候，我们需要先获取到图片的原始宽高，通过设置<code>inJustDecodeBounds=true</code>，就可以在不将图片加载进内存的情况下，解析出图片的宽高信息。计算出缩放比后，再设置<code>inJustDecodeBounds=false</code>，根据缩放比加载缩放后的图片。</p>
</blockquote>
<h3 id="高效加载Bitmap流程"><a href="#高效加载Bitmap流程" class="headerlink" title="高效加载Bitmap流程"></a>高效加载Bitmap流程</h3><blockquote>
<ol>
<li>将BitmapFactory.Options的<code>inJustDecodeBounds</code>参数设为<code>true</code>并加载图片。</li>
<li>从BitmapFactory.Options中取出图片的原始宽高信息，它们对应<code>outWidth</code>和<code>outHeight</code>参数。</li>
<li>根据采样率的规则并结合目标View的所需大小计算出采样率<code>inSampleSize</code>。</li>
<li>将BitmapFactory.Options的<code>inJustDecodeBounds</code>参数设为<code>false</code>，然后重新加载图片。</li>
</ol>
</blockquote>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeSampledBitmapFromResource</span><span class="params">(Resources res, <span class="keyword">int</span> resId, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首次加载获取图片的原始宽高</span></span><br><span class="line">    <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">    options.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">    BitmapFactory.decodeResource(res, resId, options);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算缩放比</span></span><br><span class="line">    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新加载图片</span></span><br><span class="line">    options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> BitmapFactory.decodeResource(res, resId, options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateInSampleSize</span> <span class="params">(BitmapFactory.Options options, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 图片的原始宽高</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> height = options.outHeight;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> width = options.outWidth;</span><br><span class="line">    <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfHeight = height / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfWidth = width / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算缩放比，是2的指数，</span></span><br><span class="line">        <span class="comment">// 取宽高的最小缩放比，如宽的缩放比为2，高的缩放比为4，那么取2作为整体的缩放比</span></span><br><span class="line">        <span class="keyword">while</span> ((halfHeight / inSampleSize) &gt;= reqHeight</span><br><span class="line">                &amp;&amp; (halfWidth / inSampleSize) &gt;= reqWidth) &#123;</span><br><span class="line">            inSampleSize *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inSampleSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mImageView.setImageBitmap(decodeSampledBitmapFromResource(getResources(), R.id.myimage, <span class="number">100</span>, <span class="number">100</span>));</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://www.jianshu.com/p/5f02db4a225d" target="_blank" rel="noopener">彻底理解Bitmap的高效加载策略</a></li>
<li><a href="https://developer.android.google.cn/topic/performance/graphics/load-bitmap" target="_blank" rel="noopener">Loading Large Bitmaps Efficiently</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android APK脱壳--腾讯乐固、360加固一键脱壳]]></title>
      <url>https://xch168.github.io/2018/09/27/android-apk-shelling/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>现在使用Proguard进行混淆的代码，也很容易被破解，所以就出现了加固工具，让反编译的难度更大。但是有了加固技术，就会有反加固技术，正所谓道高一尺魔高一丈。</p>
</blockquote>
<a id="more"></a>
<p>经过加固后的apk，通过<code>dex2jar</code>反编译：</p>
<p>腾讯乐固：</p>
<p><img src="/2018/09/27/android-apk-shelling/legu.png" alt="legu"></p>
<p>360加固：</p>
<p><img src="/2018/09/27/android-apk-shelling/360jiagu.png" alt="360jiagu"></p>
<p>从上面可以看出，经过加固后的apk，通过常规方法反编译无法获取到源码。</p>
<h3 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h3><h4 id="脱壳工具FDex2"><a href="#脱壳工具FDex2" class="headerlink" title="脱壳工具FDex2"></a>脱壳工具FDex2</h4><blockquote>
<p>通过Hook ClassLoader的loadClass方法，反射调用getDex方法取得Dex(com.android.dex.Dex类对象)，在将里面的dex写出。</p>
</blockquote>
<p>下载地址：</p>
<blockquote>
<p>链接:<a href="https://pan.baidu.com/s/1smxtinr" target="_blank" rel="noopener">https://pan.baidu.com/s/1smxtinr</a> 密码:dk4v</p>
</blockquote>
<h4 id="VirtualXposed"><a href="#VirtualXposed" class="headerlink" title="VirtualXposed"></a>VirtualXposed</h4><blockquote>
<p>VirtualXposed：无需root手机即可使用xp框架。</p>
</blockquote>
<p>下载地址：</p>
<blockquote>
<p><a href="https://vxposed.com/" target="_blank" rel="noopener">https://vxposed.com/</a></p>
</blockquote>
<h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h3><p>Step1:</p>
<p>将<code>VirtualXposed</code>、<code>FDex2</code>和<strong>需要脱壳的应用</strong>都安装到手机上。</p>
<p>Step2:</p>
<p>启动<code>VirtualXposed</code>，并在<code>VirtualXposed</code>中安装<code>FDex2</code>:</p>
<p><img src="/2018/09/27/android-apk-shelling/vp-install-fdex2.gif" alt="vp-install-fdex2"></p>
<p>Step3:</p>
<p>在<code>VirtualXposed</code>中激活<code>FDex2</code>:</p>
<p><img src="/2018/09/27/android-apk-shelling/active-fdex2.gif" alt="active-fdex2"></p>
<p>Step4:</p>
<p>在<code>VirtualXposed</code>中安装要脱壳的应用，方法和Step2一样。</p>
<p>Step5:</p>
<p>启动<code>VirtualXposed</code>中的<code>FDex2</code>，并配置要脱壳的应用。</p>
<p><img src="/2018/09/27/android-apk-shelling/fdex2-config.png" alt="fdex2-config"></p>
<p>Step6:</p>
<p>在<code>VirtualXposed</code>中运行要脱壳的应用。</p>
<p>Step7:</p>
<p>脱壳后的dex文件：</p>
<p><img src="/2018/09/27/android-apk-shelling/shelling-dex.png" alt="shelling-dex"></p>
<p>导出脱壳的dex文件：</p>
<p>root设备：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb pull /data/user/0/iv.va.exposed/virtual/data/user/0/&#123;packageName&#125;   &#123;电脑上的目录&#125;</span><br></pre></td></tr></table></figure>
<p>未root设备：</p>
<p>在<code>VirtualXposed</code>中，设置–&gt;高级设置–&gt;文件管理，安装文件管理器，然后通过文件管理器进入到指定的目录，通过<code>分享</code>功能发到电脑上。</p>
<p>Step8：</p>
<p>通过<code>dex2jar</code>对 脱壳的dex进行反编译：</p>
<p><img src="/2018/09/27/android-apk-shelling/shelling-dex2jar.png" alt="shelling-dex2jar"></p>
<p>从上图就可以看到脱壳后的dex文件被成功的反编译。</p>
<h3 id="FDex2核心代码MainHook"><a href="#FDex2核心代码MainHook" class="headerlink" title="FDex2核心代码MainHook"></a>FDex2核心代码MainHook</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ppma.xposed;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XSharedPreferences;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainHook</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    XSharedPreferences xsp;</span><br><span class="line">    Class Dex;</span><br><span class="line">    Method Dex_getBytes;</span><br><span class="line">    Method getDex;</span><br><span class="line">    String packagename;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        xsp = <span class="keyword">new</span> XSharedPreferences(<span class="string">"com.ppma.appinfo"</span>, <span class="string">"User"</span>);</span><br><span class="line">        xsp.makeWorldReadable();</span><br><span class="line">        xsp.reload();</span><br><span class="line">        initRefect();</span><br><span class="line">        packagename = xsp.getString(<span class="string">"packagename"</span>, <span class="keyword">null</span>);</span><br><span class="line">        XposedBridge.log(<span class="string">"设定包名："</span>+packagename);</span><br><span class="line">        <span class="keyword">if</span> ((!lpparam.packageName.equals(packagename))||packagename==<span class="keyword">null</span>) &#123;</span><br><span class="line">            XposedBridge.log(<span class="string">"当前程序包名与设定不一致或者包名为空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        XposedBridge.log(<span class="string">"目标包名："</span>+lpparam.packageName);</span><br><span class="line">        String str = <span class="string">"java.lang.ClassLoader"</span>;</span><br><span class="line">        String str2 = <span class="string">"loadClass"</span>;</span><br><span class="line"> </span><br><span class="line">        XposedHelpers.findAndHookMethod(str, lpparam.classLoader, str2, String.class, Boolean.TYPE, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.afterHookedMethod(param);</span><br><span class="line">                Class cls = (Class) param.getResult();</span><br><span class="line">                <span class="keyword">if</span> (cls == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//XposedBridge.log("cls == null");</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String name = cls.getName();</span><br><span class="line">                XposedBridge.log(<span class="string">"当前类名："</span> + name);</span><br><span class="line">                <span class="keyword">byte</span>[] bArr = (<span class="keyword">byte</span>[]) Dex_getBytes.invoke(getDex.invoke(cls, <span class="keyword">new</span> Object[<span class="number">0</span>]), <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">if</span> (bArr == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    XposedBridge.log(<span class="string">"数据为空：返回"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                XposedBridge.log(<span class="string">"开始写数据"</span>);</span><br><span class="line">                String dex_path = <span class="string">"/data/data/"</span> + packagename + <span class="string">"/"</span> + packagename + <span class="string">"_"</span> + bArr.length + <span class="string">".dex"</span>;</span><br><span class="line">                XposedBridge.log(dex_path);</span><br><span class="line">                File file = <span class="keyword">new</span> File(dex_path);</span><br><span class="line">                <span class="keyword">if</span> (file.exists()) <span class="keyword">return</span>;</span><br><span class="line">                writeByte(bArr, file.getAbsolutePath());</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; );</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initRefect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Dex = Class.forName(<span class="string">"com.android.dex.Dex"</span>);</span><br><span class="line">            Dex_getBytes = Dex.getDeclaredMethod(<span class="string">"getBytes"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            getDex = Class.forName(<span class="string">"java.lang.Class"</span>).getDeclaredMethod(<span class="string">"getDex"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">writeByte</span><span class="params">(<span class="keyword">byte</span>[] bArr, String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(str);</span><br><span class="line">            outputStream.write(bArr);</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            XposedBridge.log(<span class="string">"文件写出失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=758726&amp;fromguid=hot" target="_blank" rel="noopener">【手机端】腾讯乐固，360加固一键脱壳</a></li>
<li><a href="https://bbs.pediy.com/thread-224105.htm" target="_blank" rel="noopener">安卓xposed脱壳工具FDex2</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Decompile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DiskLruCache解析]]></title>
      <url>https://xch168.github.io/2018/09/23/DiskLruCache-analyze/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>DiskLruCache，是JakeWharton大神开源的作品，用于磁盘缓存，与LruCache内存缓存相对应，都是使用LRU算法。</p>
</blockquote>
<a id="more"></a>
<h3 id="获取DiskLruCache"><a href="#获取DiskLruCache" class="headerlink" title="获取DiskLruCache"></a>获取DiskLruCache</h3><blockquote>
<p>因为DiskLruCache不是Android官方的，所以在Android SDK中找不到，但是得到官方的推荐。</p>
</blockquote>
<p>获取方式一：</p>
<p><a href="https://github.com/JakeWharton/DiskLruCache" target="_blank" rel="noopener">https://github.com/JakeWharton/DiskLruCache</a></p>
<p>获取方式二：</p>
<p><a href="https://android.googlesource.com/platform/libcore/+/jb-mr2.0.0-release/luni/src/main/java/libcore/io/DiskLruCache.java" target="_blank" rel="noopener">https://android.googlesource.com/platform/libcore/+/jb-mr2.0.0-release/luni/src/main/java/libcore/io/DiskLruCache.java</a></p>
<h3 id="DiskLruCache的使用"><a href="#DiskLruCache的使用" class="headerlink" title="DiskLruCache的使用"></a>DiskLruCache的使用</h3><h4 id="打开缓存"><a href="#打开缓存" class="headerlink" title="打开缓存"></a>打开缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> directory    缓存目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> appVersion   当前应用程序的版本号 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> valueCount   同一个key可以对应多少个缓存文件，基本都是1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maxSize      最多可以缓存多少字节的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException 如果读写缓存失败会抛出IO异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DiskLruCache <span class="title">open</span><span class="params">(File directory, <span class="keyword">int</span> appVersion, <span class="keyword">int</span> valueCount, <span class="keyword">long</span> maxSize)</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>
<h4 id="写入缓存"><a href="#写入缓存" class="headerlink" title="写入缓存"></a>写入缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// key会成为缓存文件的文件名，并且必须要和URL是一一对应的，而URL可能包含特殊字符，不能用作文件名，</span></span><br><span class="line"><span class="comment">// 所以对URL进行MD5编码，编码后的字符串是唯一的，并且只会包含0-F字符，符合文件命名规则</span></span><br><span class="line">String key = generateKey(url);</span><br><span class="line">DiskLruCache.Editor editor = mDiskLruCache.edit(key);</span><br><span class="line"><span class="comment">// 通过Editor获取到os是指向缓存文件的输出流，然后把想存的东西写入</span></span><br><span class="line">OutputStream os = editor.newOutputStream(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// ...流操作</span></span><br><span class="line"><span class="comment">// 写完缓存后，调用commit()，来提交缓存；调用abort()，放弃写入的缓存</span></span><br><span class="line">editor.commit();</span><br><span class="line"><span class="comment">// editor.abort();</span></span><br></pre></td></tr></table></figure>
<h4 id="读取缓存"><a href="#读取缓存" class="headerlink" title="读取缓存"></a>读取缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DiskLruCache.Snapshot snapshot = mDiskLruCache.get(key);</span><br><span class="line"><span class="comment">// 通过snapshot获取到输入流，然后对流进行操作</span></span><br><span class="line">InputStream is = snapshot.getInputStream(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// ...流操作</span></span><br></pre></td></tr></table></figure>
<h3 id="journal文件解读"><a href="#journal文件解读" class="headerlink" title="journal文件解读"></a>journal文件解读</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">libcore.io.DiskLruCache</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">DIRTY <span class="number">335</span>c4c6028171cfddfbaae1a9c313c52</span><br><span class="line">CLEAN <span class="number">335</span>c4c6028171cfddfbaae1a9c313c52 <span class="number">2342</span></span><br><span class="line">REMOVE <span class="number">335</span>c4c6028171cfddfbaae1a9c313c52</span><br><span class="line">DIRTY <span class="number">1</span>ab96a171faeeee38496d8b330771a7a</span><br><span class="line">CLEAN <span class="number">1</span>ab96a171faeeee38496d8b330771a7a <span class="number">1600</span></span><br><span class="line">READ <span class="number">335</span>c4c6028171cfddfbaae1a9c313c52</span><br><span class="line">READ <span class="number">3400330</span>d1dfc7f3f7f4b8d4d803dfcf6</span><br></pre></td></tr></table></figure>
<h4 id="journal文件头"><a href="#journal文件头" class="headerlink" title="journal文件头"></a>journal文件头</h4><ul>
<li>第一行：固定字符串<code>libcore.io.DiskLruCache</code></li>
<li>第二行：DiskLruCache的版本号，这个值恒为1。</li>
<li>第三行：应用程序的版本号。每当版本号改变，缓存路径下存储的所有数据都会被清空，因为DiskLruCache认为应用更新，所有的数据都应重新获取。</li>
<li>第四行：指每个key对应几个文件，一般为1。</li>
<li>第五行：空行</li>
</ul>
<h4 id="journal文件内容"><a href="#journal文件内容" class="headerlink" title="journal文件内容"></a>journal文件内容</h4><ul>
<li><code>DIRTY</code>：第六行以DIRTY前缀开始，后面跟着缓存文件的key，表示一个entry正在被写入。</li>
<li><code>CLEAN</code>：当写入成功，就会写入一条CLEAN记录，后面的数字记录文件的长度，如果一个key可以对应多个文件，那么就会有多个数字</li>
<li><code>REMOVE</code>：表示写入失败，或者调用remove(key)方法的时候都会写入一条REMOVE记录</li>
<li><code>READ</code>：表示一次读取记录</li>
</ul>
<p><strong>NOTE</strong>：当journal文件记录的操作次数达到2000时，就会触发重构journal的事件，来保证journal文件的大小始终在一个合理的范围内。</p>
<h3 id="DiskLruCache源码解析"><a href="#DiskLruCache源码解析" class="headerlink" title="DiskLruCache源码解析"></a>DiskLruCache源码解析</h3><h4 id="DiskLruCache-open"><a href="#DiskLruCache-open" class="headerlink" title="DiskLruCache#open"></a>DiskLruCache#open</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DiskLruCache <span class="title">open</span><span class="params">(File directory, <span class="keyword">int</span> appVersion, <span class="keyword">int</span> valueCount, <span class="keyword">long</span> maxSize)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (maxSize &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"maxSize &lt;= 0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (valueCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"valueCount &lt;= 0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查journal.bkp文件是否存在(journal的备份文件)</span></span><br><span class="line">    File backupFile = <span class="keyword">new</span> File(directory, JOURNAL_FILE_BACKUP);</span><br><span class="line">    <span class="keyword">if</span> (backupFile.exists()) &#123;</span><br><span class="line">        File journalFile = <span class="keyword">new</span> File(directory, JOURNAL_FILE);</span><br><span class="line">        <span class="comment">// 如果journal文件存在，则删除journal.bkp备份文件</span></span><br><span class="line">        <span class="keyword">if</span> (journalFile.exists()) &#123;</span><br><span class="line">            backupFile.delete();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// journal文件不存在，将bkp文件重命名为journal文件</span></span><br><span class="line">            renameTo(backupFile, journalFile, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prefer to pick up where we left off.</span></span><br><span class="line">    DiskLruCache cache = <span class="keyword">new</span> DiskLruCache(directory, appVersion, valueCount, maxSize);</span><br><span class="line">    <span class="comment">// 判断journal文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (cache.journalFile.exists()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取journal文件</span></span><br><span class="line">            cache.readJournal();</span><br><span class="line">            cache.processJournal();</span><br><span class="line">            cache.journalWriter = <span class="keyword">new</span> BufferedWriter(</span><br><span class="line">                    <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(cache.journalFile, <span class="keyword">true</span>), Util.US_ASCII));</span><br><span class="line">            <span class="keyword">return</span> cache;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException journalIsCorrupt) &#123;</span><br><span class="line">            System.out</span><br><span class="line">                    .println(<span class="string">"DiskLruCache "</span></span><br><span class="line">                            + directory</span><br><span class="line">                            + <span class="string">" is corrupt: "</span></span><br><span class="line">                            + journalIsCorrupt.getMessage()</span><br><span class="line">                            + <span class="string">", removing"</span>);</span><br><span class="line">            cache.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// journal文件不存在，则创建缓存目录，重新构造DiskLruCache</span></span><br><span class="line">    directory.mkdirs();</span><br><span class="line">    cache = <span class="keyword">new</span> DiskLruCache(directory, appVersion, valueCount, maxSize);</span><br><span class="line">    <span class="comment">// 重新创建journal文件</span></span><br><span class="line">    cache.rebuildJournal();</span><br><span class="line">    <span class="keyword">return</span> cache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="rebuildJournal-："><a href="#rebuildJournal-：" class="headerlink" title="rebuildJournal()："></a>rebuildJournal()：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重新创建journal文件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">rebuildJournal</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (journalWriter != <span class="keyword">null</span>) &#123;</span><br><span class="line">        journalWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建journal.tmp文件</span></span><br><span class="line">    Writer writer = <span class="keyword">new</span> BufferedWriter(</span><br><span class="line">            <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(journalFileTmp), Util.US_ASCII));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 写入文件头(5行)</span></span><br><span class="line">        writer.write(MAGIC);</span><br><span class="line">        writer.write(<span class="string">"\n"</span>);</span><br><span class="line">        writer.write(VERSION_1);</span><br><span class="line">        writer.write(<span class="string">"\n"</span>);</span><br><span class="line">        writer.write(Integer.toString(appVersion));</span><br><span class="line">        writer.write(<span class="string">"\n"</span>);</span><br><span class="line">        writer.write(Integer.toString(valueCount));</span><br><span class="line">        writer.write(<span class="string">"\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历lruEntries</span></span><br><span class="line">        <span class="keyword">for</span> (DiskLruCache.Entry entry : lruEntries.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.currentEditor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                writer.write(DIRTY + <span class="string">' '</span> + entry.key + <span class="string">'\n'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                writer.write(CLEAN + <span class="string">' '</span> + entry.key + entry.getLengths() + <span class="string">'\n'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (journalFile.exists()) &#123;</span><br><span class="line">        renameTo(journalFile, journalFileBackup, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将journal文件重命名为journal文件</span></span><br><span class="line">    renameTo(journalFileTmp, journalFile, <span class="keyword">false</span>);</span><br><span class="line">    journalFileBackup.delete();</span><br><span class="line"></span><br><span class="line">    journalWriter = <span class="keyword">new</span> BufferedWriter(</span><br><span class="line">            <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(journalFile, <span class="keyword">true</span>), Util.US_ASCII));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="readJournal-："><a href="#readJournal-：" class="headerlink" title="readJournal()："></a>readJournal()：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取journal文件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readJournal</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    StrictLineReader reader = <span class="keyword">new</span> StrictLineReader(<span class="keyword">new</span> FileInputStream(journalFile), Util.US_ASCII);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String magic = reader.readLine();</span><br><span class="line">        String version = reader.readLine();</span><br><span class="line">        String appVersionString = reader.readLine();</span><br><span class="line">        String valueCountString = reader.readLine();</span><br><span class="line">        String blank = reader.readLine();</span><br><span class="line">        <span class="comment">// 校验journal文件头</span></span><br><span class="line">        <span class="keyword">if</span> (!MAGIC.equals(magic)</span><br><span class="line">                || !VERSION_1.equals(version)</span><br><span class="line">                || !Integer.toString(appVersion).equals(appVersionString)</span><br><span class="line">                || !Integer.toString(valueCount).equals(valueCountString)</span><br><span class="line">                || !<span class="string">""</span>.equals(blank)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"unexpected journal header: ["</span> + magic + <span class="string">", "</span> + version + <span class="string">", "</span></span><br><span class="line">                    + valueCountString + <span class="string">", "</span> + blank + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lineCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 读取journal文件内容</span></span><br><span class="line">                readJournalLine(reader.readLine());</span><br><span class="line">                lineCount++;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (EOFException endOfJournal) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        redundantOpCount = lineCount - lruEntries.size();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Util.closeQuietly(reader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="readJournalLine-："><a href="#readJournalLine-：" class="headerlink" title="readJournalLine()："></a>readJournalLine()：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取journal文件内容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readJournalLine</span><span class="params">(String line)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> firstSpace = line.indexOf(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">if</span> (firstSpace == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"unexpected journal line: "</span> + line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> keyBegin = firstSpace + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> secondSpace = line.indexOf(<span class="string">' '</span>, keyBegin);</span><br><span class="line">    <span class="keyword">final</span> String key;</span><br><span class="line">    <span class="keyword">if</span> (secondSpace == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取缓存key</span></span><br><span class="line">        key = line.substring(keyBegin);</span><br><span class="line">        <span class="comment">// 如果是REMOVE记录，则调用lruEntries.remove(key)</span></span><br><span class="line">        <span class="keyword">if</span> (firstSpace == REMOVE.length() &amp;&amp; line.startsWith(REMOVE)) &#123;</span><br><span class="line">            lruEntries.remove(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        key = line.substring(keyBegin, secondSpace);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DiskLruCache.Entry entry = lruEntries.get(key);</span><br><span class="line">    <span class="comment">// 如果该key没有加入到lruEntries，则创建并加入</span></span><br><span class="line">    <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">        entry = <span class="keyword">new</span> DiskLruCache.Entry(key);</span><br><span class="line">        lruEntries.put(key, entry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理CLEAN记录</span></span><br><span class="line">    <span class="keyword">if</span> (secondSpace != -<span class="number">1</span> &amp;&amp; firstSpace == CLEAN.length() &amp;&amp; line.startsWith(CLEAN)) &#123;</span><br><span class="line">        String[] parts = line.substring(secondSpace + <span class="number">1</span>).split(<span class="string">" "</span>);</span><br><span class="line">        entry.readable = <span class="keyword">true</span>;</span><br><span class="line">        entry.currentEditor = <span class="keyword">null</span>;</span><br><span class="line">        entry.setLengths(parts);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (secondSpace == -<span class="number">1</span> &amp;&amp; firstSpace == DIRTY.length() &amp;&amp; line.startsWith(DIRTY)) &#123;</span><br><span class="line">        <span class="comment">// 处理DIRTY记录</span></span><br><span class="line">        entry.currentEditor = <span class="keyword">new</span> DiskLruCache.Editor(entry);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (secondSpace == -<span class="number">1</span> &amp;&amp; firstSpace == READ.length() &amp;&amp; line.startsWith(READ)) &#123;</span><br><span class="line">        <span class="comment">// This work was already done by calling lruEntries.get().</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"unexpected journal line: "</span> + line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="processJournal-："><a href="#processJournal-：" class="headerlink" title="processJournal()："></a>processJournal()：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理journal文件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processJournal</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    deleteIfExists(journalFileTmp);</span><br><span class="line">    <span class="keyword">for</span> (Iterator&lt;DiskLruCache.Entry&gt; i = lruEntries.values().iterator(); i.hasNext(); ) &#123;</span><br><span class="line">        DiskLruCache.Entry entry = i.next();</span><br><span class="line">        <span class="keyword">if</span> (entry.currentEditor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; valueCount; t++) &#123;</span><br><span class="line">                <span class="comment">// 统计所有可用cache占据的容量</span></span><br><span class="line">                size += entry.lengths[t];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 删除非法DIRTY状态的entry,并删除对应的文件</span></span><br><span class="line">            entry.currentEditor = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; valueCount; t++) &#123;</span><br><span class="line">                deleteIfExists(entry.getCleanFile(t));</span><br><span class="line">                deleteIfExists(entry.getDirtyFile(t));</span><br><span class="line">            &#125;</span><br><span class="line">            i.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="DiskLruCache-edit"><a href="#DiskLruCache-edit" class="headerlink" title="DiskLruCache#edit"></a>DiskLruCache#edit</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> DiskLruCache.<span class="function">Editor <span class="title">edit</span><span class="params">(String key, <span class="keyword">long</span> expectedSequenceNumber)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    checkNotClosed();</span><br><span class="line">    <span class="comment">// 验证key，必须是字母、数字、下划线、横线(-)组成，且长度在1-120之间</span></span><br><span class="line">    validateKey(key);</span><br><span class="line">    <span class="comment">// 获取实体</span></span><br><span class="line">    DiskLruCache.Entry entry = lruEntries.get(key);</span><br><span class="line">    <span class="keyword">if</span> (expectedSequenceNumber != ANY_SEQUENCE_NUMBER &amp;&amp; (entry == <span class="keyword">null</span></span><br><span class="line">            || entry.sequenceNumber != expectedSequenceNumber)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// Snapshot is stale.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实体不存在，则创建一个Entry并加入到lruEntries</span></span><br><span class="line">    <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">        entry = <span class="keyword">new</span> DiskLruCache.Entry(key);</span><br><span class="line">        lruEntries.put(key, entry);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (entry.currentEditor != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 该实体正在被编辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Editor并赋值给entry.currentEditor</span></span><br><span class="line">    DiskLruCache.Editor editor = <span class="keyword">new</span> DiskLruCache.Editor(entry);</span><br><span class="line">    entry.currentEditor = editor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Flush the journal before creating files to prevent file leaks.</span></span><br><span class="line">    journalWriter.write(DIRTY + <span class="string">' '</span> + key + <span class="string">'\n'</span>);</span><br><span class="line">    journalWriter.flush();</span><br><span class="line">    <span class="keyword">return</span> editor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Editor-newOutputStream"><a href="#Editor-newOutputStream" class="headerlink" title="Editor#newOutputStream"></a>Editor#newOutputStream</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个文件输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 缓存文件索引，一个key可能对应多个文件，当对应一个文件时，只要传0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OutputStream <span class="title">newOutputStream</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (DiskLruCache.<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.currentEditor != <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!entry.readable) &#123;</span><br><span class="line">            written[index] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取dirty file对象，这是一个中转文件，文件名格式key.index.tmp</span></span><br><span class="line">        File dirtyFile = entry.getDirtyFile(index);</span><br><span class="line">        FileOutputStream outputStream;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            outputStream = <span class="keyword">new</span> FileOutputStream(dirtyFile);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// Attempt to recreate the cache directory.</span></span><br><span class="line">            directory.mkdirs();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream = <span class="keyword">new</span> FileOutputStream(dirtyFile);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e2) &#123;</span><br><span class="line">                <span class="comment">// We are unable to recover. Silently eat the writes.</span></span><br><span class="line">                <span class="keyword">return</span> NULL_OUTPUT_STREAM;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DiskLruCache.Editor.FaultHidingOutputStream(outputStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Editor-commit"><a href="#Editor-commit" class="headerlink" title="Editor#commit"></a>Editor#commit</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否发生错误</span></span><br><span class="line">    <span class="keyword">if</span> (hasErrors) &#123;</span><br><span class="line">        completeEdit(<span class="keyword">this</span>, <span class="keyword">false</span>);</span><br><span class="line">        remove(entry.key); <span class="comment">// The previous entry is stale.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        completeEdit(<span class="keyword">this</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    committed = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Editor-completeEdit"><a href="#Editor-completeEdit" class="headerlink" title="Editor#completeEdit"></a>Editor#completeEdit</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">completeEdit</span><span class="params">(DiskLruCache.Editor editor, <span class="keyword">boolean</span> success)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    DiskLruCache.Entry entry = editor.entry;</span><br><span class="line">    <span class="keyword">if</span> (entry.currentEditor != editor) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否写入成功，且是第一次写入</span></span><br><span class="line">    <span class="keyword">if</span> (success &amp;&amp; !entry.readable) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueCount; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!editor.written[i]) &#123;</span><br><span class="line">                editor.abort();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Newly created entry didn't create value for index "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!entry.getDirtyFile(i).exists()) &#123;</span><br><span class="line">                editor.abort();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueCount; i++) &#123;</span><br><span class="line">        File dirty = entry.getDirtyFile(i);</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dirty.exists()) &#123;</span><br><span class="line">                File clean = entry.getCleanFile(i);</span><br><span class="line">                <span class="comment">// 将dirtyFile重命名为cleanFile，更新size的大小</span></span><br><span class="line">                dirty.renameTo(clean);</span><br><span class="line">                <span class="keyword">long</span> oldLength = entry.lengths[i];</span><br><span class="line">                <span class="keyword">long</span> newLength = clean.length();</span><br><span class="line">                entry.lengths[i] = newLength;</span><br><span class="line">                size = size - oldLength + newLength;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            deleteIfExists(dirty);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    redundantOpCount++;</span><br><span class="line">    entry.currentEditor = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 如果成功，写入一条CLEAN记录</span></span><br><span class="line">    <span class="keyword">if</span> (entry.readable | success) &#123;</span><br><span class="line">        entry.readable = <span class="keyword">true</span>;</span><br><span class="line">        journalWriter.write(CLEAN + <span class="string">' '</span> + entry.key + entry.getLengths() + <span class="string">'\n'</span>);</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            entry.sequenceNumber = nextSequenceNumber++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则，写入一条REMOVE记录</span></span><br><span class="line">        lruEntries.remove(entry.key);</span><br><span class="line">        journalWriter.write(REMOVE + <span class="string">' '</span> + entry.key + <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    journalWriter.flush();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &gt; maxSize || journalRebuildRequired()) &#123;</span><br><span class="line">        executorService.submit(cleanupCallable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="DiskLruCache-get"><a href="#DiskLruCache-get" class="headerlink" title="DiskLruCache#get"></a>DiskLruCache#get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> DiskLruCache.<span class="function">Snapshot <span class="title">get</span><span class="params">(String key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    checkNotClosed();</span><br><span class="line">    validateKey(key);</span><br><span class="line">    DiskLruCache.Entry entry = lruEntries.get(key);</span><br><span class="line">    <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!entry.readable) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open all streams eagerly to guarantee that we see a single published</span></span><br><span class="line">    <span class="comment">// snapshot. If we opened streams lazily then the streams could come</span></span><br><span class="line">    <span class="comment">// from different edits.</span></span><br><span class="line">    InputStream[] ins = <span class="keyword">new</span> InputStream[valueCount];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueCount; i++) &#123;</span><br><span class="line">            ins[i] = <span class="keyword">new</span> FileInputStream(entry.getCleanFile(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        <span class="comment">// A file must have been deleted manually!</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueCount; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ins[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Util.closeQuietly(ins[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    redundantOpCount++;</span><br><span class="line">    <span class="comment">// 往journal文件写入一条READ记录</span></span><br><span class="line">    journalWriter.append(READ + <span class="string">' '</span> + key + <span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">if</span> (journalRebuildRequired()) &#123;</span><br><span class="line">        executorService.submit(cleanupCallable);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 将cleanFile的FileInputStream封装成Snapshot并返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DiskLruCache.Snapshot(key, entry.sequenceNumber, ins, entry.lengths);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/lmj623565791/article/details/47251585" target="_blank" rel="noopener">Android DiskLruCache 源码解析 硬盘缓存的绝佳方案</a></li>
<li><a href="https://blog.csdn.net/guolin_blog/article/details/28863651" target="_blank" rel="noopener">Android DiskLruCache完全解析，硬盘缓存的最佳方案</a></li>
<li><a href="https://www.jianshu.com/p/ed5668590900" target="_blank" rel="noopener">优雅的构建 Android 项目之磁盘缓存</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LruCache解析]]></title>
      <url>https://xch168.github.io/2018/09/23/LruCache-analyze/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p><code>LRU</code>(Least Recently Used)，即最近最少使用算法，它的核心思想是当缓存满时，会优先淘汰那些近期最少使用的缓存对象。</p>
<p>该算法被应用在<code>LruCache</code>和<code>DiskLruCache</code>，分别用于实现内存缓存和磁盘缓存。</p>
</blockquote>
<a id="more"></a>
<h3 id="LruCache的介绍"><a href="#LruCache的介绍" class="headerlink" title="LruCache的介绍"></a>LruCache的介绍</h3><blockquote>
<p>LruCache是个泛型类，主要算法原理是把最近使用的对象用强引用存储在<code>LinkedHashMap</code>中，当缓存满时，把最近最少使用的对象从内存中移除，并提供了get和put方法来完成缓存的获取和添加操作。</p>
</blockquote>
<h3 id="LruCache的使用"><a href="#LruCache的使用" class="headerlink" title="LruCache的使用"></a>LruCache的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置LruCache缓存的大小，一般为当前进程可用容量的1/8</span></span><br><span class="line"><span class="keyword">int</span> cacheSize = (<span class="keyword">int</span>) (Runtime.getRuntime().totalMemory() / <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">LruCache&lt;String, Bitmap&gt; mMemoryCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写sizeOf方法，计算出要缓存的每张图片的大小</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value.getByteCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>NOTE</strong>：缓存的总容量和每个缓存对象的大小所用的单位要一致。</p>
<h3 id="LruCache的实现原理"><a href="#LruCache的实现原理" class="headerlink" title="LruCache的实现原理"></a>LruCache的实现原理</h3><blockquote>
<p>LruCache的核心思想：维护一个缓存对象列表，其中对象列表的排列方式是按照访问顺序实现的，即一直没有访问的对象，将放在队头，最早被淘汰，而最近访问的对象将放在队尾，最晚被淘汰。</p>
</blockquote>
<p><img src="/2018/09/23/LruCache-analyze/LRU.png" alt="LRU"></p>
<blockquote>
<p>LruCache的实现是使用LinkedHashMap来维护这个对象队列的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  initialCapacity 初始化大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  loadFactor      加载因子，用于当容量不足，自动扩大</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  accessOrder     true访问顺序，false为插入顺序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> accessOrder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(initialCapacity, loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.accessOrder = accessOrder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LinkedHashMap使用示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(<span class="number">0</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">        map.put(<span class="string">"A"</span>, <span class="string">"A"</span>);</span><br><span class="line">        map.put(<span class="string">"B"</span>, <span class="string">"B"</span>);</span><br><span class="line">        map.put(<span class="string">"C"</span>, <span class="string">"C"</span>);</span><br><span class="line">        map.put(<span class="string">"D"</span>, <span class="string">"D"</span>);</span><br><span class="line">        map.put(<span class="string">"E"</span>, <span class="string">"E"</span>);</span><br><span class="line">        map.put(<span class="string">"F"</span>, <span class="string">"F"</span>);</span><br><span class="line"></span><br><span class="line">        map.get(<span class="string">"A"</span>);</span><br><span class="line">        map.get(<span class="string">"B"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            Log.i(<span class="string">"TAG"</span>, <span class="string">"key:"</span> + entry.getKey() + <span class="string">" value:"</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I/TAG: key:C value:C</span><br><span class="line">I/TAG: key:D value:D</span><br><span class="line">I/TAG: key:E value:E</span><br><span class="line">I/TAG: key:F value:F</span><br><span class="line">I/TAG: key:A value:A</span><br><span class="line">I/TAG: key:B value:B</span><br></pre></td></tr></table></figure>
<h3 id="LruCache的源码解析"><a href="#LruCache的源码解析" class="headerlink" title="LruCache的源码解析"></a>LruCache的源码解析</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LruCache</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (maxSize &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"maxSize &lt;= 0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">    <span class="keyword">this</span>.map = <span class="keyword">new</span> LinkedHashMap&lt;K, V&gt;(<span class="number">0</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从构造方法可以看出，使用的是LinkedHashMap的访问顺序。</p>
<h4 id="put-方法"><a href="#put-方法" class="headerlink" title="put()方法"></a>put()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null || value == null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    V previous;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// 插入的缓存对象数加1</span></span><br><span class="line">        putCount++;</span><br><span class="line">        <span class="comment">// 增加缓存对象的大小</span></span><br><span class="line">        size += safeSizeOf(key, value);</span><br><span class="line">        <span class="comment">// 向map中加入缓存对象</span></span><br><span class="line">        previous = map.put(key, value);</span><br><span class="line">        <span class="comment">// 如果有缓存对象，则缓存大小恢复到插入前</span></span><br><span class="line">        <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">            size -= safeSizeOf(key, previous);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// entryRemoved是空方法，可以自行实现</span></span><br><span class="line">    <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// false表示调用的put()或remove</span></span><br><span class="line">        <span class="comment">// true表示因为内存不足，为了腾出空间</span></span><br><span class="line">        entryRemoved(<span class="keyword">false</span>, key, previous, value);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 调整缓存大小</span></span><br><span class="line">    trimToSize(maxSize);</span><br><span class="line">    <span class="keyword">return</span> previous;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="trimToSize-方法"><a href="#trimToSize-方法" class="headerlink" title="trimToSize()方法"></a>trimToSize()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (size &lt; <span class="number">0</span> || (map.isEmpty() &amp;&amp; size != <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(getClass().getName() + <span class="string">".sizeOf() is reporting inconsistent results!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果缓存大小size小于配置的最大缓存，则跳出循环</span></span><br><span class="line">            <span class="keyword">if</span> (size &lt;= maxSize) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">// 获取最老的对象，即队头元素，近期最少访问的元素</span></span><br><span class="line">            Map.Entry&lt;K, V&gt; toEvict = map.eldest();</span><br><span class="line">            <span class="keyword">if</span> (toEvict == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            key = toEvict.getKey();</span><br><span class="line">            value = toEvict.getValue();</span><br><span class="line">            <span class="comment">// 删除最近最少使用的对象，并更新缓存的大小</span></span><br><span class="line">            map.remove(key);</span><br><span class="line">            size -= safeSizeOf(key, value);</span><br><span class="line">            evictionCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        entryRemoved(<span class="keyword">true</span>, key, value, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a>get()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    V mapValue;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取对应的缓存对象</span></span><br><span class="line">        <span class="comment">// get()方法会将访问的元素更新到队列的尾部</span></span><br><span class="line">        mapValue = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            hitCount++;</span><br><span class="line">            <span class="keyword">return</span> mapValue;</span><br><span class="line">        &#125;</span><br><span class="line">        missCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不存在缓存对象，则创建，create方法是空方法，可以自行实现</span></span><br><span class="line">    V createdValue = create(key);</span><br><span class="line">    <span class="keyword">if</span> (createdValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        createCount++;</span><br><span class="line">        <span class="comment">// 将创建的对象放到缓存里</span></span><br><span class="line">        mapValue = map.put(key, createdValue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果缓存中存在该对象，则恢复缓存中的对象</span></span><br><span class="line">        <span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.put(key, mapValue);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            size += safeSizeOf(key, createdValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        entryRemoved(<span class="keyword">false</span>, key, createdValue, mapValue);</span><br><span class="line">        <span class="keyword">return</span> mapValue;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        trimToSize(maxSize);</span><br><span class="line">        <span class="keyword">return</span> createdValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LinkedHashMap的get()方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">if</span> ((e = getNode(hash(key), key)) == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (accessOrder)</span><br><span class="line">        <span class="comment">// 重新排序该对象，将该对象放到队列尾部</span></span><br><span class="line">        afterNodeAccess(e);</span><br><span class="line">    <span class="keyword">return</span> e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>afterNodeAccess()方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">    LinkedHashMapEntry&lt;K,V&gt; last;</span><br><span class="line">    <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">        LinkedHashMapEntry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMapEntry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.after = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">            head = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = a;</span><br><span class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>)</span><br><span class="line">            a.before = b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            last = b;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">            head = p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://www.jianshu.com/p/b49a111147ee" target="_blank" rel="noopener">彻底解析Android缓存机制——LruCache</a></li>
<li><a href="https://github.com/LittleFriendsGroup/AndroidSdkSourceAnalysis/blob/master/article/LruCache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.md" target="_blank" rel="noopener">LruCache 源码解析</a></li>
<li><a href="https://blog.csdn.net/maosidiaoxian/article/details/51393753" target="_blank" rel="noopener">Android源码解析——LruCache</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android全局异常处理]]></title>
      <url>https://xch168.github.io/2018/09/09/android-crash-handler/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>当Android应用程序出现未捕获的异常，都会弹出一个强制退出的弹框，在这种情况下，用户体验非常差。且发布到线上后，开发没法定位Bug的位置，这就需要一个能全局捕获异常，并且将这个异常log上传到服务器的功能。</p>
</blockquote>
<a id="more"></a>
<h3 id="CrashHandler"><a href="#CrashHandler" class="headerlink" title="CrashHandler"></a>CrashHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的异常处理类，实现UncaughtExceptionHandler接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrashHandler</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CrashHandler INSTANCE = <span class="keyword">new</span> CrashHandler();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CrashHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CrashHandler <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当有未捕获异常发生，就会调用该函数，</span></span><br><span class="line"><span class="comment">     * 可以在该函数中对异常信息捕获并上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 发生异常的线程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理异常,可以自定义弹框，可以上传异常信息</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 干掉当前的程序   </span></span><br><span class="line">        android.os.Process.killProcess(android.os.Process.myPid());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="在Application中注册CrashHandler"><a href="#在Application中注册CrashHandler" class="headerlink" title="在Application中注册CrashHandler"></a>在Application中注册CrashHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        </span><br><span class="line">        CrashHandler handler = CrashHandler.getInstance();</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://lrh1993.gitbooks.io/android_interview_guide/content/android/advance/exception.html" target="_blank" rel="noopener">Android全局异常处理</a></li>
<li><a href="https://blog.csdn.net/XiNanHeiShao/article/details/73302724" target="_blank" rel="noopener">Android全局异常捕获机制</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android中的单位(dp、sp、dpi)]]></title>
      <url>https://xch168.github.io/2018/09/09/android-size-unit/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>因为不同的屏幕具有不同的像素密度，因此同样数量的像素在不同设备上可能对应于不同的物理尺寸。因此要使用<code>dp</code>和<code>sp</code>单位。</p>
<p><code>dp</code>：是一种密度无关像素，对应于160dpi下像素的物理尺寸。</p>
<p><code>sp</code>：是相同的基本单位，但它会按用户首选的文本尺寸进行缩放（属于缩放无关像素），因此在定义文本尺寸时应使用此计量单位(但切勿为布局尺寸使用此单位)。</p>
</blockquote>
<a id="more"></a>
<h3 id="px"><a href="#px" class="headerlink" title="px"></a>px</h3><blockquote>
<p>像素，屏幕上显示数据的最基本的点。</p>
</blockquote>
<h3 id="dpi"><a href="#dpi" class="headerlink" title="dpi"></a>dpi</h3><blockquote>
<p><code>dpi</code>(Dots Per Inch)：每英寸的点数，也称像素密度，即屏幕对角线像素值÷英寸值。</p>
</blockquote>
<p><img src="/2018/09/09/android-size-unit/dpi.png" alt="dpi"></p>
<p>例：720x1280分辨率5.7英寸的手机:</p>
<p><img src="/2018/09/09/android-size-unit/dpi-calc.png" alt="dpi-calc"></p>
<h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h3><blockquote>
<p><code>dp</code>：在每英寸160点的显示屏上，1dp = 1px，即<strong>px = dp(dpi / 160)</strong></p>
</blockquote>
<h3 id="sp"><a href="#sp" class="headerlink" title="sp"></a>sp</h3><blockquote>
<p><code>sp</code>(Scaled Pixels)：通常用于指定字体的大小，当用户修改手机显示的字体时，字体大小会随之改变。</p>
</blockquote>
<h3 id="单位转换"><a href="#单位转换" class="headerlink" title="单位转换"></a>单位转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SizeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dp2px</span><span class="params">(Context context, <span class="keyword">float</span> dpValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> density = context.getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (dpValue * density + <span class="number">0.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sp2px</span><span class="params">(Context context, <span class="keyword">float</span> spValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (spValue * fontScale + <span class="number">0.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">px2dp</span><span class="params">(Context context, <span class="keyword">float</span> pxValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> density = context.getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (pxValue / density + <span class="number">0.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">px2sp</span><span class="params">(Context context, <span class="keyword">float</span> pxValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (pxValue / fontScale + <span class="number">0.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用TypedValue进行单位转换"><a href="#使用TypedValue进行单位转换" class="headerlink" title="使用TypedValue进行单位转换"></a>使用TypedValue进行单位转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dp2px</span><span class="params">(Context context, <span class="keyword">float</span> dpValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dpValue, context.getResources().getDisplayMetrics());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sp2px</span><span class="params">(Context context, <span class="keyword">float</span> spValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, spValue, context.getResources().getDisplayMetrics());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>TypedValue.applyDimension</code>源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypedValue</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">applyDimension</span><span class="params">(<span class="keyword">int</span> unit, <span class="keyword">float</span> value, DisplayMetrics metrics)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (unit) &#123;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_PX:</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_DIP:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.density;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_SP:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.scaledDensity;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_PT:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.xdpi * (<span class="number">1.0f</span>/<span class="number">72</span>);</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_IN:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.xdpi;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_MM:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.xdpi * (<span class="number">1.0f</span>/<span class="number">25.4f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/training/multiscreen/screendensities" target="_blank" rel="noopener">支持不同密度</a></li>
<li><a href="https://blog.csdn.net/jiangwei0910410003/article/details/40509571" target="_blank" rel="noopener">Android中dp,px,sp概念梳理以及如何做到屏幕适配</a></li>
<li><a href="https://www.jianshu.com/p/384cde7e4f16" target="_blank" rel="noopener">Android中px, dp, sp单位转换</a></li>
<li><a href="http://www.cnblogs.com/tinyphp/p/3782097.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/tinyphp/p/3782097.html" target="_blank" rel="noopener">Android：布局单位换算</a></a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ConstraintLayout(约束布局)的使用]]></title>
      <url>https://xch168.github.io/2018/09/09/ConstraintLayout-usage/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>ConstraintLayout(约束布局)的出现是为了在Android应用布局中保持扁平的层次结构，减少布局的嵌套，为应用创建响应快速而灵敏的界面。ConstraintLayout可以替代其他布局。</p>
</blockquote>
<a id="more"></a>
<h3 id="导库"><a href="#导库" class="headerlink" title="导库"></a>导库</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'com.android.support.constraint:constraint-layout:1.1.2'</span></span><br></pre></td></tr></table></figure>
<h3 id="ConstraintLayout的用法"><a href="#ConstraintLayout的用法" class="headerlink" title="ConstraintLayout的用法"></a>ConstraintLayout的用法</h3><h4 id="Relative-position"><a href="#Relative-position" class="headerlink" title="Relative position"></a>Relative position</h4><blockquote>
<p>ConstraintLayout具有RelativeLayout的能力，可以将一个控件置于相对于另一个控件的位置。</p>
</blockquote>
<p><strong>示例</strong>：将B按钮放在A按钮的右边</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/relative-positioning.png" alt=""></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/buttonA"</span> <span class="attr">...</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/buttonB"</span> <span class="attr">...</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toRightOf</span>=<span class="string">"@+id/buttonA"</span> /&gt;</span> <span class="comment">&lt;!--B控件的左边与A控件右边对齐--&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>控件的边界名</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/relative-positioning-constraints.png" alt="relative-positioning-constraints"></p>
<p><strong>其他相关属性</strong></p>
<ul>
<li>layout_constraintLeft_toLeftOf</li>
<li>layout_constraintLeft_toRightOf</li>
<li>layout_constraintRight_toLeftOf</li>
<li>layout_constraintRight_toRightOf</li>
<li>layout_constraintTop_toTopOf</li>
<li>layout_constraintTop_toBottomOf</li>
<li>layout_constraintBottom_toTopOf</li>
<li>layout_constraintBottom_toBottomOf</li>
<li>layout_constraintBaseline_toBaselineOf</li>
<li>layout_constraintStart_toEndOf</li>
<li>layout_constraintStart_toStartOf</li>
<li>layout_constraintEnd_toStartOf</li>
<li>layout_constraintEnd_toEndOf</li>
</ul>
<p><strong>这些属性会引用另一个控件的<code>id</code>或者<code>parent</code>(这会引用父容器，即ConstraintLayout)</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/buttonB"</span> <span class="attr">...</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Margins"><a href="#Margins" class="headerlink" title="Margins"></a>Margins</h4><blockquote>
<p>在ConstraintLayout中，layout_margin及其子属性的作用都被复写，margin属性只对其相约束的View起作用。</p>
</blockquote>
<p><img src="/2018/09/09/ConstraintLayout-usage/relative-positioning-margin.png" alt="relative-positioning-margin"></p>
<p><strong>示例</strong>1：有约束属性</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/margin-sample1.png" alt="margin-sample1"></p>
<p><strong>示例</strong>2：没有约束属性，margin就会失效</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/margin-sample2.png" alt="margin-sample2"></p>
<h4 id="GONE-Margins"><a href="#GONE-Margins" class="headerlink" title="GONE Margins"></a>GONE Margins</h4><blockquote>
<p>当被约束的目标对象的可见性为<code>View.GONE</code>，可以使用<code>gone margin</code>来设置，它只会在目标Target为<code>GONE</code>的时候生效。</p>
</blockquote>
<p><strong>相关属性</strong>：</p>
<ul>
<li>layout_goneMarginStart</li>
<li>layout_goneMarginEnd</li>
<li>layout_goneMarginLeft</li>
<li>layout_goneMarginTop</li>
<li>layout_goneMarginRight</li>
<li>layout_goneMarginBottom</li>
</ul>
<p><strong>示例1</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/gone-margin-1.png" alt="gone-margin-1"></p>
<p><strong>示例2</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/gone-margin-2.png" alt="gone-margin-2"></p>
<h4 id="Bias"><a href="#Bias" class="headerlink" title="Bias"></a>Bias</h4><p>在ConstraintLayout中没有直接的属性让一个控件水平居中，或者竖直居中，可以使用如下方式：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/bias-center.png" alt="bias-center"></p>
<p>如果想要将控件在水平方向偏向左、或者在竖直方向偏向一个方向，就可以配合使用<code>bias</code>属性：</p>
<ul>
<li>layout_constraintHorizontal_bias</li>
<li>layout_constraintVertical_bias</li>
</ul>
<blockquote>
<p>居中情况下，bias的默认值为0.5，取值范围是<code>0~1</code>，是以left或top为始起边界。</p>
</blockquote>
<p><strong>示例</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/bias.png" alt="bias"></p>
<h4 id="Circular-positioning-圆形定位"><a href="#Circular-positioning-圆形定位" class="headerlink" title="Circular positioning(圆形定位)"></a>Circular positioning(圆形定位)</h4><blockquote>
<p>可以使用角度和距离来约束一个控件相对于另一个控件的位置。</p>
</blockquote>
<p><img src="/2018/09/09/ConstraintLayout-usage/circle.png" alt="circle"></p>
<p><strong>相关属性</strong>：</p>
<ul>
<li>layout_constraintCircle：参照控件的id</li>
<li>layout_constraintCircleRadius：两个控件中心连线的距离</li>
<li>layout_constraintCircleAngle：当前View的中心与目标View的中心的连线与Y轴方向的夹角（取值：0~360）</li>
</ul>
<p><strong>示例</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/circle-sample.png" alt="circle-sample"></p>
<h4 id="Dimensions-constraints"><a href="#Dimensions-constraints" class="headerlink" title="Dimensions constraints"></a>Dimensions constraints</h4><blockquote>
<p>ConstraintLayout中有3中方式来设置子View的宽高尺寸：</p>
<ul>
<li><strong>Xdp</strong>，X为具体数值</li>
<li><strong>WARP_CONTENT</strong> </li>
<li><strong>0dp</strong>，0dp代表<code>MATCH_CONSTRAINT</code>，ConstraintLayout不推荐使用<del>MATCH_PARENT</del></li>
</ul>
</blockquote>
<h5 id="MATCH-CONSTRAINT"><a href="#MATCH-CONSTRAINT" class="headerlink" title="MATCH_CONSTRAINT"></a>MATCH_CONSTRAINT</h5><p><strong>示例</strong>1：0dp的使用，可以看到，View的宽度就是父容器的宽度</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/0dp.png" alt="0dp"></p>
<p><strong>示例2</strong>：B按钮被拉伸</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/0dp2.png" alt="0dp2"></p>
<p>当控件的尺寸被设置为<code>MATCH_CONSTRAINT</code>时，默认情况下尺寸会被设置成占用所有可用空间，可用使用下面几个属性进行约束：</p>
<ul>
<li>layout_constraintWidth_min</li>
<li>layout_constraintHeight_min</li>
<li>layout_constraintWidth_max</li>
<li>layout_constraintHeight_max</li>
<li>layout_constraintWidth_percent</li>
<li>layout_constraintHeight_percent</li>
</ul>
<h5 id="WRAP-CONTENT-enforcing-constraints（强制约束）"><a href="#WRAP-CONTENT-enforcing-constraints（强制约束）" class="headerlink" title="WRAP_CONTENT : enforcing constraints（强制约束）"></a>WRAP_CONTENT : enforcing constraints（强制约束）</h5><blockquote>
<p>如果一个View的尺寸被设置为<code>wrap_content</code>，那么当View的内容太多时，可能会超出约束规定的范围，约束布局提供了两个属性来限制View的尺寸:</p>
<ul>
<li>layout_constrainedWidth=”true|false”，默认为false</li>
<li>layout_constrainedHeight=”true|false”，默认为false</li>
</ul>
</blockquote>
<p><strong>示例1</strong>：默认情况下，B控件由于内容较多，高度超出了约束规定的范围。</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/wrap1.png" alt="wrap1"></p>
<p><strong>示例2</strong>：限制高度</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/wrap2.png" alt="wrap2"></p>
<h5 id="Percent-dimension"><a href="#Percent-dimension" class="headerlink" title="Percent dimension"></a>Percent dimension</h5><p>使用百分比步骤</p>
<ul>
<li>需要将宽或高设置为<code>MATCH_CONSTRAINT</code>(0dp)</li>
<li>设置<code>layout_constraintWidth_percent</code>或<code>layout_constraintHeight_percent</code>，值为<code>0~1</code></li>
</ul>
<p><strong>示例</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/percent.png" alt="percent"></p>
<h4 id="Ratio"><a href="#Ratio" class="headerlink" title="Ratio"></a>Ratio</h4><blockquote>
<p>ConstrainLayout提供了<code>ratio</code>属性，用来限制View的宽高比例。</p>
<p>使用<code>Ratio</code>属性，宽高两个尺寸中至少要一个是<code>MATCH_CONSTRAINT</code>(0dp)</p>
<p>默认情况下，1:2，表示宽:高，宽为1，高为2</p>
<p>宽高都为<code>MATCH_CONSTRAINT</code>时，可以在比例前加W或者H：</p>
<p><code>W,1:2</code>：表示宽=2，高=1，即H:W = 1:2</p>
<p><code>H,1:2</code>：表示高=2，宽=1，即W:H = 1:2</p>
</blockquote>
<p><strong>示例1</strong>：2:1</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/ratio1.png" alt="ratio1"></p>
<p><strong>示例2</strong>：H,16:9（宽度占满父控件，约束高度为宽的9/16）</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/ratio2.png" alt="ratio2"></p>
<p><strong>示例2</strong>：W,1:5（高度占满父控件，宽度为高度的1/5）</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/ratio3.png" alt="ratio3"></p>
<p><strong>示例3</strong>：指定宽度为屏幕一半，并保持比例</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/ratio4.png" alt="ratio4"></p>
<h4 id="Chains"><a href="#Chains" class="headerlink" title="Chains"></a>Chains</h4><blockquote>
<p>链使我们能够对一组在水平或竖直方向互相关联的控件的属性进行统一管理。</p>
<p>成为链条的条件：</p>
<p><strong>一组控件它们通过一个双向的约束关系链接起来，并且链的属性由一条链的头结点控制。</strong></p>
</blockquote>
<p><img src="/2018/09/09/ConstraintLayout-usage/chains.png" alt="chains"></p>
<p><strong>示例</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/chains1.png" alt="chains1"></p>
<h5 id="Chain-style"><a href="#Chain-style" class="headerlink" title="Chain style"></a>Chain style</h5><p>设定链条样式的属性：</p>
<ul>
<li>layout_constraintHorizontal_chainStyle：水平链条的样式</li>
<li>layout_constraintVertical_chainStyle：竖直链条的样式</li>
</ul>
<p><strong>链的样式</strong>:</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/chains-styles.png" alt="chains-styles"></p>
<h5 id="Weighted-chains"><a href="#Weighted-chains" class="headerlink" title="Weighted chains"></a>Weighted chains</h5><blockquote>
<p>权重链，宽或高需要设置为<code>MATCH_CONSTRAINT</code>。</p>
<p>使用<code>layout_constraintHorizontal_weight</code>或<code>layout_constraintVertical_weight</code>设置对应的权重</p>
</blockquote>
<p><strong>示例</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/weighted-chains.png" alt="weighted-chains"></p>
<h3 id="constraint其他组件的用法"><a href="#constraint其他组件的用法" class="headerlink" title="constraint其他组件的用法"></a>constraint其他组件的用法</h3><h4 id="Guideline"><a href="#Guideline" class="headerlink" title="Guideline"></a>Guideline</h4><blockquote>
<p>Guideline，是一个辅助控件，可见性为<code>GONE</code>，主要作用是充当一个锚点。</p>
</blockquote>
<p><strong>设置Guidline的方向</strong>：</p>
<ul>
<li>android:orientation=”horizontal”：高度0dp，宽度与父容器等宽</li>
<li>android:orientation=”vertical”：宽度0dp，高度与父容器等高</li>
</ul>
<p><strong>设置Guidline的位置</strong>：</p>
<ul>
<li>layout_constraintGuide_begin：距离父容器左边或者顶部的距离</li>
<li>layout_constraintGuide_end：距离父容器右边或者底部的距离</li>
<li>layout_constraintGuide_percent：距离父容器左边或者顶部的距离占父容器的宽或者高的百分比</li>
</ul>
<p><strong>示例</strong></p>
<p><img src="/2018/09/09/ConstraintLayout-usage/guidline.png" alt="guidline"></p>
<h4 id="Barrier"><a href="#Barrier" class="headerlink" title="Barrier"></a>Barrier</h4><blockquote>
<p>Barrier，译为屏障，是一个虚拟的辅助控件，用来防止它引用的View的位置超过自己。</p>
</blockquote>
<p><strong>相关属性</strong>：</p>
<ul>
<li>barrierDirection=”left | top | right | bottom | start | end”：设置屏障的方向</li>
<li>constraint_referenced_ids=”id1,id2,…,idn”：设置要限制在屏障内的控件</li>
</ul>
<p><strong>示例</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/barrier.png" alt="barrier"></p>
<h4 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h4><blockquote>
<p>Group，用于控制多个控件的可见性。</p>
</blockquote>
<p><img src="/2018/09/09/ConstraintLayout-usage/group.png" alt="group"></p>
<h4 id="Placeholder"><a href="#Placeholder" class="headerlink" title="Placeholder"></a>Placeholder</h4><blockquote>
<p>Placeholder，占位符，可以用来放置其他View，用这个可以写一些布局模板。</p>
</blockquote>
<p><strong>示例</strong>：</p>
<p>模板文件：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/template.png" alt="template"></p>
<blockquote>
<p><strong>tools:parentTag</strong>：设为ConstraintLayout，使得编辑器将当前merge标签当做约束布局来预览。</p>
<p><strong>content</strong>：是要填入这个占位符的View的id。</p>
</blockquote>
<p>引用模板：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/use-template.png" alt="use-template"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/reference/android/support/constraint/ConstraintLayout" target="_blank" rel="noopener">ConstraintLayout</a></li>
<li><a href="https://www.jianshu.com/p/a74557359882" target="_blank" rel="noopener">实战篇ConstraintLayout的崛起之路</a></li>
<li><a href="https://blog.csdn.net/lmj623565791/article/details/78011599" target="_blank" rel="noopener">ConstraintLayout 完全解析 快来优化你的布局吧</a></li>
<li><a href="https://blog.csdn.net/guolin_blog/article/details/53122387" target="_blank" rel="noopener">Android新特性介绍，ConstraintLayout完全解析</a></li>
<li><a href="https://mp.weixin.qq.com/s/gGR2itbY7hh9fo61SxaMQQ" target="_blank" rel="noopener">解析ConstraintLayout的性能优势</a></li>
<li><a href="https://www.jianshu.com/p/4290b86289c8" target="_blank" rel="noopener">ConstraintLayout学习笔记</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java注解处理器]]></title>
      <url>https://xch168.github.io/2018/08/26/java-annotation-processor/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>注解处理器（Annotation Processor），是<code>javac</code>的一个工具，用来在编译时扫描和处理注解。</p>
<p>一个注解处理器以Java代码（或者编译过得字节码）作为输入，生成<code>.java</code>文件作为输出。</p>
</blockquote>
<a id="more"></a>
<p>接下来我们模仿<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">ButterKnife</a> 实现一个<code>@BindView</code>的注解来了解Java注解处理器的使用。</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><img src="/2018/08/26/java-annotation-processor/apt-project.png" alt="apt-project"></p>
<p><strong>模块说明：</strong></p>
<p><code>bindview-annotation</code>：定义注解，<code>@BindView</code>。<br><code>bindview-compiler</code>：定义注解处理器，处理被<code>@BindView</code>标记的代码，并在编译时生成<code>xxxActivity_ViewBinding.java</code><br><code>bindview-api</code>：工具类，调用<code>xxxActivity_ViewBinding.java</code>中的方法，实现<code>View</code>的绑定。</p>
<h3 id="bindview-annotation-自定义注解"><a href="#bindview-annotation-自定义注解" class="headerlink" title="bindview-annotation(自定义注解)"></a>bindview-annotation(自定义注解)</h3><p>创建注解类<code>BindView</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)  <span class="comment">// 表示编译时注解</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)         <span class="comment">// 表示注解范围为类成员</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindView &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;                   <span class="comment">// 用于获取对应View的id</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bindview-compiler-注解处理器"><a href="#bindview-compiler-注解处理器" class="headerlink" title="bindview-compiler(注解处理器)"></a>bindview-compiler(注解处理器)</h3><p>在该module的<code>build.gradle</code>中添加如下代码：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'com.google.auto.service:auto-service:1.0-rc3'</span></span><br><span class="line">    implementation project(<span class="string">':bindview-annotation'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建<code>BindViewProcessor</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该注解用来自动生成META-INF/services/javax.annotation.processing.Processor文件，</span></span><br><span class="line"><span class="comment">// 并在该文件注册BindViewProcessor这个注解处理器</span></span><br><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindViewProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用来在处理注解的过程中打印日志</span></span><br><span class="line">    <span class="keyword">private</span> Messager mMessager;</span><br><span class="line">    <span class="keyword">private</span> Elements mElementUtils;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, ClassCreatorProxy&gt; mProxyMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnvironment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnvironment);</span><br><span class="line"></span><br><span class="line">        mMessager = processingEnvironment.getMessager();</span><br><span class="line">        mElementUtils = processingEnvironment.getElementUtils();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明该注解所处理的注解类型，也可以直接在注解处理器的类声明添加如下注解：</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@SupportedAnnotationTypes</span>(&#123;"com.github.xch168.bindview.annotation.BindView"&#125;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 接受处理的所有注解类型的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singleton(BindView.class.getCanonicalName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定使用的Java版本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SourceVersion.latestSupported();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;</span><br><span class="line">        mMessager.printMessage(Diagnostic.Kind.NOTE, <span class="string">"processing..."</span>);</span><br><span class="line">        mProxyMap.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到所有的注解</span></span><br><span class="line">        Set&lt;? extends Element&gt; elements = roundEnvironment.getElementsAnnotatedWith(BindView.class);</span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            VariableElement variableElement = (VariableElement) element;</span><br><span class="line">            TypeElement classElement = (TypeElement) variableElement.getEnclosingElement();</span><br><span class="line">            String fullClassName = classElement.getQualifiedName().toString();</span><br><span class="line">            ClassCreatorProxy proxy = mProxyMap.get(fullClassName);</span><br><span class="line">            <span class="keyword">if</span> (proxy == <span class="keyword">null</span>) &#123;</span><br><span class="line">                proxy = <span class="keyword">new</span> ClassCreatorProxy(mElementUtils, classElement);</span><br><span class="line">                mProxyMap.put(fullClassName, proxy);</span><br><span class="line">            &#125;</span><br><span class="line">            BindView bindAnnotation = variableElement.getAnnotation(BindView.class);</span><br><span class="line">            <span class="keyword">int</span> id = bindAnnotation.value();</span><br><span class="line">            proxy.putElement(id, variableElement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过遍历mProxy，创建java文件</span></span><br><span class="line">        <span class="keyword">for</span> (String key : mProxyMap.keySet()) &#123;</span><br><span class="line">            ClassCreatorProxy proxyInfo = mProxyMap.get(key);</span><br><span class="line">            mMessager.printMessage(Diagnostic.Kind.NOTE, <span class="string">" --&gt; create "</span> + proxyInfo.getProxyClassFullName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JavaFileObject jfo = processingEnv.getFiler().createSourceFile(proxyInfo.getProxyClassFullName(), proxyInfo.getTypeElement());</span><br><span class="line">                Writer writer = jfo.openWriter();</span><br><span class="line">                writer.write(proxyInfo.generateJavaCode());</span><br><span class="line">                writer.flush();</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                mMessager.printMessage(Diagnostic.Kind.NOTE, <span class="string">" --&gt; create "</span> + proxyInfo.getProxyClassFullName() + <span class="string">" error!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mMessager.printMessage(Diagnostic.Kind.NOTE, <span class="string">"process finish ..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ClassCreatorProxy</code>是创建Java代码的代理类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassCreatorProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mBindingClassName;</span><br><span class="line">    <span class="keyword">private</span> String mPackageName;</span><br><span class="line">    <span class="keyword">private</span> TypeElement mTypeElement;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, VariableElement&gt; mVariableElementMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassCreatorProxy</span><span class="params">(Elements elementUtils, TypeElement classElement)</span> </span>&#123;</span><br><span class="line">        mTypeElement = classElement;</span><br><span class="line">        PackageElement packageElement = elementUtils.getPackageOf(mTypeElement);</span><br><span class="line">        String packageName = packageElement.getQualifiedName().toString();</span><br><span class="line">        String className = mTypeElement.getSimpleName().toString();</span><br><span class="line">        mPackageName = packageName;</span><br><span class="line">        mBindingClassName = className + <span class="string">"_ViewBinding"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putElement</span><span class="params">(<span class="keyword">int</span> id, VariableElement element)</span> </span>&#123;</span><br><span class="line">        mVariableElementMap.put(id, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateJavaCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        builder.append(<span class="string">"package "</span>).append(mPackageName).append(<span class="string">";\n\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"public class "</span>).append(mBindingClassName);</span><br><span class="line">        builder.append(<span class="string">" &#123;\n"</span>);</span><br><span class="line"></span><br><span class="line">        generateMethods(builder);</span><br><span class="line"></span><br><span class="line">        builder.append(<span class="string">"\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"&#125;\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateMethods</span><span class="params">(StringBuilder builder)</span> </span>&#123;</span><br><span class="line">        builder.append(<span class="string">"public void bind("</span> + mTypeElement.getQualifiedName() + <span class="string">" host) &#123;\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> id : mVariableElementMap.keySet()) &#123;</span><br><span class="line">            VariableElement element = mVariableElementMap.get(id);</span><br><span class="line">            String name = element.getSimpleName().toString();</span><br><span class="line">            String type = element.asType().toString();</span><br><span class="line">            builder.append(<span class="string">"host."</span> + name).append(<span class="string">" = "</span>);</span><br><span class="line">            builder.append(<span class="string">"("</span> + type + <span class="string">")(((android.app.Activity)host).findViewById("</span> + id + <span class="string">"));\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        builder.append(<span class="string">" &#125;\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProxyClassFullName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mPackageName + <span class="string">"."</span> + mBindingClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TypeElement <span class="title">getTypeElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTypeElement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bindview-api-注解生成代码的调用工具类"><a href="#bindview-api-注解生成代码的调用工具类" class="headerlink" title="bindview-api(注解生成代码的调用工具类)"></a>bindview-api(注解生成代码的调用工具类)</h3><p>创建注解工具类<code>BindViewTool</code></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindViewTool</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过翻车找到对应的ViewBinding类，然后调用其中的bind方法，完成View的绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> bind(Activity activity) &#123;</span><br><span class="line">        Class clz = activity.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class bindViewClass = Class.forName(clz.getName() + <span class="string">"_ViewBinding"</span>);</span><br><span class="line">            Method method = bindViewClass.getMethod(<span class="string">"bind"</span>, activity.getClass());</span><br><span class="line">            method.invoke(bindViewClass.newInstance(), activity);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><p>在app模块的<code>build.gradle</code>中添加如下代码：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation project(<span class="string">':bindview-annotation'</span>)</span><br><span class="line">    implementation project(<span class="string">':bindview-api'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Gradle 2.2及后面的版本都是用annotationProcessor，早先的版本是用apt，现以废弃，故不再介绍</span></span><br><span class="line">    annotationProcessor project(<span class="string">':bindview-compiler'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在MainActivity中使用注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BindView</span>(R.id.content)</span><br><span class="line">    TextView mContentText;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        BindViewTool.bind(<span class="keyword">this</span>);</span><br><span class="line">        </span><br><span class="line">        mContentText.setText(<span class="string">"From BindView"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行后生成的代码（路径 <code>app/build/generated/source/apt</code>）：</p>
<p><img src="/2018/08/26/java-annotation-processor/apt-generated-code.png" alt="apt-generated-code"></p>
<p><code>MainActivity_ViewBinding</code>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity_ViewBinding</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(com.github.xch168.annotationdemo.MainActivity host)</span> </span>&#123;</span><br><span class="line">	host.mContentText = (android.widget.TextView)(((android.app.Activity)host).findViewById(<span class="number">2131165228</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通过javapoet生成代码"><a href="#通过javapoet生成代码" class="headerlink" title="通过javapoet生成代码"></a>通过javapoet生成代码</h3><p>上面生成代码的部分，是通过字符串拼接，过程非常繁琐。接下来就介绍一种更优雅的方式，使用<code>javapoet</code>。</p>
<p>添加依赖：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'com.squareup:javapoet:1.10.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>ClassCreatorProxy</code>中添加如下代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassCreatorProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TypeSpec <span class="title">generateJavaCodeByJavapoet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TypeSpec bindingClass = TypeSpec.classBuilder(mBindingClassName)</span><br><span class="line">                .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                .addMethod(generateMethodsByJavapoet())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> bindingClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> MethodSpec <span class="title">generateMethodsByJavapoet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassName host = ClassName.bestGuess(mTypeElement.getQualifiedName().toString());</span><br><span class="line">        MethodSpec.Builder methodBuilder = MethodSpec.methodBuilder(<span class="string">"bind"</span>)</span><br><span class="line">                .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                .returns(<span class="keyword">void</span>.class)</span><br><span class="line">                .addParameter(host, <span class="string">"host"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> id : mVariableElementMap.keySet()) &#123;</span><br><span class="line">            VariableElement element = mVariableElementMap.get(id);</span><br><span class="line">            String name = element.getSimpleName().toString();</span><br><span class="line">            String type = element.asType().toString();</span><br><span class="line">            methodBuilder.addCode(<span class="string">"host."</span> + name + <span class="string">" = "</span> + <span class="string">"("</span> + type + <span class="string">")(((android.app.Activity)host).findViewById("</span> + id + <span class="string">"));"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methodBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPackageName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mPackageName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>BindViewProcessor</code>中调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (String key : mProxyMap.keySet()) &#123;</span><br><span class="line">        ClassCreatorProxy proxyInfo = mProxyMap.get(key);</span><br><span class="line">        JavaFile javaFile = JavaFile.builder(proxyInfo.getPackageName(), proxyInfo.generateJavaCodeByJavapoet()).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//　生成文件</span></span><br><span class="line">            javaFile.writeTo(processingEnv.getFiler());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mMessager.printMessage(Diagnostic.Kind.NOTE, <span class="string">"process finish ..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相比用StringBuilder拼Java代码，明显简介很多，且生成的代码是一样的。</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol>
<li><a href="https://www.jianshu.com/p/7af58e8e3e18" target="_blank" rel="noopener">【Android】APT</a></li>
<li><a href="https://www.jianshu.com/p/50d95fbf635c" target="_blank" rel="noopener">自定义Java注解处理器</a></li>
<li><a href="https://blog.csdn.net/u013045971/article/details/53509237" target="_blank" rel="noopener">一小时搞明白注解处理器（Annotation Processor Tool）</a></li>
<li><a href="https://www.jianshu.com/p/94979c056b20" target="_blank" rel="noopener">Android APT及基于APT的简单应用</a></li>
<li><a href="https://blog.csdn.net/wzgiceman/article/details/54580745" target="_blank" rel="noopener">Android 编译时注解-提升-butterknife</a></li>
<li><a href="https://github.com/square/javapoet" target="_blank" rel="noopener">javapoet</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> Annotation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java注解Annotation]]></title>
      <url>https://xch168.github.io/2018/08/25/java-annotation/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>注解（Annotation）：是元数据的一种形式，能够添加到Java源代码，Java中的类、方法、变量、参数、包都可以被注解。注解对他们所注解的代码没有直接的影响。</p>
<p>注解的使用可以简化代码，提高开发效率。</p>
<p>在Android中，用到注解的开源库有：Retrofit、ButterKnife、Dagger。</p>
</blockquote>
<a id="more"></a>
<h3 id="Annotation分类"><a href="#Annotation分类" class="headerlink" title="Annotation分类"></a>Annotation分类</h3><h4 id="标准Annotation"><a href="#标准Annotation" class="headerlink" title="标准Annotation"></a>标准Annotation</h4><p>标准Annotation是指Java自带的几个Annotation：</p>
<p><code>@Override</code>、<code>@Deprecated</code>、<code>@SuppressWarnings</code></p>
<h4 id="元Annotation"><a href="#元Annotation" class="headerlink" title="元Annotation"></a>元Annotation</h4><p>元Annotation是指用来定义Annotation的Annotation：</p>
<p><code>@Documented</code>：保存到Javadoc文档中。</p>
<p><code>@Retention</code>：保留时间，可选值<code>SOURCE</code>(源码)、<code>CLASS</code>(编译时)、<code>RUNTIME</code>(运行时)；默认为<code>CLASS</code>，<code>SOURCE</code>大都为Mark Annotation，这类Annotation大都用来校验，如Override。</p>
<p><code>@Target</code>：表示该注解可以修饰那些程序元素，值为：<code>TYPE</code>、<code>METHOD</code>、<code>CONSTRUCTOR</code>、<code>FIELD</code>、<code>PARAMETER</code>等，未标记则表示可修饰所有。</p>
<p><code>@Inherited</code>：是否可以被继承，默认为false。</p>
<h4 id="自定义Annotation"><a href="#自定义Annotation" class="headerlink" title="自定义Annotation"></a>自定义Annotation</h4><p>根据自己需要进行自定义的Annotation，定义时需要用到上面的元Annotation。</p>
<h3 id="Annotation自定义"><a href="#Annotation自定义" class="headerlink" title="Annotation自定义"></a>Annotation自定义</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Request &#123;</span><br><span class="line"></span><br><span class="line">    String GET = <span class="string">"get"</span>;</span><br><span class="line">    String POST = <span class="string">"post"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">host</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">path</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">version</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>语法说明</strong>：</p>
<ol>
<li><p>通过<code>@interface</code>定义，注解类名即为注解名；</p>
</li>
<li><p>注解配置参数为注解类的方法名：</p>
<p>（1）所有的方法没有方法体，没有参数，没有修饰符，不允许抛出异常；</p>
<p>（2）方法的返回值只能是基本类型、String、Class、enum、Annotation、及他们的一维数组；</p>
<p>（3）若只有一个默认属性，可直接用<code>value()</code>函数；</p>
<p>（4）若一个属性都没有的表示该Annotation为标记注解（Mark Annotation）如@Override；</p>
<p>（5）可以加<code>default</code>表示默认值。</p>
</li>
</ol>
<h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Request</span>(host = <span class="string">"https://api.github.com/"</span>, path = <span class="string">"users"</span>, method = Request.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Request</span>(host = <span class="string">"https://api.github.com/"</span>, path = <span class="string">"users/xch168/repos"</span>, method = Request.POST, version = <span class="number">2</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Annotation解析"><a href="#Annotation解析" class="headerlink" title="Annotation解析"></a>Annotation解析</h3><h4 id="运行时Annotation解析"><a href="#运行时Annotation解析" class="headerlink" title="运行时Annotation解析"></a>运行时Annotation解析</h4><p>（1）运行时Annotation指<code>@Retention</code>为<code>RUNTIME</code>的Annotation。</p>
<p>（2）常用API</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取该Target的某个Annotation的信息</span></span><br><span class="line">method.getAnnotation(AnnotationName.class);</span><br><span class="line"><span class="comment">// 获取该Target的所有Annotation</span></span><br><span class="line">method.getAnnotations();</span><br><span class="line"><span class="comment">// 判断该Target是否被某个Annotation修饰</span></span><br><span class="line">method.isAnnotationPresent(AnnotationName.class);</span><br></pre></td></tr></table></figure>
<p>（3）解析示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class clz = Class.forName(<span class="string">"com.github.xch168.annotationdemo.HttpUtil"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Method method : clz.getMethods()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(Request.class)) &#123;</span><br><span class="line">                Request request = method.getAnnotation(Request.class);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"method name:"</span> + method.getName());</span><br><span class="line">                System.out.println(<span class="string">"request host:"</span> + request.host());</span><br><span class="line">                System.out.println(<span class="string">"request path:"</span> + request.path());</span><br><span class="line">                System.out.println(<span class="string">"request method:"</span> + request.method());</span><br><span class="line">                System.out.println(<span class="string">"request version:"</span> + request.version());</span><br><span class="line">                System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">method name:request1</span><br><span class="line">request host:https:<span class="comment">//api.github.com/</span></span><br><span class="line">request path:users</span><br><span class="line">request method:get</span><br><span class="line">request version:<span class="number">1</span></span><br><span class="line">-----------------</span><br><span class="line">method name:request2</span><br><span class="line">request host:https:<span class="comment">//api.github.com/</span></span><br><span class="line">request path:users/xch168/repos</span><br><span class="line">request method:post</span><br><span class="line">request version:<span class="number">2</span></span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure>
<h4 id="编译时Annotation解析"><a href="#编译时Annotation解析" class="headerlink" title="编译时Annotation解析"></a>编译时Annotation解析</h4><p>（1）编译时Annotation指<code>@Retention</code>为<code>CLASS</code>的Annotation，由编译器自动解析。</p>
<p>（2）自定义类继承自<code>AbstractProcessor</code>，并重写其中的<code>process</code>函数。</p>
<p>  示例代码：将上面的Request的@Retention改为CLASS：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示这个Processor要处理的Annotation</span></span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(&#123;<span class="string">"com.github.xch168.annotationdemo.Request"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> annotations 表示带处理的Annotations</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> env         表示当前或者之前的运行环境</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>            表示这组annotations是否被这个Processor接受，如果接受，后续子Processor不会再对这个annotations进行处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (TypeElement te : annotations) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Element element : env.getElementsAnnotatedWith(te)) &#123;</span><br><span class="line">                Request request = element.getAnnotation(Request.class);</span><br><span class="line">                map.put(element.getEnclosingElement().toString(), request.path());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://a.codekk.com/detail/Android/Trinea/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%20Java%20%E6%B3%A8%E8%A7%A3%20Annotation" target="_blank" rel="noopener">公共技术点之 Java 注解 Annotation</a></li>
<li><a href="https://blog.csdn.net/javazejian/article/details/71860633" target="_blank" rel="noopener">深入理解Java注解类型(@Annotation)</a></li>
<li><a href="https://www.jianshu.com/p/50d95fbf635c" target="_blank" rel="noopener">自定义Java注解处理器</a></li>
<li><a href="https://blog.csdn.net/briblue/article/details/73824058" target="_blank" rel="noopener">秒懂，Java 注解 （Annotation）你可以这样学</a></li>
<li><a href="https://juejin.im/post/59bf5e1c518825397176d126" target="_blank" rel="noopener">Android 中注解的使用</a></li>
<li><a href="https://juejin.im/post/5a1517a6f265da4312808f1b" target="_blank" rel="noopener">Java 基础（十七）注解</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> Annotation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java动态代理]]></title>
      <url>https://xch168.github.io/2018/08/18/java-dynamic-proxy/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>代理模式，是一种常用的设计模式。</p>
<p>在某些情况下，我们不希望或不能直接访问对象A，而是通过访问一个中介对象B，由B去访问A达成目的，这种方式就是代理。</p>
<p>对象A所属的类称为<code>委托类</code>，也被称为<code>被代理类</code>，对象B所属的类称为<code>代理类</code>。</p>
<p>根据程序运行前代理类是否存在，可以将代理分为<code>静态代理</code>和<code>动态代理</code>。</p>
</blockquote>
<a id="more"></a>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><blockquote>
<p>代理类在程序运行前已经存在的代理方式称为静态代理。</p>
<p>由开发人员编写或是编译器生成代理类的方式都属于静态代理。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 委托类/被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ClassA a;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassB</span><span class="params">(ClassA a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a.method1();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a.method2();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不对外提供method3()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面<code>ClassA</code>是委托类，<code>ClassB</code>是代理类，<code>ClassB</code>中的函数直接调用<code>ClassA</code>中相应的函数，并隐藏了<code>ClassA</code>的<code>method3()</code>函数。</p>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><blockquote>
<p>代理类在程序运行前不存在，运行时由程序动态生成的代理方式称为动态代理。</p>
</blockquote>
<blockquote>
<p>动态代理的好处：可以方便对代理类的函数做统一或特殊处理，如记录所有函数的执行时间、所有函数执行前添加验证判断、对某个特殊函数进行特殊操作，而不用像静态代理方式那样需要修改每个函数。</p>
</blockquote>
<blockquote>
<p>实现动态代理的步骤：</p>
<ol>
<li>新建委托类；</li>
<li>实现<code>InvocationHandler</code>接口，这是负责连接代理类和委托类的中间类必须实现的接口；</li>
<li>通过<code>Proxy</code>类创建代理类对象。</li>
</ol>
</blockquote>
<p>接下来我们通过一个实例来演示动态代理的使用。如果要统计某个类所有函数的执行时间，传统的方式是在类的每个函数前打点统计，使用动态代理可以对这一操作进行统一处理。</p>
<p>Step1. 新建委托类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Operate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperateImpl</span> <span class="keyword">implements</span> <span class="title">Operate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"DynamicProxy"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Invoke method1"</span>);</span><br><span class="line">        sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Invoke method2"</span>);</span><br><span class="line">        sleep(<span class="number">87</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Invoke method3"</span>);</span><br><span class="line">        sleep(<span class="number">28</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millSeconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(millSeconds);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step2. 实现InvocationHandler接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimingInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"DynamicProxy"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 委托类对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimingInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy     表示通过Proxy.newProxyInstance()生成的代理类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method    表示代理对象被调用的函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args      表示代理对象被调用的函数的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Object obj = method.invoke(target, objects);</span><br><span class="line">        Log.i(TAG, method.getName() + <span class="string">" cost time is:"</span> + (System.currentTimeMillis() - start));</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>InvocationHandler</code>：是负责连接代理类和委托类的中间类必须实现的接口。调用代理对象的每个函数实际最终都是调用了<code>InvocationHandler</code>的<code>invoke</code>函数。我们就可以在<code>invoke</code>函数中添加开始结束计时，其中还调用了委托类对象<code>target</code>的相应函数，这样便完成了统计执行时间的需求。</p>
<p>Step3. 通过Proxy类静态函数动态生成代理对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">		</span><br><span class="line">        TimingInvocationHandler handler = <span class="keyword">new</span> TimingInvocationHandler(<span class="keyword">new</span> OperateImpl());</span><br><span class="line">        Operate operate = (Operate) Proxy.newProxyInstance(Operate.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;Operate.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        operate.method1();</span><br><span class="line"></span><br><span class="line">        operate.method2();</span><br><span class="line"></span><br><span class="line">        operate.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I/DynamicProxy: Invoke method1</span><br><span class="line">I/DynamicProxy: method1 cost time is:<span class="number">100</span></span><br><span class="line">I/DynamicProxy: Invoke method2</span><br><span class="line">I/DynamicProxy: method2 cost time is:<span class="number">88</span></span><br><span class="line">I/DynamicProxy: Invoke method3</span><br><span class="line">I/DynamicProxy: method3 cost time is:<span class="number">28</span></span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong></p>
<ol>
<li>将委托类<code>new OperateImpl()</code>作为<code>TimingInvocationHandler</code>的构造参数创建<code>handler</code>对象；</li>
<li>通过<code>Proxy.newProxyInstance(...)</code>函数新建一个代理对象，代理类就是在这时候动态生成的；</li>
<li>调用代理对象的函数就会调用到<code>handler</code>的<code>invoke</code>函数，而<code>invoke</code>函数中调用委托类对象相应的函数。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loader       类加载器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> interfaces   委托类的接口，生成代理类时需要实现这些接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> handler      handler是InvocationHandler的实现类对象，负责连接代理类和委托类的中间类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler handler)</span></span></span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://a.codekk.com/detail/Android/Caij/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%20Java%20%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86" target="_blank" rel="noopener">公共技术点之 Java 动态代理</a></li>
<li><a href="https://buwenqi.github.io/2017/11/07/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">Java动态代理解析</a></li>
<li><a href="https://www.jianshu.com/p/cbd58642fc08" target="_blank" rel="noopener">十分钟理解Java之动态代理</a></li>
<li><a href="https://www.jianshu.com/p/e709aff78a53?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">Java动态代理机制详解</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> Design Patterns </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[将FFmpeg编译成一个libffmpeg.so库]]></title>
      <url>https://xch168.github.io/2018/08/04/android-ndk-compile-ffmpeg-to-a-so/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>在上一篇文章 <a href="https://xch168.github.io/2018/07/22/android-ndk-ffmpeg-compile/">Android NDK交叉编译FFmpeg</a> 中，编译出的FFmpeg有好几个库，使用起来比较麻烦，所以这篇文章将要介绍如何将FFmpeg编译成一个单独的libffmpeg.so库。</p>
</blockquote>
<a id="more"></a>
<h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><blockquote>
<ul>
<li>Mac OS X  10.13.6</li>
<li>android-ndk-r17b</li>
<li>FFmpeg 4.0.2</li>
</ul>
</blockquote>
<h3 id="编译脚本"><a href="#编译脚本" class="headerlink" title="编译脚本"></a>编译脚本</h3><p><code>build-android-ffmpeg.sh</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ndk环境    </span></span><br><span class="line"><span class="built_in">export</span> NDK=/Users/xch/debug/ndk/android-ndk-r17b</span><br><span class="line"><span class="built_in">export</span> SYSROOT=<span class="variable">$NDK</span>/platforms/android-21/arch-arm</span><br><span class="line"><span class="built_in">export</span> TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64</span><br><span class="line">CPU=armv7<span class="_">-a</span></span><br><span class="line"></span><br><span class="line">ISYSROOT=<span class="variable">$NDK</span>/sysroot</span><br><span class="line">ASM=<span class="variable">$ISYSROOT</span>/usr/include/arm-linux-androideabi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要保存动态库的目录，这里保存在源码根目录下的android/armv7-a</span></span><br><span class="line"><span class="built_in">export</span> PREFIX=$(<span class="built_in">pwd</span>)/android/<span class="variable">$CPU</span></span><br><span class="line">ADDI_CFLAGS=<span class="string">"-marm"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> build_android</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"开始编译ffmpeg"</span></span><br><span class="line"></span><br><span class="line">    ./configure \</span><br><span class="line">        --target-os=linux \</span><br><span class="line">        --prefix=<span class="variable">$PREFIX</span> \</span><br><span class="line">        --<span class="built_in">enable</span>-cross-compile \</span><br><span class="line">        --<span class="built_in">enable</span>-static \</span><br><span class="line">        --<span class="built_in">disable</span>-shared \</span><br><span class="line">        --<span class="built_in">disable</span>-doc \</span><br><span class="line">        --<span class="built_in">disable</span>-ffmpeg \</span><br><span class="line">        --<span class="built_in">disable</span>-ffplay \</span><br><span class="line">        --<span class="built_in">disable</span>-ffprobe \</span><br><span class="line">        --<span class="built_in">disable</span>-avdevice \</span><br><span class="line">        --<span class="built_in">disable</span>-doc \</span><br><span class="line">        --<span class="built_in">disable</span>-symver \</span><br><span class="line">        --cross-prefix=<span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi- \</span><br><span class="line">        --arch=arm \</span><br><span class="line">        --sysroot=<span class="variable">$SYSROOT</span> \</span><br><span class="line">        --extra-cflags=<span class="string">"-I<span class="variable">$ASM</span> -isysroot <span class="variable">$ISYSROOT</span> -D__ANDROID_API__=21 -U_FILE_OFFSET_BITS -Os -fPIC -DANDROID -Wno-deprecated -mfloat-abi=softfp -marm"</span> \</span><br><span class="line">        --extra-ldflags=<span class="string">"<span class="variable">$ADDI_LDFLAGS</span>"</span> \</span><br><span class="line">        <span class="variable">$ADDITIONAL_CONFIGURE_FLAG</span></span><br><span class="line"></span><br><span class="line">    make clean</span><br><span class="line"></span><br><span class="line">    make -j16</span><br><span class="line">    make install</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打包</span></span><br><span class="line">    <span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi-ld \</span><br><span class="line">        -rpath-link=<span class="variable">$SYSROOT</span>/usr/lib \</span><br><span class="line">        -L<span class="variable">$SYSROOT</span>/usr/lib \</span><br><span class="line">        -L<span class="variable">$PREFIX</span>/lib \</span><br><span class="line">        -soname libffmpeg.so -shared -nostdlib -Bsymbolic --whole-archive --no-undefined -o \</span><br><span class="line">        <span class="variable">$PREFIX</span>/libffmpeg.so \</span><br><span class="line">        libavcodec/libavcodec.a \</span><br><span class="line">        libavfilter/libavfilter.a \</span><br><span class="line">        libavformat/libavformat.a \</span><br><span class="line">        libavutil/libavutil.a \</span><br><span class="line">        libswresample/libswresample.a \</span><br><span class="line">        libswscale/libswscale.a \</span><br><span class="line">        -lc -lm -lz -ldl -llog --dynamic-linker=/system/bin/linker \</span><br><span class="line">        <span class="variable">$TOOLCHAIN</span>/lib/gcc/arm-linux-androideabi/4.9.x/libgcc.a</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># strip 精简文件</span></span><br><span class="line">    <span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi-strip  <span class="variable">$PREFIX</span>/libffmpeg.so</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"编译结束！"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_android</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> 这个脚本不再需要修改<code>Configure</code>的内容（生成的是<em>.a而不是</em>.so，并没有涉及到版本号问题)</p>
<h3 id="编译结果"><a href="#编译结果" class="headerlink" title="编译结果"></a>编译结果</h3><p><img src="/2018/08/04/android-ndk-compile-ffmpeg-to-a-so/libffmpeg.png" alt="libffmpeg"></p>
<h3 id="CMakeLists-txt-文件配置"><a href="#CMakeLists-txt-文件配置" class="headerlink" title="CMakeLists.txt 文件配置"></a>CMakeLists.txt 文件配置</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( FFmpegUtil</span><br><span class="line">        SHARED</span><br><span class="line">        src/main/cpp/native-lib.cpp )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>( log-lib</span><br><span class="line">        log )</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>( android-lib</span><br><span class="line">        android )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置ffmpeg库所在路径的目录</span></span><br><span class="line"><span class="keyword">set</span>(distribution_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/src/main/jniLibs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( libffmpeg</span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="keyword">set_target_properties</span>( libffmpeg</span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libffmpeg.so)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加ffmpeg头文件路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(src/main/jniLibs/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>( FFmpegUtil</span><br><span class="line">        libffmpeg</span><br><span class="line">        <span class="variable">$&#123;log-lib&#125;</span></span><br><span class="line">        <span class="variable">$&#123;android-lib&#125;</span> )</span><br></pre></td></tr></table></figure>
<p>可以看出cmake文件的配置简洁了许多。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://www.ihubin.com/blog/android-ffmpeg-demo-3/" target="_blank" rel="noopener">Android最简单的基于FFmpeg的例子(三)—编译FFmpeg成一个SO库</a></li>
<li><a href="https://blog.csdn.net/sunwutian0325/article/details/53502025" target="_blank" rel="noopener">ffmpeg编译成android的单独的libffmpeg.so</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> FFmpeg </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android NDK交叉编译FFmpeg]]></title>
      <url>https://xch168.github.io/2018/07/22/android-ndk-ffmpeg-compile/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转换成流的开源程序。它提供了录制、转换以及流化音视频的完整解决方案。</p>
</blockquote>
<a id="more"></a>
<h3 id="下载NDK"><a href="#下载NDK" class="headerlink" title="下载NDK"></a>下载NDK</h3><ul>
<li><p>通过Android Studio下载</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/ndk-download.png" alt="ndk-download"></p>
</li>
<li><p>到官网下载</p>
<blockquote>
<p><a href="https://developer.android.com/ndk/downloads/" target="_blank" rel="noopener">https://developer.android.com/ndk/downloads/</a></p>
</blockquote>
</li>
</ul>
<h3 id="下载FFmpeg源码"><a href="#下载FFmpeg源码" class="headerlink" title="下载FFmpeg源码"></a>下载FFmpeg源码</h3><ul>
<li><p>通过git clone</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/FFmpeg/FFmpeg.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>到官网下载</p>
<blockquote>
<p><a href="http://ffmpeg.org/download.html#repositories" target="_blank" rel="noopener">http://ffmpeg.org/download.html#repositories</a></p>
</blockquote>
</li>
</ul>
<h3 id="配置configure"><a href="#配置configure" class="headerlink" title="配置configure"></a>配置configure</h3><p>由于默认configure脚本编译出来的动态库版本号在文件名后缀.so之后，如：libavcodec.so.7</p>
<p>所以需要对configure进行修改：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SLIBNAME_WITH_MAJOR='$(SLIBNAME).$(LIBMAJOR)'</span></span><br><span class="line"><span class="comment"># LIB_INSTALL_EXTRA_CMD='$$(RANLIB) "$(LIBDIR)/$(LIBNAME)"'</span></span><br><span class="line"><span class="comment"># SLIB_INSTALL_NAME='$(SLIBNAME_WITH_VERSION)'</span></span><br><span class="line"><span class="comment"># SLIB_INSTALL_LINKS='$(SLIBNAME_WITH_MAJOR) $(SLIBNAME)'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 将上面四个变量的值改成如下：</span></span><br><span class="line">SLIBNAME_WITH_MAJOR=<span class="string">'$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)'</span>  </span><br><span class="line">LIB_INSTALL_EXTRA_CMD=<span class="string">'$$(RANLIB)"$(LIBDIR)/$(LIBNAME)"'</span>  </span><br><span class="line">SLIB_INSTALL_NAME=<span class="string">'$(SLIBNAME_WITH_MAJOR)'</span>  </span><br><span class="line">SLIB_INSTALL_LINKS=<span class="string">'$(SLIBNAME)'</span></span><br></pre></td></tr></table></figure>
<h3 id="使用android-ndk-r15c编译FFmpeg3-3-7"><a href="#使用android-ndk-r15c编译FFmpeg3-3-7" class="headerlink" title="使用android-ndk-r15c编译FFmpeg3.3.7"></a>使用android-ndk-r15c编译FFmpeg3.3.7</h3><p>编写编译脚本<code>build-android-ffmpeg.sh</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ndk环境    </span></span><br><span class="line"><span class="built_in">export</span> NDK=/Users/xch/debug/ndk/android-ndk-r15c</span><br><span class="line"><span class="built_in">export</span> SYSROOT=<span class="variable">$NDK</span>/platforms/android-21/arch-arm</span><br><span class="line"><span class="built_in">export</span> TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64</span><br><span class="line">CPU=armv7<span class="_">-a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要保存动态库的目录，这里保存在源码根目录下的android/armv7-a</span></span><br><span class="line"><span class="built_in">export</span> PREFIX=$(<span class="built_in">pwd</span>)/android/<span class="variable">$CPU</span></span><br><span class="line">ADDI_CFLAGS=<span class="string">"-marm"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> build_android</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"开始编译ffmpeg"</span></span><br><span class="line"></span><br><span class="line">    ./configure \</span><br><span class="line">        --target-os=linux \</span><br><span class="line">        --prefix=<span class="variable">$PREFIX</span> \</span><br><span class="line">        --<span class="built_in">enable</span>-cross-compile \</span><br><span class="line">        --<span class="built_in">enable</span>-shared \</span><br><span class="line">        --<span class="built_in">disable</span>-static \</span><br><span class="line">        --<span class="built_in">disable</span>-doc \</span><br><span class="line">        --<span class="built_in">disable</span>-ffmpeg \</span><br><span class="line">        --<span class="built_in">disable</span>-ffplay \</span><br><span class="line">        --<span class="built_in">disable</span>-ffprobe \</span><br><span class="line">        --<span class="built_in">disable</span>-avdevice \</span><br><span class="line">        --<span class="built_in">disable</span>-doc \</span><br><span class="line">        --<span class="built_in">disable</span>-symver \</span><br><span class="line">        --cross-prefix=<span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi- \</span><br><span class="line">        --arch=arm \</span><br><span class="line">        --sysroot=<span class="variable">$SYSROOT</span> \</span><br><span class="line">        --extra-cflags=<span class="string">"-Os -fpic <span class="variable">$ADDI_CFLAGS</span>"</span> \</span><br><span class="line">        --extra-ldflags=<span class="string">"<span class="variable">$ADDI_LDFLAGS</span>"</span> \</span><br><span class="line">        <span class="variable">$ADDITIONAL_CONFIGURE_FLAG</span></span><br><span class="line"></span><br><span class="line">    make clean</span><br><span class="line"></span><br><span class="line">    make -j16</span><br><span class="line">    make install</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"编译结束！"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_android</span><br></pre></td></tr></table></figure>
<p>编译结果：</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/ffmpeg-lib.png" alt="ffmpeg-lib"></p>
<h3 id="使用android-ndk-r17b编译FFmpeg4-0-2"><a href="#使用android-ndk-r17b编译FFmpeg4-0-2" class="headerlink" title="使用android-ndk-r17b编译FFmpeg4.0.2"></a>使用android-ndk-r17b编译FFmpeg4.0.2</h3><p>编译脚本<code>build-android-ffmpeg.sh</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ndk环境    </span></span><br><span class="line"><span class="built_in">export</span> NDK=/Users/xch/debug/ndk/android-ndk-r17b</span><br><span class="line"><span class="built_in">export</span> SYSROOT=<span class="variable">$NDK</span>/platforms/android-21/arch-arm</span><br><span class="line"><span class="built_in">export</span> TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64</span><br><span class="line">CPU=armv7<span class="_">-a</span></span><br><span class="line"></span><br><span class="line">ISYSROOT=<span class="variable">$NDK</span>/sysroot</span><br><span class="line">ASM=<span class="variable">$ISYSROOT</span>/usr/include/arm-linux-androideabi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要保存动态库的目录，这里保存在源码根目录下的android/armv7-a</span></span><br><span class="line"><span class="built_in">export</span> PREFIX=$(<span class="built_in">pwd</span>)/android/<span class="variable">$CPU</span></span><br><span class="line">ADDI_CFLAGS=<span class="string">"-marm"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> build_android</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"开始编译ffmpeg"</span></span><br><span class="line"></span><br><span class="line">    ./configure \</span><br><span class="line">        --target-os=linux \</span><br><span class="line">        --prefix=<span class="variable">$PREFIX</span> \</span><br><span class="line">        --<span class="built_in">enable</span>-cross-compile \</span><br><span class="line">        --<span class="built_in">enable</span>-shared \</span><br><span class="line">        --<span class="built_in">disable</span>-static \</span><br><span class="line">        --<span class="built_in">disable</span>-doc \</span><br><span class="line">        --<span class="built_in">disable</span>-ffmpeg \</span><br><span class="line">        --<span class="built_in">disable</span>-ffplay \</span><br><span class="line">        --<span class="built_in">disable</span>-ffprobe \</span><br><span class="line">        --<span class="built_in">disable</span>-avdevice \</span><br><span class="line">        --<span class="built_in">disable</span>-doc \</span><br><span class="line">        --<span class="built_in">disable</span>-symver \</span><br><span class="line">        --cross-prefix=<span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi- \</span><br><span class="line">        --arch=arm \</span><br><span class="line">        --sysroot=<span class="variable">$SYSROOT</span> \</span><br><span class="line">        --extra-cflags=<span class="string">"-I<span class="variable">$ASM</span> -isysroot <span class="variable">$ISYSROOT</span> -D__ANDROID_API__=21 -U_FILE_OFFSET_BITS -Os -fPIC -DANDROID -Wno-deprecated -mfloat-abi=softfp -marm"</span> \</span><br><span class="line">        --extra-ldflags=<span class="string">"<span class="variable">$ADDI_LDFLAGS</span>"</span> \</span><br><span class="line">        <span class="variable">$ADDITIONAL_CONFIGURE_FLAG</span></span><br><span class="line"></span><br><span class="line">    make clean</span><br><span class="line"></span><br><span class="line">    make -j16</span><br><span class="line">    make install</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"编译结束！"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_android</span><br></pre></td></tr></table></figure>
<p>编译过程错误处理：</p>
<p>错误1：变量名与宏定义冲突</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/compile-error1.png" alt="compile-error1"></p>
<p>解决方法：将B0修改为b0，一共4处。</p>
<p>错误2：</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/compile-error2.png" alt="compile-error2"></p>
<p>解决：将libavcodec/hevc_mvs.c中的B0改为b0。</p>
<p>错误3：</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/compile-error3.png" alt="compile-error3"></p>
<p>解决：将libavcodec/opus_pvq.c中的B0改为b0。</p>
<p><strong>NOTE:</strong> </p>
<p>android-ndk-r16b之前版本的头文件位于<code>{NDK_HOME}/platforms/{android-21}/{arch-arm}/usr/include</code>，r16b及之后的版本头文件位于<code>{NDK_HOME}/sysroot/usr/include</code></p>
<h3 id="使用编译好的so库"><a href="#使用编译好的so库" class="headerlink" title="使用编译好的so库"></a>使用编译好的so库</h3><p>Step1:  在Android Studio创建一个工程，并勾选“Include C++ support”；</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/build-demo-project.png" alt="build-demo-project"></p>
<p>Step2: 创建一个<code>jniLibs</code>目录，并把编译好的<code>头文件</code>和<code>.so</code>文件都复制到该目录；</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/demo-project-dir.png" alt="demo-project-dir"></p>
<p>Step3: 配置gradle文件:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">externalNativeBuild &#123;</span><br><span class="line">    cmake &#123;</span><br><span class="line">        cppFlags <span class="string">"-frtti -fexceptions"</span></span><br><span class="line">        abiFilters <span class="string">'armeabi-v7a'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sourceSets.main &#123;</span><br><span class="line">    jniLibs.srcDirs = [<span class="string">'src/main/jniLibs'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step4: 编辑CMakeLists.txt文件:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( MyFFmpeg</span><br><span class="line">             SHARED</span><br><span class="line">             src/main/cpp/native-lib.cpp )</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>( log-lib</span><br><span class="line">              log )</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>( android-lib</span><br><span class="line">              android )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置ffmpeg库所在路径的目录</span></span><br><span class="line"><span class="keyword">set</span>(distribution_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/src/main/jniLibs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( avutil-<span class="number">56</span></span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="keyword">set_target_properties</span>( avutil-<span class="number">56</span></span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libavutil-<span class="number">56</span>.so)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( swresample-<span class="number">3</span></span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="keyword">set_target_properties</span>( swresample-<span class="number">3</span></span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libswresample-<span class="number">3</span>.so)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( avfilter-<span class="number">7</span></span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="keyword">set_target_properties</span>( avfilter-<span class="number">7</span></span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libavfilter-<span class="number">7</span>.so)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( avformat-<span class="number">58</span></span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="keyword">set_target_properties</span>( avformat-<span class="number">58</span></span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libavformat-<span class="number">58</span>.so)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( swscale-<span class="number">5</span></span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="keyword">set_target_properties</span>( swscale-<span class="number">5</span></span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libswscale-<span class="number">5</span>.so)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( avcodec-<span class="number">58</span></span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="keyword">set_target_properties</span>( avcodec-<span class="number">58</span></span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libavcodec-<span class="number">58</span>.so)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加ffmpeg头文件路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(src/main/jniLibs/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>( MyFFmpeg</span><br><span class="line">        avcodec-<span class="number">58</span></span><br><span class="line">        avfilter-<span class="number">7</span></span><br><span class="line">        avformat-<span class="number">58</span></span><br><span class="line">        avutil-<span class="number">56</span></span><br><span class="line">        swresample-<span class="number">3</span></span><br><span class="line">        swscale-<span class="number">5</span></span><br><span class="line">        <span class="variable">$&#123;log-lib&#125;</span></span><br><span class="line">        <span class="variable">$&#123;android-lib&#125;</span> )</span><br></pre></td></tr></table></figure>
<p>Step5: 编写代码：</p>
<p>Java层：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"MyFFmpeg"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">avformatInfo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">avcodecInfo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">avfilterInfo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">configurationInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView mInfoView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        mInfoView = findViewById(R.id.info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">format</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        mInfoView.setText(avformatInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">codec</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        mInfoView.setText(avcodecInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        mInfoView.setText(avfilterInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">config</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        mInfoView.setText(configurationInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavformat/avformat.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavcodec/avcodec.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavutil/avutil.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavfilter/avfilter.h"</span></span></span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_github_xch168_ffmpegdemo_MainActivity_avformatInfo(JNIEnv *env, jobject instance) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> info[<span class="number">40000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    AVInputFormat *if_temp = av_iformat_next(<span class="literal">NULL</span>);</span><br><span class="line">    AVOutputFormat *of_temp = av_oformat_next(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//Input</span></span><br><span class="line">    <span class="keyword">while</span> (if_temp != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(info, <span class="string">"%s[In ][%10s]\n"</span>, info, if_temp-&gt;name);</span><br><span class="line">        if_temp = if_temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Output</span></span><br><span class="line">    <span class="keyword">while</span> (of_temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(info, <span class="string">"%s[Out][%10s]\n"</span>, info, of_temp-&gt;name);</span><br><span class="line">        of_temp = of_temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_github_xch168_ffmpegdemo_MainActivity_avcodecInfo(JNIEnv *env, jobject instance) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> info[<span class="number">40000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    AVCodec *c_temp = av_codec_next(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (c_temp!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c_temp-&gt;decode!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(info, <span class="string">"%s[Dec]"</span>, info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(info, <span class="string">"%s[Enc]"</span>, info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (c_temp-&gt;type) &#123;</span><br><span class="line">            <span class="keyword">case</span> AVMEDIA_TYPE_VIDEO:</span><br><span class="line">                <span class="built_in">sprintf</span>(info, <span class="string">"%s[Video]"</span>, info);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> AVMEDIA_TYPE_AUDIO:</span><br><span class="line">                <span class="built_in">sprintf</span>(info, <span class="string">"%s[Audio]"</span>, info);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">sprintf</span>(info, <span class="string">"%s[Other]"</span>, info);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sprintf</span>(info, <span class="string">"%s[%10s]\n"</span>, info, c_temp-&gt;name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        c_temp=c_temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_github_xch168_ffmpegdemo_MainActivity_avfilterInfo(JNIEnv *env, jobject instance) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> info[<span class="number">40000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    AVFilter *f_temp = (AVFilter *)avfilter_next(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">while</span> (f_temp != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(info, <span class="string">"%s[%10s]\n"</span>, info, f_temp-&gt;name);</span><br><span class="line">        f_temp = f_temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_github_xch168_ffmpegdemo_MainActivity_configurationInfo(JNIEnv *env, jobject instance) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> info[<span class="number">10000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(info, <span class="string">"%s\n"</span>, avcodec_configuration());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(info);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/run-result.gif" alt="run-result"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://juejin.im/post/5b1ddc84e51d4506d73f2b3b?utm_source=gold_browser_extension" target="_blank" rel="noopener">Android 基于ffmpeg开发简易播放器 - NDK交叉编译ffmpeg</a></li>
<li><a href="https://www.jianshu.com/p/5d738f645697" target="_blank" rel="noopener">在Mac下使用NDK编译FFmpeg3.3.4</a></li>
<li><a href="https://blog.csdn.net/tyutccser/article/details/80619065" target="_blank" rel="noopener">Ubuntu编译Android版本FFmpeg</a></li>
<li><a href="https://android.googlesource.com/platform/ndk/+/master/docs/UnifiedHeaders.md#supporting-unified-headers-in-your-build-system" target="_blank" rel="noopener">Unified Headers</a></li>
<li><a href="http://www.ihubin.com/blog/android-ffmpeg-demo-1/" target="_blank" rel="noopener">Android最简单的基于FFmpeg的例子(一)—编译FFmpeg类库</a></li>
<li><a href="http://www.ihubin.com/blog/android-ffmpeg-demo-2/" target="_blank" rel="noopener">Android最简单的基于FFmpeg的例子(二)—测试编译好的SO库</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> FFmpeg </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android NDK开发-APK增量更新]]></title>
      <url>https://xch168.github.io/2018/07/22/android-ndk-apk-incremental-update/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>现在的APP更新频率非常高，apk的大小也在不断的变大。如果每次新版本的更新，都让用户去下载一个完整的apk，这对于用户的耐心和流量都是巨大的消耗。特别是做应用市场的，如果没有增量更新，那么就要额外的付出高额的流量费用。</p>
</blockquote>
<a id="more"></a>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote>
<p>将手机已安装的apk与服务端最新的apk进行二进制对比，得到差分包，用户更新程序时，只需要下载差分包，并在本地使用差分包与已安装的apk合并成新版的apk。</p>
</blockquote>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/apk-increment-principle.png" alt="apk-increment-principle"></p>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul>
<li><p>bsdiff、bspatch</p>
<p>下载地址：<a href="http://www.daemonology.net/bsdiff/" target="_blank" rel="noopener">http://www.daemonology.net/bsdiff/</a></p>
<p>编译源码：</p>
<p>Step1: make</p>
<p>出错信息：</p>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/bsdiff-compile-1.png" alt="bsdiff-compile-1"></p>
<p>Step2: 修改<code>Makefile</code>文件，将install：下面的<code>if</code>和<code>endif</code>各添加一个缩进：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CFLAGS		+=	-O3 -lbz2</span><br><span class="line"></span><br><span class="line">PREFIX		?=	/usr/local</span><br><span class="line">INSTALL_PROGRAM	?=	$&#123;INSTALL&#125; -c -s -m 555</span><br><span class="line">INSTALL_MAN	?=	$&#123;INSTALL&#125; -c -m 444</span><br><span class="line"></span><br><span class="line"><span class="section">all:		bsdiff bspatch</span></span><br><span class="line"><span class="section">bsdiff:		bsdiff.c</span></span><br><span class="line"><span class="section">bspatch:	bspatch.c</span></span><br><span class="line"></span><br><span class="line"><span class="section">install:</span></span><br><span class="line">	$&#123;INSTALL_PROGRAM&#125; bsdiff bspatch $&#123;PREFIX&#125;/bin</span><br><span class="line">	.<span class="keyword">ifndef</span> WITHOUT_MAN</span><br><span class="line">	$&#123;INSTALL_MAN&#125; bsdiff.1 bspatch.1 $&#123;PREFIX&#125;/man/man1</span><br><span class="line">	.<span class="keyword">endif</span></span><br></pre></td></tr></table></figure>
<p>Step3: make</p>
<p>错误信息：</p>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/bsdiff-compile-2.png" alt="bsdiff-compile-2png"></p>
<p>Step4: 在bspath.c中添加<code>#include &lt;sys/types.h&gt;</code></p>
<p>Step5: make</p>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/bsdiff-compile-3.png" alt="bsdiff-compile-3"></p>
</li>
</ul>
<h3 id="生成差分包"><a href="#生成差分包" class="headerlink" title="生成差分包"></a>生成差分包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bsdiff v1.0.0.apk v1.0.1.apk 1.0.0-to-1.0.1.patch</span><br></pre></td></tr></table></figure>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/bsdiff.png" alt="bsdiff"></p>
<h3 id="合并差分包"><a href="#合并差分包" class="headerlink" title="合并差分包"></a>合并差分包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bspatch v1.0.0.apk new.apk 1.0.0-to-1.0.1.patch</span><br></pre></td></tr></table></figure>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/bspatch.png" alt="bspatch"></p>
<p>对比文件是否一样：</p>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/md5.png" alt="md5"></p>
<h3 id="在Android项目中使用bspatch"><a href="#在Android项目中使用bspatch" class="headerlink" title="在Android项目中使用bspatch"></a>在Android项目中使用bspatch</h3><p>Step1：下载依赖库<code>bzip</code>的源码（官网域名过期），可以从我的GitHub项目中拷贝：</p>
<p>下载地址：<a href="https://github.com/xch168/BsPatchTest" target="_blank" rel="noopener">https://github.com/xch168/BsPatchTest</a></p>
<p>Step2：将bzip库，导入到Android项目中；</p>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/bzip2.png" alt="bzip2"></p>
<p>Step3：将bsdiff中的<code>bspatch.c</code>文件导入到Android项目中，并将bspatch.c中的<code>#include &lt;bzlib.h&gt;</code>改成<code>#include &quot;bzip2/bzlib.h&quot;</code></p>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/bspatch.c.png" alt="bspatch.c"></p>
<p>Step4：编写CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将./src/main/cpp目录（不包含子目录）下所有源文件保存在变量 SRC 中</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(./src/main/cpp SRC)</span><br><span class="line"><span class="comment"># 将./src/main/cpp/bzip2目录（不包含子目录）下所有源文件保存在变量 SRC_BZIP 中</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(./src/main/cpp/bzip2 SRC_BZIP)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 SRC_BZIP 添加到 SRC 中</span></span><br><span class="line">list(APPEND SRC <span class="variable">$&#123;SRC_BZIP&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( bspatch</span><br><span class="line">             SHARED</span><br><span class="line">             <span class="variable">$&#123;SRC&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>( log-lib</span><br><span class="line">              log )</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>( bspatch</span><br><span class="line">                       <span class="variable">$&#123;log-lib&#125;</span> )</span><br></pre></td></tr></table></figure>
<p>Step4：编写代码</p>
<p>Java层：</p>
<p>BsPatchUtil.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BsPatchUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"bspatch"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">patch</span><span class="params">(String oldApk, String newApk, String patch)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> File destApk = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"dest.apk"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> File patch = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"1.0.0-to-1.0.1.patch"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        TextView versionText = findViewById(R.id.tv_version);</span><br><span class="line">        versionText.setText(<span class="string">"App版本：v"</span> + getVersionName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                BsPatchUtil.patch(getApkPath(), destApk.getAbsolutePath(), patch.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (destApk.exists()) &#123;</span><br><span class="line">                    install(MainActivity.<span class="keyword">this</span>, destApk);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">install</span><span class="params">(Context context, File apk)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        intent.setDataAndType(Uri.fromFile(apk), <span class="string">"application/vnd.android.package-archive"</span>);</span><br><span class="line">        context.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前应用的apk包的路径</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> apk路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getApkPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationInfo applicationInfo = getApplicationInfo();</span><br><span class="line">        <span class="keyword">return</span> applicationInfo.sourceDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getVersionName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String versionName = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PackageInfo packageInfo = getApplicationContext()</span><br><span class="line">                    .getPackageManager()</span><br><span class="line">                    .getPackageInfo(getPackageName(), <span class="number">0</span>);</span><br><span class="line">            versionName = packageInfo.versionName;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> versionName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C层：</p>
<p>bspatch-util.h：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bzip2/bzlib_private.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">executePatch</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_github_xch168_bspatchtest_BsPatchUtil_patch(JNIEnv *env, jclass type, jstring oldApk_, jstring newApk_, jstring patch_);</span><br></pre></td></tr></table></figure>
<p>bspatch-util.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bspatch-util.h"</span></span></span><br><span class="line"></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_github_xch168_bspatchtest_BsPatchUtil_patch(JNIEnv *env, jclass type, jstring oldApk_, jstring newApk_, jstring patch_) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> argc = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">char</span> *argv[argc];</span><br><span class="line">    argv[<span class="number">0</span>] = <span class="string">"bspatch"</span>;</span><br><span class="line">    argv[<span class="number">1</span>] = (<span class="keyword">char</span>*)((*env)-&gt;GetStringUTFChars(env, oldApk_, <span class="number">0</span>));</span><br><span class="line">    argv[<span class="number">2</span>] = (<span class="keyword">char</span>*)((*env)-&gt;GetStringUTFChars(env, newApk_, <span class="number">0</span>));</span><br><span class="line">    argv[<span class="number">3</span>] = (<span class="keyword">char</span>*)((*env)-&gt;GetStringUTFChars(env, patch_, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = executePatch(argc, argv);</span><br><span class="line"></span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, oldApk_, argv[<span class="number">1</span>]);</span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, newApk_, argv[<span class="number">2</span>]);</span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, patch_, argv[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step5：将通过bsdiff生成的差量包<code>1.0.0-to-1.0.1.patch</code> push到手机sdcard目录</p>
<p>Step6：运行程序，点击”增量更新“</p>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/update.gif" alt="update"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><p><a href="https://www.jianshu.com/p/99d986db4db8" target="_blank" rel="noopener">Android 增量更新 （一） NDK 编译 Bsdiff</a></p>
</li>
<li><p><a href="https://blog.csdn.net/lmj623565791/article/details/52761658" target="_blank" rel="noopener">Android 增量更新完全解析</a></p>
</li>
<li><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1222/3795.html" target="_blank" rel="noopener">Android应用增量更新 - Smart App Updates</a></p>
</li>
<li><p><a href="https://blog.csdn.net/dd864140130/article/details/52928419" target="_blank" rel="noopener">漫谈Android 增量更新</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/lping/p/5833090.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/lping/p/5833090.html" target="_blank" rel="noopener">编译和使用bsdiff</a></a></p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android NDK开发-异常处理]]></title>
      <url>https://xch168.github.io/2018/07/22/android-ndk-exception-handle/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>异常，是程序不正确执行的表现。异常包括编译时异常、运行时异常。对程序的异常进行处理是程序健壮性的保障。</p>
</blockquote>
<a id="more"></a>
<h3 id="在JNI函数中调用Java方法出现异常情况"><a href="#在JNI函数中调用Java方法出现异常情况" class="headerlink" title="在JNI函数中调用Java方法出现异常情况"></a>在JNI函数中调用Java方法出现异常情况</h3><p>当JNI函数调用Java方法的时候出现异常，JNI的函数还是会继续执行：</p>
<p>Java层：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"native-lib"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">invokeNativeMethod</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        invokeNativeMethod();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exceptionMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        Log.i(TAG, <span class="string">"a = "</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_invokeNativeMethod(JNIEnv *env, jclass type) &#123;</span><br><span class="line"></span><br><span class="line">    jmethodID mid = env-&gt;GetStaticMethodID(type, <span class="string">"exceptionMethod"</span>, <span class="string">"()V"</span>);</span><br><span class="line">    <span class="keyword">if</span> (mid != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        env-&gt;CallStaticVoidMethod(type, mid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LOGI(<span class="string">"Run to here!!!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.ArithmeticException: divide by zero</span><br><span class="line">        at com.github.xch168.ndkdemo.MainActivity.exceptionMethod(MainActivity.java:<span class="number">28</span>)</span><br><span class="line">        at com.github.xch168.ndkdemo.MainActivity.invokeNativeMethod(Native Method)</span><br><span class="line">        at com.github.xch168.ndkdemo.MainActivity.onCreate(MainActivity.java:<span class="number">24</span>)</span><br><span class="line">...</span><br><span class="line">com.github.xch168.ndkdemo I/<span class="keyword">native</span>-lib: Run to here!!!</span><br></pre></td></tr></table></figure>
<p>从运行的结果可以看出，当JNI函数调用Java方法时，Java方法出现异常崩溃后，JNI函数还是会继续执行。</p>
<h3 id="异常检测与处理"><a href="#异常检测与处理" class="headerlink" title="异常检测与处理"></a>异常检测与处理</h3><p>步骤：</p>
<ol>
<li>调用<code>ExceptionCheck</code>函数检查最近一次JNI调用是否发生异常；</li>
<li>当检测到异常后，调用<code>ExceptionDescribe</code>函数打印这个异常的堆栈信息；</li>
<li>调用<code>ExceptionClear</code>函数清除异常堆栈信息的缓冲区（否则，后面调用ThrowNew抛出的异常堆栈信息会覆盖前面的异常信息）；</li>
<li>调用<code>ThrowNew</code>函数手动抛出一个<code>java.lang.Exception</code>异常。</li>
</ol>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_invokeNativeMethod(JNIEnv *env, jclass type) &#123;</span><br><span class="line"></span><br><span class="line">    jmethodID mid = env-&gt;GetStaticMethodID(type, <span class="string">"exceptionMethod"</span>, <span class="string">"()V"</span>);</span><br><span class="line">    <span class="keyword">if</span> (mid != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用Java层的方法</span></span><br><span class="line">        env-&gt;CallStaticVoidMethod(type, mid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查JNI调用是否引发了异常</span></span><br><span class="line">    <span class="keyword">if</span> (env-&gt;ExceptionCheck()) &#123;</span><br><span class="line">        env-&gt;ExceptionDescribe();</span><br><span class="line">        env-&gt;ExceptionClear();</span><br><span class="line">        env-&gt;ThrowNew(env-&gt;FindClass(<span class="string">"java/lang/Exception"</span>), <span class="string">"JNI抛出的异常"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LOGI(<span class="string">"Run to here!!!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ArithmeticException: divide by zero</span><br><span class="line">at com.github.xch168.ndkdemo.MainActivity.exceptionMethod(MainActivity.java:<span class="number">28</span>)</span><br><span class="line">at com.github.xch168.ndkdemo.MainActivity.invokeNativeMethod(Native Method)</span><br><span class="line">at com.github.xch168.ndkdemo.MainActivity.onCreate(MainActivity.java:<span class="number">24</span>)</span><br><span class="line">...</span><br><span class="line">Caused by: java.lang.Exception: JNI抛出的异常</span><br><span class="line">        at com.github.xch168.ndkdemo.MainActivity.invokeNativeMethod(Native Method)</span><br><span class="line">        at com.github.xch168.ndkdemo.MainActivity.onCreate(MainActivity.java:<span class="number">24</span>)</span><br><span class="line">        at android.app.Activity.performCreate(Activity.java:<span class="number">7130</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>ExceptionOccurred</code>函数，如果检查有异常发生时，该函数会返回一个指向当前异常的引用。作用和<code>ExceptionCheck</code>一样，两者的返回值不一样。</p>
</blockquote>
<h3 id="封装抛出异常工具函数"><a href="#封装抛出异常工具函数" class="headerlink" title="封装抛出异常工具函数"></a>封装抛出异常工具函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">throwByExceptionName</span><span class="params">(JNIEnv *env, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> <span class="keyword">char</span> *msg)</span> </span>&#123;</span><br><span class="line">    jclass cls = env-&gt;FindClass(name);</span><br><span class="line">    <span class="keyword">if</span> (cls != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        env-&gt;ThrowNew(cls, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    env-&gt;DeleteLocalRef(cls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/u013718120/article/details/65629074" target="_blank" rel="noopener">Android NDK（七）：JNI异常处理</a></li>
<li><a href="https://www.cnblogs.com/chenxibobo/p/6895489.html" target="_blank" rel="noopener">Android jni/ndk编程五：jni异常处理</a></li>
<li><a href="https://blog.csdn.net/xyang81/article/details/45770551" target="_blank" rel="noopener">JNI/NDK开发指南（十一）——JNI异常处理</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android NDK开发-LLDB调试]]></title>
      <url>https://xch168.github.io/2018/07/15/android-ndk-lldb-debug/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>LLDB是一个高效的C/C++调试器，与LLVM编译器一起使用，提供了丰富的流程控制和数据监测，有效的帮助我们调试程序。</p>
</blockquote>
<a id="more"></a>
<h3 id="LLDB安装"><a href="#LLDB安装" class="headerlink" title="LLDB安装"></a>LLDB安装</h3><p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_install.png" alt="lldb-install"></p>
<h3 id="Debug-JNI"><a href="#Debug-JNI" class="headerlink" title="Debug JNI"></a>Debug JNI</h3><p>JNI的调试方式和Java的调试方式差不多，先设置<code>断点</code>，然后点击<code>Debug</code>，进入调试模式。</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_breakpoint.png" alt="lldb-breakpoint"></p>
<p>当程序运行到断点的时候就会停下来，这时在Debug面板可以看到变量的值和指针地址：</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_debug_pane.png" alt="lldb-debug-pane"></p>
<h3 id="使用LLDB"><a href="#使用LLDB" class="headerlink" title="使用LLDB"></a>使用LLDB</h3><p>进入到Debug模式后，在<code>Variables</code>Tab的旁边有一个<code>LLDB</code>的Tab，切换到<code>LLDB</code>Tab，就可以使用LLDB命令进行调试，<strong>LLDB命令有很多强大的功能，比如：打印、寻址、调用堆栈等，通过这些命令可以有效的帮助调试NDK程序。</strong></p>
<ul>
<li><p><code>print (p)</code> 打印命令，打印变量及其值：</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_print.png" alt="lldb-cmd-print"></p>
</li>
<li><p><code>po</code> 仅打印变量的值：</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_po.png" alt="lldb-cmd-po"></p>
</li>
<li><p>&nbsp;<code>expr</code> 可以在调试时动态执行指定表达式，并打印结果，用于在调试过程中修改变量的值：</p>
<p>执行expr命令前：</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_expr_jni.png" alt="lldb-cmd-expr-jni"></p>
<p>执行expr命令</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_expr.png" alt="lldb-cmd-expr"></p>
<p>执行expr命令后：</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_expr_jni2.png" alt="lldb-cmd-expr-jni2"></p>
</li>
<li><p><code>call</code>命令，一般只在不需要显示输出或是方法无返回值时使用：</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_call_jni.png" alt="lldb-cmd-call-jni"></p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_call.png" alt="lldb-cmd-call"></p>
</li>
<li><p><code>bt</code>命令用来打印堆栈信息，加<code>all</code>可打印所有thread的堆栈：</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_bt_jni.png" alt="lldb-cmd-bt-jni"></p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_bt.png" alt="lldb-cmd-bt"></p>
</li>
<li><p><code>image</code>命令用于寻址，可以用来查找栈地址对应的代码位置：</p>
<blockquote>
<p>image lookup –address 0xfxxxxx</p>
<p><code>0xfxxxxx</code>：表示对应的栈地址</p>
</blockquote>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_image.png" alt="lldb-cmd-image"></p>
</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://juejin.im/post/58dae3a5ac502e0058ee242f" target="_blank" rel="noopener">Andorid Studio NDK开发-LLDB调试</a></li>
<li><a href="http://lldb.llvm.org/" target="_blank" rel="noopener">The LLDB Debugger</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android NDK开发-JNI]]></title>
      <url>https://xch168.github.io/2018/07/08/android-ndk-jni/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>JNI（Java Native Interface）：Java本地接口。是为了方便使用Java调用C、C++等本地代码所封装的一层接口。大家都知道，Java的优点是跨平台，但是作为优点的同时，其在本地交互的时候就变成了缺点。Java的跨平台特性导致其本地交互的能力不够强大，一些和操作系统相关的特性Java无法完成，于是Java提供了JNI专门用于和本地代码交互，这样就增强了Java语言的本地交互能力。</p>
</blockquote>
<a id="more"></a>
<h3 id="JNI描述符"><a href="#JNI描述符" class="headerlink" title="JNI描述符"></a>JNI描述符</h3><h4 id="域描述符"><a href="#域描述符" class="headerlink" title="域描述符"></a>域描述符</h4><h5 id="基本类型描述符"><a href="#基本类型描述符" class="headerlink" title="基本类型描述符"></a>基本类型描述符</h5><table>
<thead>
<tr>
<th>Field Desciptor</th>
<th>Java Language Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>Z</td>
<td>boolean</td>
</tr>
<tr>
<td>B</td>
<td>byte</td>
</tr>
<tr>
<td>C</td>
<td>char</td>
</tr>
<tr>
<td>S</td>
<td>short</td>
</tr>
<tr>
<td>I</td>
<td>int</td>
</tr>
<tr>
<td>J</td>
<td>long</td>
</tr>
<tr>
<td>F</td>
<td>float</td>
</tr>
<tr>
<td>D</td>
<td>Double</td>
</tr>
</tbody>
</table>
<p><em>除了<strong>boolean</strong>和<strong>long</strong>类型分别为<strong>Z</strong>和<strong>J</strong>外，其他的描述符对应的都是Java类型名的大写字母。<strong>void</strong>的描述符为<strong>V</strong></em></p>
<h5 id="引用类型描述符"><a href="#引用类型描述符" class="headerlink" title="引用类型描述符"></a>引用类型描述符</h5><p>一般的引用类型描述符规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L + 类描述符 + ；</span><br></pre></td></tr></table></figure>
<p>如，String类型的域描述符为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ljava/lang/String;</span><br></pre></td></tr></table></figure>
<p>数组的域描述符比较特殊，规则：其中有多少级数组就有多少个“[”，数组的类型为类时，则有分号，为基本类型时没有分号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ + 其类型的域描述符</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int[]      描述符为 [I</span><br><span class="line">long[]     描述符为 [J</span><br><span class="line">String[]   描述符为 [Ljava/lang/String;</span><br><span class="line">int[][]    描述符为 [[I</span><br><span class="line">double[][] 描述符为 [[D</span><br></pre></td></tr></table></figure>
<h4 id="类描述符"><a href="#类描述符" class="headerlink" title="类描述符"></a>类描述符</h4><p>类描述符是类的完整名称：包名+类名，Java中包名用.分隔，JNI中改成/分隔</p>
<p>如，Java中java.lang.String类的描述符为java/lang/String</p>
<h4 id="方法描述符（方法签名）"><a href="#方法描述符（方法签名）" class="headerlink" title="方法描述符（方法签名）"></a>方法描述符（方法签名）</h4><p>方法描述符需要将所有类型的域描述符按照声明顺序放入括号，然后加上返回值类型的域描述符，规则如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(参数……)返回类型</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Java 层方法               --&gt;    JNI 函数签名</span><br><span class="line">String getString()       --&gt; ()Ljava/lang/String;</span><br><span class="line">int sum(int a, int b)    --&gt; (II)I</span><br><span class="line">void main(String[] args) --&gt; ([Ljava/lang/String;)V</span><br></pre></td></tr></table></figure>
<h3 id="JNI方法结构分析"><a href="#JNI方法结构分析" class="headerlink" title="JNI方法结构分析"></a>JNI方法结构分析</h3><p>命名规则：</p>
<p><code>extern &quot;C&quot; JNIEXPORT 返回值 JNICALL Java_全路径类名_方法名__参数签名(JNIEnv* , jobject, 其它参数);</code></p>
<p>说明：</p>
<p><strong>JNIEXPORT</strong>、<strong>JNICALL</strong>：这两个关键词是宏定义，主要是注明该函数是JNI函数，当虚拟机加载so库时，如果发现函数含有这两个宏定义时，就会链接到对应的Java层的native方法。</p>
<p><strong>Java_</strong>：标识该函数来源于Java。</p>
<p><strong>__参数签名</strong>：如果是重载方法，则有参数签名，否则没有。参数签名的斜杠“/”改为“_”，分号“；”改为”_2”连接。</p>
<p><strong>extern “C”</strong> ：如果在使用的是C++，在函数前面加extern “C”，表示按照C的方式编译。</p>
<p><strong>JNIEnv</strong>：指向函数表指针的指针，函数表里面定义了很多JNI函数，通过这些函数可以实现Java层和JNI层的交互，就是说JNIEnv调用JNI函数可以访问Java虚拟机，操作Java对象。</p>
<p><strong>jobject</strong>：调用该方法的Java实例对象。对于Java的native方法，static和非static方法的区别在于第二个参数，static的为jclass，非static的为jobject。</p>
<p>示例：</p>
<p><img src="/2018/07/08/android-ndk-jni/method_mapping.png" alt="method-mapping"></p>
<h3 id="打印log"><a href="#打印log" class="headerlink" title="打印log"></a>打印log</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOG_TAG    <span class="meta-string">"native-lib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG,__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo2_MainActivity_stringFromJNI(JNIEnv* env, jobject<span class="comment">/* this */</span>) &#123;</span><br><span class="line">	<span class="comment">// 这样就可以在Logcat中查看到log</span></span><br><span class="line">    LOGI(<span class="string">"invoke method: stringFromJNI"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++"</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="JNI函数访问Java对象的变量"><a href="#JNI函数访问Java对象的变量" class="headerlink" title="JNI函数访问Java对象的变量"></a>JNI函数访问Java对象的变量</h3><p>步骤：</p>
<ol>
<li><p>通过<code>env-&gt;GetObjectClass(jobject)</code>获取Java对象的class类，返回一个jclass；</p>
</li>
<li><p>调用<code>env-&gt;GetFieldID(jclazz, fieldName, signature)</code>的到该变量的id，即jfieldID；</p>
<p>如果变量是静态static的，则调用的方法为<code>GetStaticFieldID</code>。</p>
</li>
<li><p>最后通过调用<code>env-&gt;Get{type}Field(jobject, fieldId)</code>的到该变量的值。其中{type}是变量的类型；</p>
<p>如果变量是静态static的，则调用的方法是<code>GetStatic{type}Field(jclass, fieldId)</code></p>
<p><strong>注意</strong>：static的话，是使用jclass作为参数</p>
</li>
</ol>
<hr>
<h4 id="访问非static变量"><a href="#访问非static变量" class="headerlink" title="访问非static变量"></a>访问非static变量</h4><p>Java层：native方法定义和调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">addNum</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">"调用前：num="</span> + num);</span><br><span class="line">    Log.i(TAG, <span class="string">"调用后："</span> + addNum());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_addNum(JNIEnv *env, jobject instance) &#123;</span><br><span class="line">    <span class="comment">// 获取实例对应的 class</span></span><br><span class="line">    jclass jclazz = env-&gt;GetObjectClass(instance);</span><br><span class="line">    <span class="comment">// 通过class获取相应的变量的 field id</span></span><br><span class="line">    jfieldID fid = env-&gt;GetFieldID(jclazz, <span class="string">"num"</span>, <span class="string">"I"</span>);</span><br><span class="line">    <span class="comment">// 通过 field id 获取对应变量的值</span></span><br><span class="line">    jint num = env-&gt;GetIntField(instance, fid);</span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: 调用前：num=<span class="number">1</span></span><br><span class="line">MainActivity: 调用后：<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h4 id="访问static变量"><a href="#访问static变量" class="headerlink" title="访问static变量"></a>访问static变量</h4><p>Java层：native方法定义和调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String name = <span class="string">"Tom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">accessStaticField</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">"调用前：name="</span> + name);</span><br><span class="line">    accessStaticField();</span><br><span class="line">    Log.i(TAG, <span class="string">"调用后："</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_accessStaticField(JNIEnv *env, jobject instance) &#123;</span><br><span class="line">    jclass jclazz = env-&gt;GetObjectClass(instance);</span><br><span class="line">    jfieldID fid = env-&gt;GetStaticFieldID(jclazz, <span class="string">"name"</span>, <span class="string">"Ljava/lang/String;"</span>);</span><br><span class="line">    jstring name = (jstring)(env-&gt;GetStaticObjectField(jclazz, fid));</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *str = env-&gt;GetStringUTFChars(name, JNI_FALSE);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 不要用 == 比较字符串</span></span><br><span class="line"><span class="comment">     *  name == (jstring)"Tom"</span></span><br><span class="line"><span class="comment">     * 或用 = 直接赋值</span></span><br><span class="line"><span class="comment">     * name = (jstring)"Jerry"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">char</span> ch[<span class="number">30</span>] = <span class="string">"hello, "</span>;</span><br><span class="line">    <span class="built_in">strcat</span>(ch, str);</span><br><span class="line">    jstring new_str = env-&gt;NewStringUTF(ch);</span><br><span class="line">    <span class="comment">// 将jstring类型的变量，设置到java</span></span><br><span class="line">    env-&gt;SetStaticObjectField(jclazz, fid, new_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: 调用前：name=Tom</span><br><span class="line">MainActivity: 调用后：hello, Tom</span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：获取Java静态变量，都是调用JNI相应静态函数，不能调用非静态的，同时留意传入的参数是<code>jclass</code>，而不是jobject。</p>
<h4 id="访问private变量，并对其修改"><a href="#访问private变量，并对其修改" class="headerlink" title="访问private变量，并对其修改"></a>访问private变量，并对其修改</h4><p>Java层：native方法定义和调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">accessPrivateField</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">"调用前：age="</span> + age);</span><br><span class="line">    accessPrivateField();</span><br><span class="line">    Log.i(TAG, <span class="string">"调用后：age"</span> + age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_accessPrivateField(JNIEnv *env, jobject instance) &#123;</span><br><span class="line">    jclass clazz = env-&gt;GetObjectClass(instance);</span><br><span class="line">    jfieldID fid = env-&gt;GetFieldID(clazz, <span class="string">"age"</span>, <span class="string">"I"</span>);</span><br><span class="line">    jint age = env-&gt;GetIntField(instance, fid);</span><br><span class="line">    age++;</span><br><span class="line">    env-&gt;SetIntField(instance, fid, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: 调用前：age=<span class="number">25</span></span><br><span class="line">MainActivity: 调用后：age=<span class="number">26</span></span><br></pre></td></tr></table></figure>
<h3 id="JNI函数调用Java对象的方法"><a href="#JNI函数调用Java对象的方法" class="headerlink" title="JNI函数调用Java对象的方法"></a>JNI函数调用Java对象的方法</h3><p>步骤：</p>
<ol>
<li><p>通过<code>env-&gt;GetObjectClass(jobject)</code>获取Java对象的class类，返回一个jclass；</p>
</li>
<li><p>通过<code>env-&gt;GetMethodID(jclass, methodName, sign)</code>获取到Java对象的方法id，即jmethodID，当获取的方法是static时，使用<code>GetStaticMethodID</code>；</p>
</li>
<li><p>通过JNI函数<code>env-&gt;Call{type}Method(jobject, jmethod, param...)</code>实现调用Java的方法；</p>
<p>若调用的是static方法，则使用<code>CallStatic{type}Method(jclass, jmethod, param...)</code>，使用的是jclass。</p>
</li>
</ol>
<hr>
<h4 id="调用Java公有方法"><a href="#调用Java公有方法" class="headerlink" title="调用Java公有方法"></a>调用Java公有方法</h4><p>Java层：native方法定义和调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name = <span class="string">"Tom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">invokePublicMethod</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">"调用前：name="</span> + name);</span><br><span class="line">    accessPublicMethod();</span><br><span class="line">    Log.i(TAG, <span class="string">"调用后：name="</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_invokePublicMethod(JNIEnv *env, jobject instance) &#123;</span><br><span class="line">    <span class="comment">// 1.获取对应的 class</span></span><br><span class="line">    jclass jclazz = env-&gt;GetObjectClass(instance);</span><br><span class="line">    <span class="comment">// 2.获取方法的id</span></span><br><span class="line">    jmethodID mid = env-&gt;GetMethodID(jclazz, <span class="string">"setName"</span>, <span class="string">"(Ljava/lang/String;)V"</span>);</span><br><span class="line">    <span class="comment">// 3.字符数组转换为字符串</span></span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">10</span>] = <span class="string">"Jerry"</span>;</span><br><span class="line">    jstring jName = env-&gt;NewStringUTF(c);</span><br><span class="line">    <span class="comment">// 4.通过该jobject调用对应的方法</span></span><br><span class="line">    env-&gt;CallVoidMethod(instance, mid, jName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: 调用前：name=Tom</span><br><span class="line">MainActivity: 调用后：name=Jerry</span><br></pre></td></tr></table></figure>
<p><strong>调用Java private方法也一样，Java的访问修饰符对C++无效。</strong></p>
<h4 id="调用Java静态方法"><a href="#调用Java静态方法" class="headerlink" title="调用Java静态方法"></a>调用Java静态方法</h4><p>Java层：native方法定义和调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> height = <span class="number">170</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">invokeStaticMethod</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">"调用静态方法：getHeight() = "</span> + invokeStaticMethod());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_invokeStaticMethod(JNIEnv *env, jobject instance) &#123;</span><br><span class="line">    <span class="comment">// 1.获取对应的 class</span></span><br><span class="line">    jclass jclazz = env-&gt;GetObjectClass(instance);</span><br><span class="line">    <span class="comment">// 2.通过class类找到对应的静态方法</span></span><br><span class="line">    jmethodID mid = env-&gt;GetStaticMethodID(jclazz, <span class="string">"getHeight"</span>, <span class="string">"()I"</span>);</span><br><span class="line">    <span class="comment">// 3.通过class调用对应的静态方法</span></span><br><span class="line">    <span class="keyword">return</span> env-&gt;CallStaticIntMethod(jclazz, mid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: 调用静态方法：getHeight() = <span class="number">170</span></span><br></pre></td></tr></table></figure>
<h4 id="调用Java父类方法"><a href="#调用Java父类方法" class="headerlink" title="调用Java父类方法"></a>调用Java父类方法</h4><p>Java层：native方法定义和调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Welcome to JNI world, "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">	<span class="comment">//……</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">invokeSuperMethod</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Log.i(TAG, <span class="string">"调用父类方法：hello(name) = "</span> + invokeSuperMethod());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_invokeSuperMethod(JNIEnv *env, jobject instance) &#123;</span><br><span class="line">    <span class="comment">// 1.通过反射获取 class</span></span><br><span class="line">    jclass jclazz = env-&gt;FindClass(<span class="string">"com/github/xch168/ndkdemo/BaseActivity"</span>);</span><br><span class="line">    <span class="keyword">if</span> (jclazz == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> c[<span class="number">10</span>] = <span class="string">"error"</span>;</span><br><span class="line">        <span class="keyword">return</span> env-&gt;NewStringUTF(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.通过class找到对应的方法id</span></span><br><span class="line">    jmethodID mid = env-&gt;GetMethodID(jclazz, <span class="string">"hello"</span>, <span class="string">"(Ljava/lang/String;)Ljava/lang/String;"</span>);</span><br><span class="line">    <span class="keyword">char</span> ch[<span class="number">10</span>] = <span class="string">"Tom"</span>;</span><br><span class="line">    jstring jstr = env-&gt;NewStringUTF(ch);</span><br><span class="line">    <span class="comment">// 3.调用方法</span></span><br><span class="line">    <span class="keyword">return</span> (jstring) env-&gt;CallNonvirtualObjectMethod(instance, jclazz, mid, jstr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: 调用父类方法：hello(name) = Welcome to JNI world, Tom</span><br></pre></td></tr></table></figure>
<p><strong>两个不同点</strong>：</p>
<ul>
<li>获取的是父类的方法，所有不能通过GetObjectClass获取，需要通过反射<code>FindClass</code>获取；</li>
<li>调用父类的方法是<code>CallNonvirtual{type}Method</code>函数。Novirtual是非虚函数。</li>
</ul>
<h3 id="Java方法传递参数给JNI函数"><a href="#Java方法传递参数给JNI函数" class="headerlink" title="Java方法传递参数给JNI函数"></a>Java方法传递参数给JNI函数</h3><p>native方法既可以传递基本类型参数给JNI（可以不经过转换直接使用），也可以传递复杂类型（需要转换为C/C++的数据结构才能使用）如数组，String或自定义的类等。</p>
<p>用到的JNI函数：</p>
<ul>
<li>获取数组长度：<code>GetArrayLength(j{type}Array)</code>，type为基础类型；</li>
<li>数组转换为对应类型的指针：<code>Get{type}ArrayElements(jarr, 0)</code></li>
<li>获取构造函数的jmethodID时，仍然是用<code>env-&gt;GetMethodID(jclass, methodName, sign)</code>获取，方法名是<code>&lt;init&gt;</code>；</li>
<li>通过构造函数new一个jobject，<code>env-&gt;NewObject(jclass, constructorMethodId, param...)</code>，无参构造函数param为空。</li>
</ul>
<h4 id="数组参数的传递"><a href="#数组参数的传递" class="headerlink" title="数组参数的传递"></a>数组参数的传递</h4><p>Java层：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">intArrayMethod</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">"intArrayMethod: "</span> + intArrayMethod(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">9</span>&#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_intArrayMethod(JNIEnv *env, jobject instance, jintArray arr_) &#123;</span><br><span class="line">    jint *arr = env-&gt;GetIntArrayElements(arr_, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = env-&gt;GetArrayLength(arr_);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    env-&gt;ReleaseIntArrayElements(arr_, arr, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: intArrayMethod: <span class="number">25</span></span><br></pre></td></tr></table></figure>
<h4 id="自定义对象参数的传递"><a href="#自定义对象参数的传递" class="headerlink" title="自定义对象参数的传递"></a>自定义对象参数的传递</h4><p>Java层：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person: &#123;name:"</span> + name + <span class="string">", age:"</span> + age + <span class="string">"&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> Person <span class="title">objectMethod</span><span class="params">(Person person)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">"objectMethod: "</span> + objectMethod(<span class="keyword">new</span> Person()).toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jobject JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_objectMethod(JNIEnv *env, jobject instance, jobject person) &#123;</span><br><span class="line"></span><br><span class="line">    jclass clazz = env-&gt;GetObjectClass(person); <span class="comment">// 主要用的是person，而不是instance</span></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"cannot find class"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    jmethodID constructorMid = env-&gt;GetMethodID(clazz, <span class="string">"&lt;init&gt;"</span>, <span class="string">"(ILjava/lang/String;)V"</span>);</span><br><span class="line">    <span class="keyword">if</span> (constructorMid == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"cannot find constructor method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    jstring name = env-&gt;NewStringUTF(<span class="string">"Tom"</span>);</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewObject(clazz, constructorMid, <span class="number">25</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: objectMethod: Person: &#123;name:Tom, age:<span class="number">25</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/singwhatiwanna/article/details/9061545" target="_blank" rel="noopener">Java JNI介绍</a></li>
<li><a href="http://cfanr.cn/2017/07/29/Android-NDK-dev-JNI-s-foundation/" target="_blank" rel="noopener">Android NDK开发：JNI基础篇</a></li>
<li><a href="http://cfanr.cn/2017/08/05/Android-NDK-dev-JNI-s-practice/" target="_blank" rel="noopener">Android NDK开发：JNI实战篇</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android NDK开发-CMake]]></title>
      <url>https://xch168.github.io/2018/07/04/android-ndk-cmake/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>在Android Studio 2.2及更高的版本，可以使用<code>CMake</code>将C/C++代码编译到一个native library（即.so文件），然后打包到APK中。</p>
</blockquote>
<a id="more"></a>
<h3 id="在Gradle中配置CMake变量"><a href="#在Gradle中配置CMake变量" class="headerlink" title="在Gradle中配置CMake变量"></a>在Gradle中配置CMake变量</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 用于配置Cmake构建参数</span></span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">      cmake &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 将参数传递给变量时，请使用以下语法：</span></span><br><span class="line">        <span class="comment">// arguments "-DVAR_NAME=ARGUMENT".</span></span><br><span class="line">        arguments <span class="string">"-DANDROID_ARM_NEON=TRUE"</span>,</span><br><span class="line">        <span class="comment">// 如果要将多个参数传递给变量, 使用以下语法一起传递:</span></span><br><span class="line">        <span class="comment">// arguments "-DVAR_NAME=ARG_1 ARG_2"</span></span><br><span class="line">        <span class="comment">// 下面一行将 'rtti' 和 'exceptions' 传递给 'ANDROID_CPP_FEATURES'.</span></span><br><span class="line">                  <span class="string">"-DANDROID_CPP_FEATURES=rtti exceptions"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  buildTypes &#123;...&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于链接CMake脚本</span></span><br><span class="line">  externalNativeBuild &#123;</span><br><span class="line">      cmake &#123;</span><br><span class="line">          path <span class="string">"CMakeLists.txt"</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CMake部分构建变量列表：</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ANDROID_TOOLCHAIN</td>
<td>clang(默认)</td>
<td>指定CMake应该使用的编译器工具链</td>
</tr>
<tr>
<td>ANDROID_PLATFORM</td>
<td>android-19</td>
<td>指定Android的目标平台</td>
</tr>
<tr>
<td>ANDROID_CPP_FEATURES</td>
<td>默认为空，可配置：<br>rtti（RunTime Type Information）：运行时类型信息<br> exceptions: 指示代码使用C++异常</td>
<td>指定CMake编译时需要使用某些C++特性</td>
</tr>
<tr>
<td>ANDROID_ARM_MODE</td>
<td>thumb（默认）<br>arm</td>
<td>指定是arm还是以thumb模式生成ARM目标二进制库</td>
</tr>
</tbody>
</table>
<h3 id="CMake构建命令"><a href="#CMake构建命令" class="headerlink" title="CMake构建命令"></a>CMake构建命令</h3><p>Android Studio在<code>cmake_build_command.txt</code>文件中保存用于执行CMake构建的构建参数。</p>
<p>Android Studio会为每个ABI和每个构建类型创建<code>cmake_build_command.txt</code>，放置在如下目录：</p>
<blockquote>
<p>&lt;project-root&gt;/&lt;module-root&gt;/.externalNativeBuild/cmake/&lt;build-type&gt;/&lt;ABI&gt;/</p>
</blockquote>
<p><img src="/2018/07/04/android-ndk-cmake/cmake_build_cmd.png" alt="cmake-build-cmd"></p>
<p>示例：debug模式下的<code>armeabi-v7a</code>的CMake构建命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Executable : /Users/xch/Library/Android/sdk/cmake/3.6.4111459/bin/cmake</span><br><span class="line">arguments : </span><br><span class="line">-H/Users/xch/debug/Android/NDKDemo2/app</span><br><span class="line">-B/Users/xch/debug/Android/NDKDemo2/app/.externalNativeBuild/cmake/debug/armeabi-v7a</span><br><span class="line">-DANDROID_ABI=armeabi-v7a</span><br><span class="line">-DANDROID_PLATFORM=android-19</span><br><span class="line">-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=/Users/xch/debug/Android/NDKDemo2/app/build/intermediates/cmake/debug/obj/armeabi-v7a</span><br><span class="line">-DCMAKE_BUILD_TYPE=Debug</span><br><span class="line">-DANDROID_NDK=/Users/xch/Library/Android/sdk/ndk-bundle</span><br><span class="line">-DCMAKE_CXX_FLAGS=-frtti -fexceptions</span><br><span class="line">-DCMAKE_TOOLCHAIN_FILE=/Users/xch/Library/Android/sdk/ndk-bundle/build/cmake/android.toolchain.cmake</span><br><span class="line">-DCMAKE_MAKE_PROGRAM=/Users/xch/Library/Android/sdk/cmake/3.6.4111459/bin/ninja</span><br><span class="line">-GAndroid Gradle - Ninja</span><br><span class="line">jvmArgs :</span><br></pre></td></tr></table></figure>
<p>这些构建参数是Gradle插件基于<code>build.gradle</code>的配置自动生成。</p>
<p>CMake构建参数列表：</p>
<table>
<thead>
<tr>
<th>构建参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-G  &lt;build-system&gt;</td>
<td>Android Gradle - Ninja是Android Studio唯一支持的C/C++构建系统.CMake会生成<code>android_gradle_build.json</code>文件。 其中包含有关CMake构建的Gradle插件的元数据，例如编译器标志和目标名称。</td>
</tr>
<tr>
<td>-DANDROID_ABI &lt;abi&gt;</td>
<td>目标ABI</td>
</tr>
<tr>
<td>-DCMAKE_LIBRARY_OUTPUT_DIRECTORY &lt;path&gt;</td>
<td>CMake生成的库的位置</td>
</tr>
<tr>
<td>-DCMAKE_TOOLCHAIN_FILE &lt;path&gt;</td>
<td>CMake用于交叉编译的<code>android.toolchain.cmake</code>文件的路径</td>
</tr>
</tbody>
</table>
<h3 id="CMakeList-txt文件说明"><a href="#CMakeList-txt文件说明" class="headerlink" title="CMakeList.txt文件说明"></a>CMakeList.txt文件说明</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 指定CMake编译器的最低版本</span><br><span class="line">cmake_minimum_required(VERSION <span class="number">3.4</span><span class="number">.1</span>)</span><br><span class="line"></span><br><span class="line"># 要求CMake根据指定的源文件生成库</span><br><span class="line">add_library( # 生成的库的名称</span><br><span class="line">             native-lib</span><br><span class="line"></span><br><span class="line">             # 设置生成的库的类型</span><br><span class="line">             SHARED</span><br><span class="line"></span><br><span class="line">             # 所有需要加入到这个库的源文件</span><br><span class="line">             src<span class="regexp">/main/</span>cpp/native-lib.cpp )</span><br><span class="line"></span><br><span class="line"># 如果需要使用系统预构建库，可以使用该方法来查找，比如这里的log库</span><br><span class="line">find_library( # 该变量保存所要关联库的路径</span><br><span class="line">              log-lib</span><br><span class="line"></span><br><span class="line">              # 需要关联的库名称</span><br><span class="line">              log )</span><br><span class="line"></span><br><span class="line"># 指定需要关联的库</span><br><span class="line">target_link_libraries( # 目标库文件</span><br><span class="line">                       native-lib</span><br><span class="line"></span><br><span class="line">                       # 需要在目标库文件中使用的库</span><br><span class="line">                       $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure>
<p>在上面使用<code>add_library</code>来添加系统的预构建库。如果要添加其他的非系统的预构建库，比较FFmpeg的相关库，需要按如下格式：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 添加第三方非系统预构建库</span><br><span class="line">add_library( # 导入的库的名称</span><br><span class="line">    		 imported-lib</span><br><span class="line">            </span><br><span class="line">             # 导入的库的类型</span><br><span class="line">             SHARED</span><br><span class="line">            </span><br><span class="line">             # 表示是导入第三方库</span><br><span class="line">             IMPORTED )</span><br><span class="line"></span><br><span class="line"># 指定库的路径</span><br><span class="line">set_target_properties( # 指定导入的库的名称</span><br><span class="line">                       imported-lib</span><br><span class="line"></span><br><span class="line">                       # Specifies the parameter you want to define.</span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line"></span><br><span class="line">                       # 指定要导入的库的路径</span><br><span class="line">                       imported-lib<span class="regexp">/src/</span>$&#123;ANDROID_ABI&#125;/libimported-lib.so )</span><br><span class="line"></span><br><span class="line"># 包含头文件的路径</span><br><span class="line">include_directories( imported-lib<span class="regexp">/include/</span> )</span><br></pre></td></tr></table></figure>
<p>如果要显示执行构建过程中的详细信息，比如为了得到更详细的出错信息。</p>
<p>运行后在<code>.externalNativeBuild/cmake/debug/{abi}/cmake_build_output.txt</code>查看log</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 开启输出详细的编译和链接信息</span><br><span class="line">set(CMAKE_VERBOSE_MAKEFILE on)</span><br><span class="line"></span><br><span class="line">message(STATUS <span class="string">"要打印的信息"</span>)</span><br></pre></td></tr></table></figure>
<p>自定义变量</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set(变量名 变量值)</span><br></pre></td></tr></table></figure>
<p>常用变量</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 引用变量格式：$&#123;变量名&#125;</span><br><span class="line"></span><br><span class="line"># 工程的源文件目录</span><br><span class="line">PROJECT_SOURCE_DIR </span><br><span class="line"># CMakeList.txt文件所在的目录</span><br><span class="line">CMAKE_SOURCE_DIR</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/ndk/guides/cmake" target="_blank" rel="noopener">CMake</a></li>
<li><a href="https://juejin.im/post/5a30fa9b6fb9a0450167f43e" target="_blank" rel="noopener">使用 CMake 进行 NDK 开发之如何编写 CMakeLists txt 脚本</a></li>
<li><a href="https://blog.csdn.net/guiying712/article/details/75452193" target="_blank" rel="noopener">JNI和NDK编程-使用AndroidStudio进行NDK开发</a></li>
<li><a href="https://juejin.im/post/595da4e25188250d8b65ddbf" target="_blank" rel="noopener">Android NDK开发扫盲及最新CMake的编译使用</a></li>
<li><a href="https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html" target="_blank" rel="noopener"><a href="https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html#id2" target="_blank" rel="noopener">cmake-commands</a></a></li>
<li><a href="https://blog.csdn.net/qq_34902522/article/details/78144127" target="_blank" rel="noopener">通过CMake来进行ndk开发之补充篇</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android NDK开发-环境搭建]]></title>
      <url>https://xch168.github.io/2018/07/01/android-ndk-environment/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>NDK</code>全称Native Development Kit，是一组可以让您在Android应用中利用C和C++代码的工具。</p>
<a id="more"></a>
<p>使用NDK的好处：</p>
<p><code>安全</code>：APK的Java层代码很容易被反编译，而C/C++库反编译难度较大。</p>
<p><code>效率</code>：将要求高性能的应用逻辑使用C开发，从而提高应用程序的执行效率。</p>
<p><code>移植</code>：用C/C++写的库可以方便在其他的嵌入式平台上再次使用，如在Android、iOS使用。</p>
<p><code>复用</code>：可以方便地使用现存的开源库。大部分现存的开源库都是用C/C++代码编写的，如音视频处理库FFmpeg。</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><p>Android Studio 3.2</p>
<h4 id="下载NDK"><a href="#下载NDK" class="headerlink" title="下载NDK"></a>下载NDK</h4><p><img src="/2018/07/01/android-ndk-environment/ndk_download.png" alt="download_ndk"></p>
<p><code>LLDB</code>：是C/C++的调试器，可以用来做NDK开发的调试。</p>
<p>下载后的NDK位置(Mac)：<code>/Users/你的用户名/Library/Android/sdk/ndk-bundle</code></p>
<h3 id="使用NDK"><a href="#使用NDK" class="headerlink" title="使用NDK"></a>使用NDK</h3><h4 id="创建一个支持NDK的Project"><a href="#创建一个支持NDK的Project" class="headerlink" title="创建一个支持NDK的Project"></a>创建一个支持NDK的Project</h4><p><img src="/2018/07/01/android-ndk-environment/create_ndk_project.png" alt="create_ndk_project"></p>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src="/2018/07/01/android-ndk-environment/ndk_project_structure.png" alt="ndk-project_structure"></p>
<h4 id="Gradle配置"><a href="#Gradle配置" class="headerlink" title="Gradle配置"></a>Gradle配置</h4><p><img src="/2018/07/01/android-ndk-environment/ndk_gradle_config.png" alt="ndk-gradle-config"></p>
<h4 id="CMakeLists-txt构建脚本配置"><a href="#CMakeLists-txt构建脚本配置" class="headerlink" title="CMakeLists.txt构建脚本配置"></a>CMakeLists.txt构建脚本配置</h4><p><img src="/2018/07/01/android-ndk-environment/ndk_cmake_config.png" alt="ndk-cmake-config"></p>
<h4 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h4><p><img src="/2018/07/01/android-ndk-environment/ndk-native-jni.png" alt="ndk-native-jni-code"></p>
<h4 id="生成so库"><a href="#生成so库" class="headerlink" title="生成so库"></a>生成so库</h4><p><img src="/2018/07/01/android-ndk-environment/ndk_so.png" alt="ndk-so"></p>
<p>生成的so库会自动打包到apk中，不需要手动去移动。</p>
<p>使用<code>Analyze Apk</code>工具查看打包apk中的so库</p>
<p><img src="/2018/07/01/android-ndk-environment/ndk_apk_analyze.png" alt="ndk-apk-analyze"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/a396901990/article/details/51872849" target="_blank" rel="noopener">NDK开发－简介&amp;环境搭建</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Lint进行静态代码分析]]></title>
      <url>https://xch168.github.io/2018/06/17/use-lint-analyse-code/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>Lint是Android Studio提供的一个代码扫描工具，通过对代码进行静态分析，可以帮助开发者发现代码的质量问题和提出一下改进建议。</p>
<p>Lint工具可检查您的Android项目源文件是否包含潜在错误，以及在正确性、安全性、性能、易用性、便利性和国际化方面是否需要改进优化。</p>
</blockquote>
<a id="more"></a>
<h3 id="Lint的工作流程"><a href="#Lint的工作流程" class="headerlink" title="Lint的工作流程"></a>Lint的工作流程</h3><p><img src="/2018/06/17/use-lint-analyse-code/lint_flow.png" alt="Lint 工具的代码扫描工作流"></p>
<p>应用源文件：源文件包含组成 Android 项目的文件，包括 Java 和 XML 文件、图标和 ProGuard 配置文件等。</p>
<p><code>lint.xml</code>文件：此配置文件可用于指定您希望排除的任何 Lint 检查以及自定义问题严重级别。</p>
<p>Lint工具：可以从命令行或在 Android Studio 中对 Android 项目运行此静态代码扫描工具。</p>
<p>Lint检查结果：可以在控制台或 Android Studio 的 Inspection Results 窗口中查看 Lint 检查结果。</p>
<ul>
<li>Correctness：正确性</li>
<li>Security：安全性</li>
<li>Performance：性能</li>
<li>Usability：易用性</li>
<li>Accessibility：便利性</li>
<li>I18n：国际化</li>
</ul>
<h3 id="通过-Gradle-运行-Lint"><a href="#通过-Gradle-运行-Lint" class="headerlink" title="通过 Gradle 运行 Lint"></a>通过 Gradle 运行 Lint</h3><ul>
<li><p>在 Windows 上：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew lint</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Linux 或 Mac 上：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew lint</span><br></pre></td></tr></table></figure>
<p>为特定构建变体运行 <code>lint</code> 任务，您必须大写变体名称并在其前面加上 <code>lint</code> 前缀。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew lintDebug</span><br></pre></td></tr></table></figure>
<p>Lint 工具完成其检查后，Lint 报告会提供两个路径，分别指向该报告的 XML 和 HTML 版本。</p>
<p><img src="/2018/06/17/use-lint-analyse-code/lint_report.png" alt="lint_report"></p>
</li>
</ul>
<h3 id="在Android-Studio手动运行检查"><a href="#在Android-Studio手动运行检查" class="headerlink" title="在Android Studio手动运行检查"></a>在Android Studio手动运行检查</h3><p><strong>Analyze &gt;Inspect Code</strong> ，手动运行已配置的 Lint 和其他 IDE 检查。检查结果显示在 <strong>Inspection Results</strong> 窗口中。</p>
<p><img src="/2018/06/17/use-lint-analyse-code/inspect.png" alt="inspect"></p>
<p><img src="/2018/06/17/use-lint-analyse-code/inspection_results.png" alt="inspect_results"></p>
<h3 id="通过-Gradle-配置-Lint-选项"><a href="#通过-Gradle-配置-Lint-选项" class="headerlink" title="通过 Gradle 配置 Lint 选项"></a>通过 Gradle 配置 Lint 选项</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        <span class="comment">// 设置为 true，则当 Lint 发现错误时停止 Gradle 构建</span></span><br><span class="line">        abortOnError <span class="literal">false</span></span><br><span class="line">        <span class="comment">// 设置为 true，则当有错误时会显示文件的全路径或绝对路径 (默认情况下为true)</span></span><br><span class="line">        absolutePaths <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 仅检查指定的问题（根据 id 指定）</span></span><br><span class="line">        check <span class="string">'NewApi'</span>, <span class="string">'InlinedApi'</span></span><br><span class="line">        <span class="comment">// 设置为 true 则检查所有的问题，包括默认不检查问题</span></span><br><span class="line">        checkAllWarnings <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 设置为 true 后，release 构建都会以 Fatal 的设置来运行 Lint。</span></span><br><span class="line">        <span class="comment">// 如果构建时发现了致命（Fatal）的问题，会中止构建（具体由 abortOnError 控制）</span></span><br><span class="line">        checkReleaseBuilds <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 不检查指定的问题（根据问题 id 指定）</span></span><br><span class="line">        disable <span class="string">'TypographyFractions'</span>,<span class="string">'TypographyQuotes'</span></span><br><span class="line">        <span class="comment">// 检查指定的问题（根据 id 指定）</span></span><br><span class="line">        enable <span class="string">'RtlHardcoded'</span>,<span class="string">'RtlCompat'</span>, <span class="string">'RtlEnabled'</span></span><br><span class="line">        <span class="comment">// 在报告中是否返回对应的 Lint 说明</span></span><br><span class="line">        explainIssues <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 写入报告的路径，默认为构建目录下的 lint-results.html</span></span><br><span class="line">        htmlOutput file(<span class="string">"lint-report.html"</span>)</span><br><span class="line">        <span class="comment">// 设置为 true 则会生成一个 HTML 格式的报告</span></span><br><span class="line">        htmlReport <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 设置为 true 则只报告错误</span></span><br><span class="line">        ignoreWarnings <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 重新指定 Lint 规则配置文件</span></span><br><span class="line">        lintConfig file(<span class="string">"default-lint.xml"</span>)</span><br><span class="line">        <span class="comment">// 设置为 true 则错误报告中不包括源代码的行号</span></span><br><span class="line">        noLines <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 设置为 true 时 Lint 将不报告分析的进度</span></span><br><span class="line">        quiet <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 覆盖 Lint 规则的严重程度，例如：</span></span><br><span class="line">        severityOverrides [<span class="string">"MissingTranslation"</span>: LintOptions.SEVERITY_WARNING]</span><br><span class="line">        <span class="comment">// 设置为 true 则显示一个问题所在的所有地方，而不会截短列表</span></span><br><span class="line">        showAll <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 配置写入输出结果的位置，格式可以是文件或 stdout</span></span><br><span class="line">        textOutput <span class="string">'stdout'</span></span><br><span class="line">        <span class="comment">// 设置为 true，则生成纯文本报告（默认为 false）</span></span><br><span class="line">        textReport <span class="literal">false</span></span><br><span class="line">        <span class="comment">// 设置为 true，则会把所有警告视为错误处理</span></span><br><span class="line">        warningsAsErrors <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 写入检查报告的文件（不指定默认为 lint-results.xml）</span></span><br><span class="line">        xmlOutput file(<span class="string">"lint-report.xml"</span>)</span><br><span class="line">        <span class="comment">// 设置为 true 则会生成一个 XML 报告</span></span><br><span class="line">        xmlReport <span class="literal">false</span></span><br><span class="line">        <span class="comment">// 将指定问题（根据 id 指定）的严重级别（severity）设置为 Fatal</span></span><br><span class="line">        fatal <span class="string">'NewApi'</span>, <span class="string">'InlineApi'</span></span><br><span class="line">        <span class="comment">// 将指定问题（根据 id 指定）的严重级别（severity）设置为 Error</span></span><br><span class="line">        error <span class="string">'Wakelock'</span>, <span class="string">'TextViewEdits'</span></span><br><span class="line">        <span class="comment">// 将指定问题（根据 id 指定）的严重级别（severity）设置为 Warning</span></span><br><span class="line">        warning <span class="string">'ResourceAsColor'</span></span><br><span class="line">        <span class="comment">// 将指定问题（根据 id 指定）的严重级别（severity）设置为 ignore</span></span><br><span class="line">        ignore <span class="string">'TypographyQuotes'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>lint.xml</code>配置文件示例</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">lint</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Disable the given check in this project --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">"IconMissingDensityFolder"</span> <span class="attr">severity</span>=<span class="string">"ignore"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Ignore the ObsoleteLayoutParam issue in the specified files --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">"ObsoleteLayoutParam"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ignore</span> <span class="attr">path</span>=<span class="string">"res/layout/activation.xml"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ignore</span> <span class="attr">path</span>=<span class="string">"res/layout-xlarge/activation.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">issue</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Ignore the UselessLeaf issue in the specified file --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">"UselessLeaf"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ignore</span> <span class="attr">path</span>=<span class="string">"res/layout/main.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">issue</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Change the severity of hardcoded strings to "error" --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">"HardcodedText"</span> <span class="attr">severity</span>=<span class="string">"error"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">"Deprecated"</span> <span class="attr">severity</span>=<span class="string">"warning"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ignore</span> <span class="attr">regexp</span>=<span class="string">"singleLine"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">issue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">lint</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>issue标签</code>：指定的一个检测规则，</p>
<p><code>id</code>：规则名</p>
<p><code>severity</code>：严重级别</p>
<p><code>ignore标签</code>：指定忽略检查的文件，或者匹配正则表达式</p>
<h3 id="配置-Lint-对-Java-的检查"><a href="#配置-Lint-对-Java-的检查" class="headerlink" title="配置 Lint 对 Java 的检查"></a>配置 Lint 对 Java 的检查</h3><p>在 Java 代码添加 <code>@SuppressLint</code> 注解，来特别禁止 Lint 检查某个 Java 类或方法</p>
<p>示例1. 关闭对方法中<code>NewApi</code>问题的检测</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.main);</span><br></pre></td></tr></table></figure>
<p>示例2. 关闭类中<code>ParserError</code>问题的检测</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"ParserError"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeedProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</span><br></pre></td></tr></table></figure>
<p>示例3. 禁止检查 Java 文件中的所有 Lint 问题</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"all"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="配置-Lint-对-XML-的检查"><a href="#配置-Lint-对-XML-的检查" class="headerlink" title="配置 Lint 对 XML 的检查"></a>配置 Lint 对 XML 的检查</h3><p>使用<code>tools:ignore</code> 属性禁止 Lint 检查 XML 文件的特定部分，首先要在所在的xml文件添加命名空间</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:tools="http://schemas.android.com/tools"</span><br></pre></td></tr></table></figure>
<p>示例1. 忽略<linearlayout> 元素中的 UnusedResources 问题</linearlayout></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:ignore</span>=<span class="string">"UnusedResources"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/auto_update_prompt"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>示例2. 禁止检查多个问题，使用以逗号分隔的字符串列出要禁止检查的问题</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tools:ignore="NewApi,StringFormatInvalid"</span><br></pre></td></tr></table></figure>
<p>示例3. 禁止 Lint 检查 XML 元素中的所有问题</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tools:ignore="all"</span><br></pre></td></tr></table></figure>
<h3 id="在Android-Studio中查看和编辑检查配置文件"><a href="#在Android-Studio中查看和编辑检查配置文件" class="headerlink" title="在Android Studio中查看和编辑检查配置文件"></a>在Android Studio中查看和编辑检查配置文件</h3><blockquote>
<p>Android Studio 附带多种 Lint 及其他检查配置文件，可通过 Android 更新来更新此类配置文件。您可以原封不动地使用这些配置文件，也可以编辑它们的名称、描述、严重级别和范围。您还可以激活和停用全部配置文件组或一组配置文件中的个别配置文件。</p>
</blockquote>
<ol>
<li><p>选择 <strong>Analyze &gt; Inspect Code</strong>。</p>
</li>
<li><p>在 <strong>Specify Scope</strong> 对话框中的 <strong>Inspection Profile</strong> 下面，点击 <strong>More</strong>。</p>
<p>此时将显示 <strong>Inspections</strong> 对话框，其中列出了一系列支持的检查及其描述。</p>
<p><img src="/2018/06/17/use-lint-analyse-code/inspect_profile.png" alt="inspect_profile"></p>
</li>
<li><p>选择 <strong>Profile</strong> 下拉列表，在 <strong>Default</strong> (Android Studio) 和 <strong>Project Default</strong>（活动项目）检查项目之间切换。</p>
</li>
<li><p>在左侧窗格的 <strong>Inspections</strong> 对话框中，选择最上面的配置文件类别，或展开一个组，选择特定配置文件。选择一种配置文件类别后，您可以将此类别中的所有检查项目当作一个检查项目进行编辑。</p>
</li>
<li><p>选择 <strong>Manage</strong> 下拉列表，以复制、重命名、将描述添加至、导出和导入检查项目。</p>
</li>
<li><p>操作完成后点击 <strong>OK</strong>。</p>
</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/studio/write/lint#commandline" target="_blank" rel="noopener">使用 Lint 改进您的代码</a></li>
<li><a href="https://juejin.im/post/59dde8036fb9a045055d1b93#heading-2" target="_blank" rel="noopener">Android Lint 实践 —— 简介及常见问题分析</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android中tools属性的使用]]></title>
      <url>https://xch168.github.io/2018/06/09/android-tools-attributes-use/</url>
      <content type="html"><![CDATA[<h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><blockquote>
<p>Android Studio在<code>tools</code>命名空间中支持一些XML属性来开关设计功能和编译时行为。当构建应用时，构建工具会删除这些属性，从而不会影响APK的大小和运行行为。</p>
</blockquote>
<a id="more"></a>
<h4 id="二、引入tools命名空间"><a href="#二、引入tools命名空间" class="headerlink" title="二、引入tools命名空间"></a>二、引入<code>tools</code>命名空间</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RootTag</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span> &gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="三、XML视图预览相关属性"><a href="#三、XML视图预览相关属性" class="headerlink" title="三、XML视图预览相关属性"></a>三、XML视图预览相关属性</h4><h5 id="1-tools-替代android"><a href="#1-tools-替代android" class="headerlink" title="1. tools:替代android:"></a>1. <code>tools:</code>替代<code>android:</code></h5><p>示例1：预览时展示指定文本。</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_text.png" alt="tools_text"></p>
<p>示例2：<code>tools:text</code>和<code>android:text</code>同时存在，在预览时<code>tools:text</code>属性会覆盖<code>android:text</code>属性。</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_text2.png" alt="tools_text2"></p>
<h5 id="2-tools-context"><a href="#2-tools-context" class="headerlink" title="2. tools:context"></a>2. tools:context</h5><p>声明该布局文件默认关联的Activity，这样可以在预览的时候就知道展示的主题，并且知道在哪插入<code>onClick</code>对应的处理事件。</p>
<p>示例1：为Activity指定主题</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_context_theme.png" alt="tools_context_theme"></p>
<p>示例2：快速创建<code>onClick</code>的事件处理方法</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_context_onclick.png" alt="tools_context_onclick"></p>
<h5 id="3-tools-itemCount"><a href="#3-tools-itemCount" class="headerlink" title="3. tools:itemCount"></a>3. tools:itemCount</h5><p>用在<code>RecyclerView</code>用来指定预览几项</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_itemcount.png" alt="tools_itemCount"></p>
<h5 id="4-tools-layout"><a href="#4-tools-layout" class="headerlink" title="4. tools:layout"></a>4. tools:layout</h5><p>这个属性用来声明这个fragment内部所加载展示的布局</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_layout.png" alt="tools_layout"></p>
<h5 id="5-tools-listitem"><a href="#5-tools-listitem" class="headerlink" title="5. tools:listitem"></a>5. tools:listitem</h5><p>用在ListView用来指定其item的布局</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_listitem.png" alt="tools_listitem"></p>
<h5 id="6-tools-showIn"><a href="#6-tools-showIn" class="headerlink" title="6. tools:showIn"></a>6. tools:showIn</h5><p>指定这个View被<code>&lt;include&gt;</code>到哪个layout中</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@string/hello_world"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:showIn</span>=<span class="string">"@layout/activity_main"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="7-tools-sample-资源"><a href="#7-tools-sample-资源" class="headerlink" title="7.@tools:sample/*资源"></a>7.<code>@tools:sample/*</code>资源</h5><p>为View设置占位文本或图片</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_sample_resource.png" alt="tools_sample_resource"></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>@tools:sample/full_names</td>
<td>姓名</td>
</tr>
<tr>
<td>@tools:sample/date/ddmmyy</td>
<td>日期</td>
</tr>
<tr>
<td>@tools:sample/avatars</td>
<td>头像</td>
</tr>
<tr>
<td>@tools:sample/backgrounds/scenicb</td>
<td>背景图</td>
</tr>
</tbody>
</table>
<h4 id="四、资源压缩相关属性"><a href="#四、资源压缩相关属性" class="headerlink" title="四、资源压缩相关属性"></a>四、资源压缩相关属性</h4><p>开启资源压缩</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            shrinkResources <span class="literal">true</span>  <span class="comment">// 开启资源压缩。minifyEnabled也必须为true，否则编译不通过</span></span><br><span class="line">            minifyEnabled <span class="literal">true</span>    <span class="comment">// 开启代码混淆/压缩</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>),</span><br><span class="line">                    <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="1-tools-shrinkMode"><a href="#1-tools-shrinkMode" class="headerlink" title="1. tools:shrinkMode"></a>1. tools:shrinkMode</h5><p>这个属性允许你指定构建工具是否使用“安全模式”(<code>shrinkMode=&quot;safe&quot;</code>)或“严格模式”(<code>shrinkMode=&quot;strict&quot;</code>)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:shrinkMode</span>=<span class="string">"strict"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>当启用严格模式，需要使用<code>tools:keep</code>来保持那些真实需要但又被删除的资源，使用<code>tools:discard</code>来明确删除更多的资源</p>
<h5 id="2-tools-keep"><a href="#2-tools-keep" class="headerlink" title="2. tools:keep"></a>2. tools:keep</h5><p>这个属性允许你指定那些运行时间接引用的资源。例如动态生成的资源名称传递给<code>Resources.getIdentifier()</code></p>
<p>可以创建一个XML文件，如<code>res/raw/keep.xml</code>，以<code>&lt;resources&gt;</code>为根标签</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:keep</span>=<span class="string">"@layout/used_1,@layout/used_2,@layout/*_3"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="3-tools-discard"><a href="#3-tools-discard" class="headerlink" title="3. tools:discard"></a>3. tools:discard</h5><p>这个属性允许你手动指定需要被删除的资源。(一般因为资源被引用但是没有作用于app，或者因为Gradle插件的误报这个资源被引用)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:discard</span>=<span class="string">"@layout/unused_1"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="五、错误处理相关属性"><a href="#五、错误处理相关属性" class="headerlink" title="五、错误处理相关属性"></a>五、错误处理相关属性</h4><p>以下属性用于过滤<code>Lint</code>警告消息</p>
<h5 id="1-tools-ignore"><a href="#1-tools-ignore" class="headerlink" title="1. tools:ignore"></a>1. tools:ignore</h5><p>该属性可以作用于任何元素，接受逗号分隔的lint Issue列表。</p>
<p>示例：如果对文本进行硬编码时，XML代码将会变黄；添加<code>tools:ignore=&quot;HardcodedText&quot;</code>即可让lint忽略警告</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_ignore.png" alt="tools_ignore"></p>
<h5 id="2-tools-targetApi"><a href="#2-tools-targetApi" class="headerlink" title="2. tools:targetApi"></a>2. tools:targetApi</h5><p>指明某个控件只在指定的API 及更高的版本中生效。这样，在使用 Lint 检测时就不会因 minSdkVersion 低于控件出现的版本而报错。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">GridLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:targetApi</span>=<span class="string">"14"</span> &gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="3-tools-locale"><a href="#3-tools-locale" class="headerlink" title="3. tools:locale"></a>3. tools:locale</h5><p>指明 resources 中元素的语言类型，避免拼写检查或者Lint 检查时报错。</p>
<p>例如，可以添加到<code>values/strings.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:locale</span>=<span class="string">"es"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ol>
<li><a href="https://developer.android.com/studio/write/tool-attributes" target="_blank" rel="noopener">Tools attributes reference</a></li>
<li><a href="https://www.jianshu.com/p/2912bcba4465" target="_blank" rel="noopener">Android:Tools命名空间原来是有大用处的</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android中一个很有用的属性——clipChildren]]></title>
      <url>https://xch168.github.io/2018/05/28/clip-children/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p><code>android:clipChildren</code>：字面意思是裁剪子视图。用来定义一个子视图的绘制是否可以超出边界。默认值为true，表示不超出边界，设置为false时，表示允许子视图超出边界。</p>
</blockquote>
<a id="more"></a>
<h3 id="一布局三张图了解clipChildren的使用"><a href="#一布局三张图了解clipChildren的使用" class="headerlink" title="一布局三张图了解clipChildren的使用"></a>一布局三张图了解clipChildren的使用</h3><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:clipChildren</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#FDB300"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"68dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="图一：根布局属性android-clipChildren-quot-false-quot-中间ImageView的属性为android-layout-gravity-quot-bottom-quot"><a href="#图一：根布局属性android-clipChildren-quot-false-quot-中间ImageView的属性为android-layout-gravity-quot-bottom-quot" class="headerlink" title="图一：根布局属性android:clipChildren=&quot;false&quot;, 中间ImageView的属性为android:layout_gravity=&quot;bottom&quot;"></a>图一：根布局属性<code>android:clipChildren=&quot;false&quot;</code>, 中间ImageView的属性为<code>android:layout_gravity=&quot;bottom&quot;</code></h4><p><img src="/2018/05/28/clip-children/p1.png" alt="p1"></p>
<h4 id="图二：将根布局属性android-clipChildren-quot-false-quot-去掉"><a href="#图二：将根布局属性android-clipChildren-quot-false-quot-去掉" class="headerlink" title="图二：将根布局属性android:clipChildren=&quot;false&quot;去掉"></a>图二：将根布局属性<code>android:clipChildren=&quot;false&quot;</code>去掉</h4><p><img src="/2018/05/28/clip-children/p2.png" alt="p2"></p>
<h4 id="图三：将第三个ImageView的属性android-layout-gravity-quot-bottom-quot"><a href="#图三：将第三个ImageView的属性android-layout-gravity-quot-bottom-quot" class="headerlink" title="图三：将第三个ImageView的属性android:layout_gravity=&quot;bottom&quot;"></a>图三：将第三个ImageView的属性<code>android:layout_gravity=&quot;bottom&quot;</code></h4><p><img src="/2018/05/28/clip-children/p3.png" alt="p3"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、<code>android:clipChildren</code>必须设置在根布局</p>
<p>2、中间ImageView设置属性<code>android:layout_gravity=bottom</code>，是从底部向上绘制该子View。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android反编译：Apktool、dex2jar、JD-GUI的使用]]></title>
      <url>https://xch168.github.io/2018/05/20/apktool-dex2jar-jd/</url>
      <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>如果看到某款应用的功能很好奇，而对于其实现方式一头雾水。那么就可以对其进行反编译，来获取其中的实现方式。</p>
<p><code>Apktool</code>: </p>
<ol>
<li>可以用来将资源恢复到原来的形式，包括<code>resources.arc</code> 、<code>classes.dex</code>、<code>9.png</code> 和<code>XML文件</code></li>
<li>可以将反编译后的资源文件重新打包成二进制的APK/JAR文件</li>
</ol>
<p><code>dex2jar</code>: 用来将<code>classes.dex</code>转为jar文件</p>
<p><code>JD-GUI</code>: 用来将查看jar文件，机制是将jar中的.class文件转为.java文件<br><a id="more"></a></p>
<h3 id="二、准备工作-Mac版"><a href="#二、准备工作-Mac版" class="headerlink" title="二、准备工作(Mac版)"></a>二、准备工作(Mac版)</h3><ul>
<li><p>ApkTool：</p>
<ul>
<li><p>下载地址：<a href="https://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="noopener">ApkTool运行脚本</a>、<a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="noopener">ApkTool运行库</a></p>
</li>
<li><p>安装： </p>
</li>
</ul>
<ol>
<li><p>将<code>apktool_x.x.x.jar</code>命名为<code>apktool.jar</code></p>
</li>
<li><p>将<code>apktool</code>脚本、<code>apktool.jar</code>文件移动到<code>/usr/local/bin</code>目录下</p>
</li>
<li><p>为上述两个文件增加可执行权限，命令如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x apktool</span><br><span class="line">chmod +x apktool.jar</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>dex2jar:</p>
<ul>
<li><p>下载地址：<a href="https://sourceforge.net/projects/dex2jar/files/" target="_blank" rel="noopener">dex2jar</a></p>
</li>
<li><p>安装：</p>
</li>
</ul>
<ol>
<li><p>将下载好的dex2jar压缩包解压，将<code>d2j-dex2jar.sh</code>重命名为<code>dex2jar.sh</code>(这个命令最常用，名称短一点好)</p>
</li>
<li><p>将解压后的文件夹复制到<code>/usr/local/bin</code>目录下</p>
</li>
<li><p>为<code>d2j_invoke.sh</code>增加可执行权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x d2j_invoke.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量(因为dex2jar可执行文件下<code>/usr/local/bin</code>的子目录下，所有要配置环境变量)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 打开.bash_profile文件，并添加如下配置：</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/bin/dex2jar</span><br><span class="line"><span class="comment"># 2. 执行命令：source ~/.bash_profile，让配置立即生效</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>JD-GUI:</p>
<ol>
<li>下载地址：<a href="http://jd.benow.ca/" target="_blank" rel="noopener">JD-GUI</a></li>
<li>安装：解压后，将<code>JD-GUI.app</code>复制到<code>Applications</code>文件夹，然后点击即可使用</li>
</ol>
</li>
</ul>
<h3 id="三、使用Apktool反编译apk获取资源文件"><a href="#三、使用Apktool反编译apk获取资源文件" class="headerlink" title="三、使用Apktool反编译apk获取资源文件"></a>三、使用Apktool反编译apk获取资源文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在终端执行如下命令，就会在apk文件目录下创建一个和apk同名的文件夹，该文件夹中放的是反编译的资源文件</span></span><br><span class="line">apktool d /xxx/xxx/xxx.apk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将反编译后的文件重新打包</span></span><br><span class="line">apktool b /xx/xx/xxx</span><br></pre></td></tr></table></figure>
<h3 id="四、使用dex2jar将dex反编译成jar"><a href="#四、使用dex2jar将dex反编译成jar" class="headerlink" title="四、使用dex2jar将dex反编译成jar"></a>四、使用dex2jar将dex反编译成jar</h3><ol>
<li><p>使用解压软件将apk文件解压</p>
</li>
<li><p>在终端执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd 到apk解压的目录，然后执行命令(apk解压目录中可能有多个.dex文件，要分别反编译)，</span></span><br><span class="line">dex2jar classes.dex</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="五、JD-GUI的使用"><a href="#五、JD-GUI的使用" class="headerlink" title="五、JD-GUI的使用"></a>五、JD-GUI的使用</h3><p>​    直接打开<code>JD-GUI.app</code>，然后将通过<code>dex2jar</code>反编译后的<code>.jar</code>文件拖动到<code>JD-GUI</code>就可以查看到反编译后的java代码了。(反编译后会出现abc这样的类和包名，是因为作者对代码进行了混淆，这样反编译后代码的可读性变差)</p>
<p><img src="/2018/05/20/apktool-dex2jar-jd/decompile.png" alt="decompile"></p>
<h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>使用这些工具是为了让我们更好的学习代码，写出更好的代码。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
            <tag> Decompile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android代码混淆——Proguard]]></title>
      <url>https://xch168.github.io/2018/05/13/android-garble-proguard/</url>
      <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><blockquote>
<p>ProGuard 会检测和移除封装应用中未使用的类、字段、方法和属性，包括自带代码库中的未使用项（这使其成为以变通方式解决64k 引用限制的有用工具）。ProGuard 还可优化字节码，移除未使用的代码指令，以及用短名称混淆其余的类、字段和方法。混淆过的代码可令您的 APK 难以被逆向工程，这在应用使用许可验证等安全敏感性功能时特别有用。<br><a id="more"></a></p>
</blockquote>
<h3 id="二、开启混淆"><a href="#二、开启混淆" class="headerlink" title="二、开启混淆"></a>二、开启混淆</h3><p>在module的<code>build.gradle</code>文件中添加<code>minifyEnabled true</code>。由于代码混淆会导致构建速度变慢，所有不要在调试的构建中使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled true</span><br><span class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>proguard-android.txt</code> :是系统默认的混淆规则配置文件，位置在 <code>&lt;Android SDK目录&gt;/tools/proguard</code>文件夹下。如果想进一步的压缩代码，可以使用位于相同目录下的<code>proguard-android-optimize.txt</code>文件，它还包含其他在字节码一级（方法内和方法间）执行分析的优化，以进一步减小APK大小和帮助提供运行速度。</li>
<li><code>prguard-rules.pro</code>在每个module中都有一个该文件，用于自定义对应module的ProGuard规则。</li>
</ul>
<h3 id="三、混淆规则"><a href="#三、混淆规则" class="headerlink" title="三、混淆规则"></a>三、混淆规则</h3><p>从系统的<code>proguard-android.txt</code>文件来学习混淆规则。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"># This file is no longer maintained and is not used by new (2.2+) versions of the</span><br><span class="line"># Android plugin for Gradle. Instead, the Android plugin for Gradle generates the</span><br><span class="line"># default rules at build time and stores them in the build directory.</span><br><span class="line"># SDK中的该文件已经不再维护，从Gradle2.2+版本后，gradle插件会自动生成这个默认配置文件，位置位于&lt;项目根目录&gt;/build/intermediates/proguard-files</span><br><span class="line"></span><br><span class="line"># 混淆时不使用大小写混合，混淆后的类名为小写</span><br><span class="line">-dontusemixedcaseclassnames</span><br><span class="line"></span><br><span class="line"># 不跳过非公共的库的类</span><br><span class="line">-dontskipnonpubliclibraryclasses</span><br><span class="line"></span><br><span class="line"># 混淆后生成映射文件，map 类名-&gt;转化后类名的映射</span><br><span class="line">-verbose</span><br><span class="line"></span><br><span class="line"># Optimization is turned off by default. Dex does not like code run</span><br><span class="line"># through the ProGuard optimize and preverify steps (and performs some</span><br><span class="line"># of these optimizations on its own).</span><br><span class="line"># 优化默认关闭，Dex不喜欢通过ProGuard的优化和预处理操作</span><br><span class="line">-dontoptimize</span><br><span class="line">-dontpreverify</span><br><span class="line"></span><br><span class="line"># Note that if you want to enable optimization, you cannot just</span><br><span class="line"># include optimization flags in your own project configuration file;</span><br><span class="line"># instead you will need to point to the</span><br><span class="line"># &quot;proguard-android-optimize.txt&quot; file instead of this one from your</span><br><span class="line"># project.properties file.</span><br><span class="line"></span><br><span class="line"># 保护代码中的Annotation不被混淆，这在JSON实体映射非常重要，如GSON</span><br><span class="line">-keepattributes *Annotation*</span><br><span class="line">-keep public class com.google.vending.licensing.ILicensingService</span><br><span class="line">-keep public class com.android.vending.licensing.ILicensingService</span><br><span class="line"></span><br><span class="line"># For native methods, see http://proguard.sourceforge.net/manual/examples.html#native</span><br><span class="line"># 保留所有的地方native方法不被混淆</span><br><span class="line">-keepclasseswithmembernames class * &#123;</span><br><span class="line">    native &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># keep setters in Views so that animations can still work.</span><br><span class="line"># see http://proguard.sourceforge.net/manual/examples.html#beans</span><br><span class="line"># 不混淆View中的setXxx()和getXxx()方法，以保证熟悉动画能正常工作</span><br><span class="line">-keepclassmembers public class * extends android.view.View &#123;</span><br><span class="line">   void set*(***);</span><br><span class="line">   *** get*();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># We want to keep methods in Activity that could be used in the XML attribute onClick</span><br><span class="line"># 不混淆Activity中参数是View的方法，保证xml绑定的点击事件可以正常工作</span><br><span class="line">-keepclassmembers class * extends android.app.Activity &#123;</span><br><span class="line">   public void *(android.view.View);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># For enumeration classes, see http://proguard.sourceforge.net/manual/examples.html#enumerations</span><br><span class="line"># 不混淆枚举类中的value()和valueOf()方法</span><br><span class="line">-keepclassmembers enum * &#123;</span><br><span class="line">    public static **[] values();</span><br><span class="line">    public static ** valueOf(java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆Parcelable实现类中的CREATOR字段，以保证Parcelable机制正常工作</span><br><span class="line">-keepclassmembers class * implements android.os.Parcelable &#123;</span><br><span class="line">  public static final android.os.Parcelable$Creator CREATOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆R文件中的所有静态字段，以保证正确找到每个资源id</span><br><span class="line">-keepclassmembers class **.R$* &#123;</span><br><span class="line">    public static &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># The support library contains references to newer platform versions.</span><br><span class="line"># Don&apos;t warn about those in case this app is linking against an older</span><br><span class="line"># platform version.  We know about them, and they are safe.</span><br><span class="line"># 不对android.support包下的代码警告。(如果打包的版本低于support包下某些类的使用版本，会出现警告)</span><br><span class="line">-dontwarn android.support.**</span><br><span class="line"></span><br><span class="line"># Understand the @Keep support annotation.</span><br><span class="line"># 不混淆Keep类</span><br><span class="line">-keep class android.support.annotation.Keep</span><br><span class="line"></span><br><span class="line"># 不混淆使用了注解的类和类成员</span><br><span class="line">-keep @android.support.annotation.Keep class * &#123;*;&#125;</span><br><span class="line"></span><br><span class="line"># 如果类中有使用了注解的方法，则不混淆类和类成员</span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 如果类中有使用了注解的字段，则不混淆类和类成员</span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 如果类中有使用了注解的构造函数，则不混淆类和类成员</span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;init&gt;(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="keep类关键字"><a href="#keep类关键字" class="headerlink" title="keep类关键字"></a>keep类关键字</h4><table>
<thead>
<tr>
<th>关键字</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>keep</td>
<td>保留类和类成员，防止被混淆或移除</td>
</tr>
<tr>
<td>keepnames</td>
<td>保留类和类成员，防止被混淆，但是没被引用的类成员会被移除</td>
</tr>
<tr>
<td>keepclassmembers</td>
<td>只保留类成员，防止被混淆或移除</td>
</tr>
<tr>
<td>keepclassmembersnames</td>
<td>只保留类成员，防止被混淆，但没被引用的类成员会被移除</td>
</tr>
<tr>
<td>keepclasseswithmembers</td>
<td>保留类和类成员，防止被混淆或移除，如果指定的类成员不存在还是会被混淆</td>
</tr>
<tr>
<td>keepclasseswithmembernames</td>
<td>保留类和类成员，防止被混淆，如果指定的类成员不存在还是会被混淆，没有被引用的类成员会被移除</td>
</tr>
</tbody>
</table>
<h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><table>
<thead>
<tr>
<th>通配符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>匹配任意长度字符，但不包含分隔符 “.”。例如一个类com.github.xch168.User，使用com.github.xch168.<em> 是可以匹配，但是com.github.</em> 不能匹配</td>
</tr>
<tr>
<td>**</td>
<td>匹配任意长度字符，包括分隔符”.”。如使用com.github.**,匹配包下的所有内容，可以匹配到com.github.xch168.User。</td>
</tr>
<tr>
<td>***</td>
<td>匹配任意参数类型。例如<code>*** getName(***)</code> 可匹配String getName(String)</td>
</tr>
<tr>
<td>…</td>
<td>匹配任意长度的任意类型参数。例如void setName(…) 可以匹配void setName(String firstName, String secondName)</td>
</tr>
<tr>
<td><code>&lt;fileds&gt;</code></td>
<td>匹配类、接口中所有字段</td>
</tr>
<tr>
<td><code>&lt;methods&gt;</code></td>
<td>匹配类、接口中所有方法</td>
</tr>
<tr>
<td><code>&lt;init&gt;</code></td>
<td>匹配类中所有构造函数</td>
</tr>
</tbody>
</table>
<h3 id="四、配置自己的混淆"><a href="#四、配置自己的混淆" class="headerlink" title="四、配置自己的混淆"></a>四、配置自己的混淆</h3><ul>
<li>WebView中使用JS调用，需要添加如下配置：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-keepclassmembers class fqcn.of.javascript.interface.for.webview &#123;</span><br><span class="line">   public *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>不混淆某个特定的类和类中的所有成员</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keep class com.github.xch168.utils.CommonUtil &#123; *; &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>不混淆膜拜目录下的文件，例如使用Gson时，数据bean不能被混淆，需要添加如下配置：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keep class com.github.xch168.model.** &#123; *; &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>保留泛型</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keepattributes Signature</span><br></pre></td></tr></table></figure>
<ul>
<li>保留用于调试堆栈跟中的行号信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keepattributes SourceFile,LineNumberTable</span><br></pre></td></tr></table></figure>
<ul>
<li>如果使用了上一行配置，还需要添加如下配置将源文件重命名为SourceFile，以便通过鼠标点击直达源文件：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-renamesourcefileattribute SourceFile</span><br></pre></td></tr></table></figure>
<ul>
<li>第三方库混淆案例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Retrofit</span><br><span class="line"># Retain generic type information for use by reflection by converters and adapters.</span><br><span class="line">-keepattributes Signature</span><br><span class="line"># Retain service method parameters.</span><br><span class="line">-keepclassmembernames,allowobfuscation interface * &#123;</span><br><span class="line">    @retrofit2.http.* &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"># Ignore annotation used for build tooling.</span><br><span class="line">-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement</span><br><span class="line"></span><br><span class="line"># Okhttp</span><br><span class="line">-dontwarn okhttp3.**</span><br><span class="line">-dontwarn okio.**</span><br><span class="line">-dontwarn javax.annotation.**</span><br><span class="line">-dontwarn org.conscrypt.**</span><br><span class="line"># A resource is loaded with a relative path so the package of this class must be preserved.</span><br><span class="line">-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase</span><br></pre></td></tr></table></figure>
<h3 id="五、查看混淆结果"><a href="#五、查看混淆结果" class="headerlink" title="五、查看混淆结果"></a>五、查看混淆结果</h3><p>混淆打包后就会在<code>&lt;module目录&gt;/build/outputs/mapping/release</code>目录生成混淆的相关文件。</p>
<ul>
<li><p><code>dump.txt</code></p>
<p>说明 APK 中所有类文件的内部结构。</p>
</li>
<li><p><code>mapping.txt</code></p>
<p>提供原始与混淆过的类、方法和字段名称之间的转换。</p>
</li>
<li><p><code>seeds.txt</code></p>
<p>列出未进行混淆的类和成员。</p>
</li>
<li><p><code>usage.txt</code></p>
<p>列出从 APK 移除的代码。</p>
</li>
</ul>
<p>混淆后可以用Android Studio的<code>Analyze APK</code>工具对混淆后的apk包进行分析。</p>
<p><img src="/2018/05/13/android-garble-proguard/apkanalyze.png" alt="apkanalyze"></p>
<h3 id="六、追溯Crash堆栈信息"><a href="#六、追溯Crash堆栈信息" class="headerlink" title="六、追溯Crash堆栈信息"></a>六、追溯Crash堆栈信息</h3><p>混淆后的代码运行出错的堆栈信息如下，看不到具体的类名</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java<span class="variable">.lang</span><span class="variable">.NullPointerException</span>: Attempt to invoke <span class="keyword">virtual</span> method '<span class="keyword">void</span> android<span class="variable">.widget</span><span class="variable">.TextView</span><span class="variable">.setOnClickListener</span>(android<span class="variable">.view</span><span class="variable">.View</span>$OnClickListener)' on a <span class="literal">null</span> object reference</span><br><span class="line">        at com<span class="variable">.github</span><span class="variable">.xch168</span><span class="variable">.testas32</span><span class="variable">.MainActivity</span><span class="variable">.k</span>(Unknown Source:<span class="number">7</span>)</span><br><span class="line">        at com<span class="variable">.github</span><span class="variable">.xch168</span><span class="variable">.testas32</span><span class="variable">.MainActivity</span><span class="variable">.onCreate</span>(Unknown Source:<span class="number">9</span>)</span><br><span class="line">        at android<span class="variable">.app</span><span class="variable">.Activity</span><span class="variable">.performCreate</span>(Activity<span class="variable">.java</span>:<span class="number">7130</span>)</span><br><span class="line">        at android<span class="variable">.app</span><span class="variable">.Activity</span><span class="variable">.performCreate</span>(Activity<span class="variable">.java</span>:<span class="number">7121</span>)</span><br><span class="line">        at android<span class="variable">.app</span><span class="variable">.Instrumentation</span><span class="variable">.callActivityOnCreate</span>(Instrumentation<span class="variable">.java</span>:<span class="number">1262</span>)</span><br><span class="line">        at android<span class="variable">.app</span><span class="variable">.ActivityThread</span><span class="variable">.performLaunchActivity</span>(ActivityThread<span class="variable">.java</span>:<span class="number">2905</span>)</span><br><span class="line">        at android<span class="variable">.app</span><span class="variable">.ActivityThread</span><span class="variable">.handleLaunchActivity</span>(ActivityThread<span class="variable">.java</span>:<span class="number">3060</span>) </span><br><span class="line">        at android<span class="variable">.app</span><span class="variable">.servertransaction</span><span class="variable">.LaunchActivityItem</span><span class="variable">.execute</span>(LaunchActivityItem<span class="variable">.java</span>:<span class="number">78</span>)</span><br></pre></td></tr></table></figure>
<p>为了解决这个问题，可以使用<code>&lt;SDK目录&gt;\tools\proguard\bin</code>下的<strong>proguardgui.bat</strong>脚本将Crash堆栈信息还原到混淆前的状态。步骤如下：</p>
<ol>
<li>运行<code>proguardgui.bat</code>脚本，然后点击<code>ReTrace</code></li>
<li>选择<code>mapping.txt</code>文件，位于<code>&lt;module目录&gt;/build/outputs/mapping/release</code></li>
<li>拷贝混淆后出错的堆栈信息</li>
<li>点击右下角的ReTrace!按钮，完成Crash堆栈信息的追溯</li>
</ol>
<p><img src="/2018/05/13/android-garble-proguard/retrace.png" alt="retrace"></p>
<h3 id="七、压缩资源"><a href="#七、压缩资源" class="headerlink" title="七、压缩资源"></a>七、压缩资源</h3><blockquote>
<p>资源压缩只与代码压缩协同工作。代码压缩器移除所有未使用的代码后，资源压缩器便可确定应用仍然使用的资源。这在您添加包含资源的代码库时体现得尤为明显 - 您必须移除未使用的库代码，使库资源变为未引用资源，才能通过资源压缩器将它们移除。</p>
</blockquote>
<p>开启资源压缩：</p>
<p>在 <code>build.gradle</code> 文件中将 <code>shrinkResources</code> 属性设置为 <code>true</code>（在用于代码压缩的 <code>minifyEnabled</code> 旁边）</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            shrinkResources <span class="literal">true</span></span><br><span class="line">            minifyEnabled <span class="literal">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>),</span><br><span class="line">                    <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="八、自定义要保留的资源"><a href="#八、自定义要保留的资源" class="headerlink" title="八、自定义要保留的资源"></a>八、自定义要保留的资源</h3><blockquote>
<p>如果您有想要保留或舍弃的特定资源，请在您的项目中创建一个包含 <code>&lt;resources&gt;</code> 标记的 XML 文件，并在 <code>tools:keep</code> 属性中指定每个要保留的资源，在 <code>tools:discard</code> 属性中指定每个要舍弃的资源。这两个属性都接受逗号分隔的资源名称列表。您可以使用星号字符作为通配符。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:keep</span>=<span class="string">"@layout/l_used*_c,@layout/l_used_a,@layout/l_used_b*"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:discard</span>=<span class="string">"@layout/unused2"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>将该文件保存在项目资源中，例如，保存在 <code>res/raw/keep.xml</code>。构建不会将该文件打包到 APK 之中。</p>
<h3 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h3><p>混淆后可以减小APK的大小，可以提高被反编译的难度，但是混淆后需要进行系统全面的测试。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/studio/build/shrink-code?hl=zh-cn" target="_blank" rel="noopener">压缩代码和资源</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650824879&amp;idx=1&amp;sn=f7d6830cb10046ff61bb461a15353e34&amp;chksm=80b7b431b7c03d271d1d836b586a29f813d738d9b7774075f8b50e7ab0215052c3e075ab71c4&amp;scene=38#wechat_redirect" target="_blank" rel="noopener">Android 混淆查缺补漏</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用UI Automator实现Android UI的自动化测试]]></title>
      <url>https://xch168.github.io/2018/05/06/uiautomator-use/</url>
      <content type="html"><![CDATA[<h3 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h3><p>UI Automator测试框架提供了一组API来构建UI测试，用于在用户应用和系统应用中执行交互。UI Automator测试框架非常适合编写黑盒自动化测试，其中的测试代码不依赖于目标应用的内部实现详情。</p>
<a id="more"></a>
<h3 id="0x02-使用uiautomatorviewer工具获取Android应用的控件信息"><a href="#0x02-使用uiautomatorviewer工具获取Android应用的控件信息" class="headerlink" title="0x02 使用uiautomatorviewer工具获取Android应用的控件信息"></a>0x02 使用uiautomatorviewer工具获取Android应用的控件信息</h3><blockquote>
<p><code>uiautomatorviewer</code> 工具提供了方便的GUI，可以扫描和分析Android设备上当前显示的UI组件。您可以使用此工具检查布局层次结构，并查看在设备前台显示的UI组件属性。利用此信息，可以使用UI Automator创建控制更加精确的测试。</p>
</blockquote>
<p><code>uiautomatorviewer</code> 工具位于<code>&lt;android-sdk&gt;/tools/</code>目录中。</p>
<p><img src="/2018/05/06/uiautomator-use/uiautomatorviewer.png" alt="uiautomatorviewer"></p>
<h3 id="0x03-在Android项目中添加依赖"><a href="#0x03-在Android项目中添加依赖" class="headerlink" title="0x03 在Android项目中添加依赖"></a>0x03 在Android项目中添加依赖</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">androidTestImplementation <span class="string">'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'</span></span><br></pre></td></tr></table></figure>
<h3 id="0x04-创建单元测试类"><a href="#0x04-创建单元测试类" class="headerlink" title="0x04 创建单元测试类"></a>0x04 创建单元测试类</h3><p><img src="/2018/05/06/uiautomator-use/UiTest.png" alt="UiTest"></p>
<h3 id="0x05-创建测试用例"><a href="#0x05-创建测试用例" class="headerlink" title="0x05 创建测试用例"></a>0x05 创建测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用JUnit4运行器</span></span><br><span class="line"><span class="meta">@RunWith</span>(AndroidJUnit4.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UiTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instrumentation可以在主程序启动之前，创建模拟的Context；发送UI事件给应用程序；</span></span><br><span class="line">    <span class="comment">// 检查程序当前运行状态；控制Android如何加载应用程序，控制应用程序和控件的生命周期;</span></span><br><span class="line">    <span class="comment">// 可以直接调用控件的方法，对控件的属性进行查看和修改</span></span><br><span class="line">    <span class="keyword">private</span> Instrumentation mInstrumentation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代表着Android设备</span></span><br><span class="line">    <span class="keyword">private</span> UiDevice mUiDevice;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试用例执行前，用于一些处理一些初始化工作</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mInstrumentation = InstrumentationRegistry.getInstrumentation();</span><br><span class="line">        mUiDevice = UiDevice.getInstance(mInstrumentation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个测试用例</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取屏幕上计算器的数字"9"的控件，"com.android.calculator2:id/digit_9"为通过uiautomatoviewer工具获取的控件id</span></span><br><span class="line">        UiObject2 digit9 = mUiDevice.findObject(By.res(<span class="string">"com.android.calculator2:id/digit_9"</span>));</span><br><span class="line">        <span class="comment">// 获取屏幕上计算器的数字"8"的控件</span></span><br><span class="line">        UiObject2 digit8 = mUiDevice.findObject(By.res(<span class="string">"com.android.calculator2:id/digit_8"</span>));</span><br><span class="line">        <span class="comment">// 获取屏幕上计算器的"*"控件</span></span><br><span class="line">        UiObject2 opMul = mUiDevice.findObject(By.res(<span class="string">"com.android.calculator2:id/op_mul"</span>));</span><br><span class="line">        <span class="comment">// 获取屏幕上计算器的"="的控件</span></span><br><span class="line">        UiObject2 opEq = mUiDevice.findObject(By.res(<span class="string">"com.android.calculator2:id/eq"</span>));</span><br><span class="line">        <span class="comment">// 获取屏幕上计算器的结果显示控件</span></span><br><span class="line">        UiObject2 result = mUiDevice.findObject(By.res(<span class="string">"com.android.calculator2:id/result"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动依序执行：</span></span><br><span class="line">        <span class="comment">// 1.点击计算器"9"控件</span></span><br><span class="line">        <span class="comment">// 2.点击计算器"*"控件</span></span><br><span class="line">        <span class="comment">// 3.点击计算器"8"控件</span></span><br><span class="line">        <span class="comment">// 4.点击计算器"="控件</span></span><br><span class="line">        digit9.click();</span><br><span class="line">        opMul.click();</span><br><span class="line">        digit8.click();</span><br><span class="line">        opEq.click();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取计算结果控件的值</span></span><br><span class="line">        String resultValue = result.getText();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行断言判断，判断结果是否和预期一致</span></span><br><span class="line">        Assert.assertEquals(<span class="number">72</span>, Integer.parseInt(resultValue));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试用例执行完后执行</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2018/05/06/uiautomator-use/digit9.jpg" alt="digit9"></p>
<h3 id="0x06-执行测试用例"><a href="#0x06-执行测试用例" class="headerlink" title="0x06 执行测试用例"></a>0x06 执行测试用例</h3><p><img src="/2018/05/06/uiautomator-use/result.gif" alt="result"></p>
<h3 id="0x07-相关API介绍"><a href="#0x07-相关API介绍" class="headerlink" title="0x07 相关API介绍"></a>0x07 相关API介绍</h3><p>常见组件操作，类-UiObject2</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>点击</td>
<td>public boolean click()</td>
</tr>
<tr>
<td>长按</td>
<td>public boolean longClick()</td>
</tr>
<tr>
<td>拖动</td>
<td>public void drag(Point dest)</td>
</tr>
<tr>
<td>输入</td>
<td>public boolean setText(String text)</td>
</tr>
</tbody>
</table>
<p>常见设备操作，类-UiDevice</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>点击坐标</td>
<td>public void click(int x, int y)</td>
</tr>
<tr>
<td>按键</td>
<td>public void pressKeyCode(int keyCode)</td>
</tr>
<tr>
<td>滑动</td>
<td>public boolean swipe(int startX, int startY,int endX,int endY,int steps)// 1个步长表示5ms</td>
</tr>
</tbody>
</table>
<h3 id="0x08-其他用途"><a href="#0x08-其他用途" class="headerlink" title="0x08 其他用途"></a>0x08 其他用途</h3><p>自动化是用于解放双手，将机械化的重复操作交由程序。UIAutomator可以用于进行重复的UI测试，也可以用于完成其他的类似转发链接给通讯录里的所有好友。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/topic/libraries/testing-support-library/#UIAutomator" target="_blank" rel="noopener">测试支持库</a></li>
<li><a href="https://blog.csdn.net/yiwachen/article/details/52464635" target="_blank" rel="noopener">Android白盒测试之Instrumentation初探（一）</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[adb常用命令]]></title>
      <url>https://xch168.github.io/2018/01/21/adb-commands/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>adb(Android Debug Bridge)Android调试桥，是一个通用命令行工具，其允许您与模拟器实例或连接的Android设备进行通信。</p>
</blockquote>
<a id="more"></a>
<h3 id="启动adb服务"><a href="#启动adb服务" class="headerlink" title="启动adb服务"></a>启动adb服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb start-server</span><br></pre></td></tr></table></figure>
<h3 id="停止adb服务"><a href="#停止adb服务" class="headerlink" title="停止adb服务"></a>停止adb服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure>
<h3 id="查询连接的设备"><a href="#查询连接的设备" class="headerlink" title="查询连接的设备"></a>查询连接的设备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>
<h3 id="安装APK"><a href="#安装APK" class="headerlink" title="安装APK"></a>安装APK</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install &lt;path_to_apk&gt;</span><br></pre></td></tr></table></figure>
<h3 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall &lt;packageName&gt;</span><br></pre></td></tr></table></figure>
<h3 id="指定执行命令的目标设备"><a href="#指定执行命令的目标设备" class="headerlink" title="指定执行命令的目标设备"></a>指定执行命令的目标设备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s &lt;serialNumber&gt; &lt;command&gt;</span><br></pre></td></tr></table></figure>
<h3 id="从电脑拷贝文件到设备"><a href="#从电脑拷贝文件到设备" class="headerlink" title="从电脑拷贝文件到设备"></a>从电脑拷贝文件到设备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push &lt;电脑文件路径&gt; &lt;手机中的指定路径&gt;</span><br></pre></td></tr></table></figure>
<h3 id="从设备拷贝文件到电脑"><a href="#从设备拷贝文件到电脑" class="headerlink" title="从设备拷贝文件到电脑"></a>从设备拷贝文件到电脑</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull &lt;手机中文件的路径&gt; &lt;电脑中文件的存放位置&gt;</span><br></pre></td></tr></table></figure>
<h3 id="查看当前界面显示的Activity的名字"><a href="#查看当前界面显示的Activity的名字" class="headerlink" title="查看当前界面显示的Activity的名字"></a>查看当前界面显示的Activity的名字</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Windows</span><br><span class="line">adb shell dumpsys activity|findstr "mFocusedActivity"</span><br><span class="line">// Mac OS</span><br><span class="line">adb shell dumpsys activity|grep "mFocusedActivity"</span><br></pre></td></tr></table></figure>
<h3 id="清除应用数据与缓存"><a href="#清除应用数据与缓存" class="headerlink" title="清除应用数据与缓存"></a>清除应用数据与缓存</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm clear &lt;packageName&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、<a href="https://developer.android.google.cn/studio/command-line/adb.html?hl=zh-cn" target="_blank" rel="noopener">Android Debug Bridge (adb)</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高级Android开发工程师必备技能]]></title>
      <url>https://xch168.github.io/2018/01/08/skill-for-advanced-android-development-engineers/</url>
      <content type="html"><![CDATA[<p>1、精通Java、Kotlin，熟悉Java虚拟机工作原理；</p>
<p>2、熟悉面向对象设计和分析，能够运用常用的设计模式；</p>
<a id="more"></a>
<p>3、扎实的数据结构、算法基础；</p>
<p>4、熟悉网络编程、多线程，熟悉TCP/IP、HTTP/HTTPS等协议；</p>
<p>5、熟练使用Android SDK，深入理解Android系统原理和Framework层原理；</p>
<p>6、对Android系统应用管理、进程管理、内存管理机制有深入理解；</p>
<p>7、精通Android上开发、调试、编译、打包等流程；</p>
<p>8、了解ANR、OOM的触发场景及规避方法；</p>
<p>9、熟悉移动APP内存优化、性能优化、电量等的调优，并熟练使用相应的工具进行问题排查（TraceView、MAT、SystemTrace、等）</p>
<p>10、熟悉开源框架（网络引擎、图片缓存框架等）的使用，熟悉开源框架原理及源码；</p>
<p>11、有足够的软件安全意识，掌握数据加密、代码混淆、防破解、性能优化等技术；</p>
<p>12、关注新技术方向，对APP架构设计模式有自己理解，能够实现性能优良、可复用的组件；</p>
<p>13、熟悉JNI/NDK开发</p>
<p>14、有在开源社区如GitHub或Google Code上做过贡献，或者在Stack Overflow上做过Android相关回答</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用bintray-release快速发布库到JCenter]]></title>
      <url>https://xch168.github.io/2017/07/23/use-bintray-release-publish-lib-to-jcenter/</url>
      <content type="html"><![CDATA[<ol>
<li><p>前往<a href="https://bintray.com/" target="_blank" rel="noopener">https://bintray.com/</a> 注册账号</p>
</li>
<li><p>在bintray中创建一个maven仓库</p>
<a id="more"></a>
<p><img src="/2017/07/23/use-bintray-release-publish-lib-to-jcenter/create_maven_repository.png" alt="create_maven_repository"></p>
</li>
<li><p>在Android项目中的根build.gradle中，添加如下代码：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    classpath <span class="string">'com.novoda:bintray-release:0.5.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在local.properties文件中添加bintray的用户名和API key</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bintray.user=xxxxx</span><br><span class="line">bintray.key=xxxxxxxx</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目根目录下创建secret.gradle用于读取local.properties中配置的用户名和API KEy</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载资源</span></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties()</span><br><span class="line">InputStream inputStream = project.rootProject.file(<span class="string">'local.properties'</span>).newDataInputStream()</span><br><span class="line">properties.load( inputStream )</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取字段</span></span><br><span class="line">ext.bintray_key = properties.getProperty(<span class="string">'bintray.key'</span>)</span><br><span class="line">ext.bintray_user = properties.getProperty(<span class="string">'bintray.user'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在library所在的module中的build.gradle中，添加bintray-release插件的应用和secret.gradle的配置；</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.novoda.bintray-release'</span></span><br><span class="line">apply <span class="string">from:</span> rootProject.file(<span class="string">"secret.gradle"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在library所在的module中的build.gradle中，添加发布到JCenter的参数配置；</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">publish &#123;</span><br><span class="line">    userOrg = <span class="string">'xch168'</span>            <span class="comment">// bintray.com用户名</span></span><br><span class="line">    groupId = <span class="string">'com.github.xch168'</span> <span class="comment">// jcenter上的路径</span></span><br><span class="line">    artifactId = <span class="string">'androidUtil'</span>    <span class="comment">// 项目名称</span></span><br><span class="line">    publishVersion = <span class="string">'0.0.5'</span>      <span class="comment">// 版本号</span></span><br><span class="line">    desc = <span class="string">'Oh hi, this is a nice description for a project, right?'</span> <span class="comment">// 描述，不重要</span></span><br><span class="line">    website = <span class="string">'https://github.com/xch168/AndroidUtil'</span>                <span class="comment">// 网站，不重要；可以填写GitHub中的项目地址</span></span><br><span class="line"></span><br><span class="line">    bintrayUser = bintray_user <span class="comment">// bintray.com的用户名</span></span><br><span class="line">    bintrayKey = bintray_key   <span class="comment">// bintray.com的API key</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目根目录下创建快速发布脚本publish.sh(Mac OS) or publish.bat(Windows)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Mac OS</span><br><span class="line">./gradlew clean build generatePomFileForReleasePublication bintrayUpload -PdryRun=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">// Windows</span><br><span class="line">gradlew clean build generatePomFileForReleasePublication bintrayUpload -PdryRun=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行publish脚本，发布项目，项目发布成功后进入bintray.com，可以看到如下：<br><img src="/2017/07/23/use-bintray-release-publish-lib-to-jcenter/library_maven.png" alt="library_maven"></p>
</li>
<li><p>将项目同步到JCenter(需要等待审核)<br><img src="/2017/07/23/use-bintray-release-publish-lib-to-jcenter/add_to_jcenter.png" alt="add_to_jcenter"><br><img src="/2017/07/23/use-bintray-release-publish-lib-to-jcenter/jcenter.png" alt="jcenter"></p>
</li>
<li><p>使用自己发布的库</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.github.xch168:androidUtil:0.0.5'</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android性能优化典范]]></title>
      <url>https://xch168.github.io/2017/02/05/android-performance-patterns/</url>
      <content type="html"><![CDATA[<p><a href="http://hukai.me/android-performance-patterns/" target="_blank" rel="noopener">Android 性能优化典范（一）</a>：主要从 Android 的渲染机制、内存与 GC、电量优化三个方面展开，介绍了 Android 中性能问题的底层工作原理，以及如何通过工具来找出性能问题及提升性能的建议。<br><a href="http://hukai.me/android-performance-patterns-season-2/" target="_blank" rel="noopener">Android 性能优化典范（二）</a>：20 个短视频，主要内容为：电量优化、网络优化、Android Wear 上如何做优化、使用对象池来提高效率、LRU Cache、Bitmap 的缩放、缓存、重用、PNG 压缩、自定义 View 的性能、提升设置 alpha 之后 View 的渲染性能，以及 Lint、StictMode 等工具的使用技巧。<br><a id="more"></a><br><a href="http://hukai.me/android-performance-patterns-season-3/" target="_blank" rel="noopener">Android 性能优化典范（三）</a>：更高效的 ArrayMap 容器，使用 Android 系统提供的特殊容器来避免自动装箱，避免使用枚举类型，注意onLowMemory与onTrimMemory的回调，避免内存泄漏，高效的位置更新操作，重复 layout 操作的性能影响，以及使用 Batching，Prefetching 优化网络请求，压缩传输数据等使用技巧。<br><a href="http://hukai.me/android-performance-patterns-season-4/" target="_blank" rel="noopener">Android 性能优化典范（四）</a>：优化网络请求的行为，优化安装包的资源文件，优化数据传输的效率，性能优化的几大基础原理等。<br><a href="http://hukai.me/android-performance-patterns-season-5/" target="_blank" rel="noopener">Android 性能优化典范（五）</a>：文章共有10个段落，涉及的内容有：多线程并发的性能问题，介绍了 AsyncTask、HandlerThread、IntentService 与 ThreadPool 分别适合的使用场景以及各自的使用注意事项。这是一篇了解 Android 多线程编程不可多得的基础文章，清楚地了解这些 Android 系统提供的多线程基础组件之间的差异以及优缺点，才能够在项目实战中做出最恰当的选择。<br><a href="http://hukai.me/android-performance-patterns-season-6/" target="_blank" rel="noopener">Android 性能优化典范（六）</a>：文章共 6 个段落，涉及的内容主要有程序启动时间性能优化的三个方面：优化 activity 的创建过程，优化 Application 对象的启动过程，正确使用启动显屏达到优化程序启动性能的目的。另外还介绍了减少安装包大小的 checklist 以及如何使用 VectorDrawable 来减少安装包的大小。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Performance </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
